
I2C-AHT20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b720  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  0800b8c0  0800b8c0  0001b8c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd30  0800bd30  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd30  0800bd30  0001bd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd38  0800bd38  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd38  0800bd38  0001bd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd3c  0800bd3c  0001bd3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800bd40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  200001d8  0800bf14  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  0800bf14  00020548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   000124b5  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000262f  00000000  00000000  000326fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001170  00000000  00000000  00034d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd7  00000000  00000000  00035ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b57  00000000  00000000  00036c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014e07  00000000  00000000  0004f7ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009db1a  00000000  00000000  000645d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000603c  00000000  00000000  001020f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  0010812c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b8a8 	.word	0x0800b8a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800b8a8 	.word	0x0800b8a8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a6 	b.w	800101c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9e08      	ldr	r6, [sp, #32]
 8000d5a:	460d      	mov	r5, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	460f      	mov	r7, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4694      	mov	ip, r2
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0xe2>
 8000d6a:	fab2 f382 	clz	r3, r2
 8000d6e:	b143      	cbz	r3, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d74:	f1c3 0220 	rsb	r2, r3, #32
 8000d78:	409f      	lsls	r7, r3
 8000d7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7e:	4317      	orrs	r7, r2
 8000d80:	409c      	lsls	r4, r3
 8000d82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d86:	fa1f f58c 	uxth.w	r5, ip
 8000d8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d8e:	0c22      	lsrs	r2, r4, #16
 8000d90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	fb01 f005 	mul.w	r0, r1, r5
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da0:	eb1c 0202 	adds.w	r2, ip, r2
 8000da4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da8:	f080 811c 	bcs.w	8000fe4 <__udivmoddi4+0x290>
 8000dac:	4290      	cmp	r0, r2
 8000dae:	f240 8119 	bls.w	8000fe4 <__udivmoddi4+0x290>
 8000db2:	3902      	subs	r1, #2
 8000db4:	4462      	add	r2, ip
 8000db6:	1a12      	subs	r2, r2, r0
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc6:	fb00 f505 	mul.w	r5, r0, r5
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	d90a      	bls.n	8000de4 <__udivmoddi4+0x90>
 8000dce:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x294>
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x294>
 8000de0:	4464      	add	r4, ip
 8000de2:	3802      	subs	r0, #2
 8000de4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11e      	cbz	r6, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40dc      	lsrs	r4, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	e9c6 4300 	strd	r4, r3, [r6]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0xbc>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f000 80ed 	beq.w	8000fde <__udivmoddi4+0x28a>
 8000e04:	2100      	movs	r1, #0
 8000e06:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e10:	fab3 f183 	clz	r1, r3
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d149      	bne.n	8000eac <__udivmoddi4+0x158>
 8000e18:	42ab      	cmp	r3, r5
 8000e1a:	d302      	bcc.n	8000e22 <__udivmoddi4+0xce>
 8000e1c:	4282      	cmp	r2, r0
 8000e1e:	f200 80f8 	bhi.w	8001012 <__udivmoddi4+0x2be>
 8000e22:	1a84      	subs	r4, r0, r2
 8000e24:	eb65 0203 	sbc.w	r2, r5, r3
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4617      	mov	r7, r2
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d0e2      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	e9c6 4700 	strd	r4, r7, [r6]
 8000e34:	e7df      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e36:	b902      	cbnz	r2, 8000e3a <__udivmoddi4+0xe6>
 8000e38:	deff      	udf	#255	; 0xff
 8000e3a:	fab2 f382 	clz	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8090 	bne.w	8000f64 <__udivmoddi4+0x210>
 8000e44:	1a8a      	subs	r2, r1, r2
 8000e46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4a:	fa1f fe8c 	uxth.w	lr, ip
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e54:	fb07 2015 	mls	r0, r7, r5, r2
 8000e58:	0c22      	lsrs	r2, r4, #16
 8000e5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e5e:	fb0e f005 	mul.w	r0, lr, r5
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x124>
 8000e66:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x122>
 8000e70:	4290      	cmp	r0, r2
 8000e72:	f200 80cb 	bhi.w	800100c <__udivmoddi4+0x2b8>
 8000e76:	4645      	mov	r5, r8
 8000e78:	1a12      	subs	r2, r2, r0
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e80:	fb07 2210 	mls	r2, r7, r0, r2
 8000e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e88:	fb0e fe00 	mul.w	lr, lr, r0
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x14e>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x14c>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	f200 80bb 	bhi.w	8001016 <__udivmoddi4+0x2c2>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	eba4 040e 	sub.w	r4, r4, lr
 8000ea6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eaa:	e79f      	b.n	8000dec <__udivmoddi4+0x98>
 8000eac:	f1c1 0720 	rsb	r7, r1, #32
 8000eb0:	408b      	lsls	r3, r1
 8000eb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eba:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebe:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec2:	40fd      	lsrs	r5, r7
 8000ec4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec8:	4323      	orrs	r3, r4
 8000eca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ece:	fa1f fe8c 	uxth.w	lr, ip
 8000ed2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ed6:	0c1c      	lsrs	r4, r3, #16
 8000ed8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000edc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee0:	42a5      	cmp	r5, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eea:	d90b      	bls.n	8000f04 <__udivmoddi4+0x1b0>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ef4:	f080 8088 	bcs.w	8001008 <__udivmoddi4+0x2b4>
 8000ef8:	42a5      	cmp	r5, r4
 8000efa:	f240 8085 	bls.w	8001008 <__udivmoddi4+0x2b4>
 8000efe:	f1a8 0802 	sub.w	r8, r8, #2
 8000f02:	4464      	add	r4, ip
 8000f04:	1b64      	subs	r4, r4, r5
 8000f06:	b29d      	uxth	r5, r3
 8000f08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x1da>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f24:	d26c      	bcs.n	8001000 <__udivmoddi4+0x2ac>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	d96a      	bls.n	8001000 <__udivmoddi4+0x2ac>
 8000f2a:	3b02      	subs	r3, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f32:	fba3 9502 	umull	r9, r5, r3, r2
 8000f36:	eba4 040e 	sub.w	r4, r4, lr
 8000f3a:	42ac      	cmp	r4, r5
 8000f3c:	46c8      	mov	r8, r9
 8000f3e:	46ae      	mov	lr, r5
 8000f40:	d356      	bcc.n	8000ff0 <__udivmoddi4+0x29c>
 8000f42:	d053      	beq.n	8000fec <__udivmoddi4+0x298>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x208>
 8000f46:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40ca      	lsrs	r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	4317      	orrs	r7, r2
 8000f58:	e9c6 7400 	strd	r7, r4, [r6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f64:	f1c3 0120 	rsb	r1, r3, #32
 8000f68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f70:	fa25 f101 	lsr.w	r1, r5, r1
 8000f74:	409d      	lsls	r5, r3
 8000f76:	432a      	orrs	r2, r5
 8000f78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f84:	fb07 1510 	mls	r5, r7, r0, r1
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f92:	428d      	cmp	r5, r1
 8000f94:	fa04 f403 	lsl.w	r4, r4, r3
 8000f98:	d908      	bls.n	8000fac <__udivmoddi4+0x258>
 8000f9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa2:	d22f      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fa4:	428d      	cmp	r5, r1
 8000fa6:	d92d      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fa8:	3802      	subs	r0, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1b49      	subs	r1, r1, r5
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fbc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc0:	4291      	cmp	r1, r2
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x282>
 8000fc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fc8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fcc:	d216      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	d914      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000fd2:	3d02      	subs	r5, #2
 8000fd4:	4462      	add	r2, ip
 8000fd6:	1a52      	subs	r2, r2, r1
 8000fd8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fdc:	e738      	b.n	8000e50 <__udivmoddi4+0xfc>
 8000fde:	4631      	mov	r1, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000fe4:	4639      	mov	r1, r7
 8000fe6:	e6e6      	b.n	8000db6 <__udivmoddi4+0x62>
 8000fe8:	4610      	mov	r0, r2
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x90>
 8000fec:	4548      	cmp	r0, r9
 8000fee:	d2a9      	bcs.n	8000f44 <__udivmoddi4+0x1f0>
 8000ff0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	e7a3      	b.n	8000f44 <__udivmoddi4+0x1f0>
 8000ffc:	4645      	mov	r5, r8
 8000ffe:	e7ea      	b.n	8000fd6 <__udivmoddi4+0x282>
 8001000:	462b      	mov	r3, r5
 8001002:	e794      	b.n	8000f2e <__udivmoddi4+0x1da>
 8001004:	4640      	mov	r0, r8
 8001006:	e7d1      	b.n	8000fac <__udivmoddi4+0x258>
 8001008:	46d0      	mov	r8, sl
 800100a:	e77b      	b.n	8000f04 <__udivmoddi4+0x1b0>
 800100c:	3d02      	subs	r5, #2
 800100e:	4462      	add	r2, ip
 8001010:	e732      	b.n	8000e78 <__udivmoddi4+0x124>
 8001012:	4608      	mov	r0, r1
 8001014:	e70a      	b.n	8000e2c <__udivmoddi4+0xd8>
 8001016:	4464      	add	r4, ip
 8001018:	3802      	subs	r0, #2
 800101a:	e742      	b.n	8000ea2 <__udivmoddi4+0x14e>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 0 */
uint32_t value = 0;
double frequency = 0;
uint16_t ADC_RES = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	// get value of adc
	ADC_RES = HAL_ADC_GetValue(hadc);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f001 fa11 	bl	8002450 <HAL_ADC_GetValue>
 800102e:	4603      	mov	r3, r0
 8001030:	b29a      	uxth	r2, r3
 8001032:	4b03      	ldr	r3, [pc, #12]	; (8001040 <HAL_ADC_ConvCpltCallback+0x20>)
 8001034:	801a      	strh	r2, [r3, #0]

}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200003f0 	.word	0x200003f0

08001044 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1){
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7f1b      	ldrb	r3, [r3, #28]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d106      	bne.n	8001062 <HAL_TIM_IC_CaptureCallback+0x1e>
		value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001054:	2100      	movs	r1, #0
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f004 fa32 	bl	80054c0 <HAL_TIM_ReadCapturedValue>
 800105c:	4603      	mov	r3, r0
 800105e:	4a0b      	ldr	r2, [pc, #44]	; (800108c <HAL_TIM_IC_CaptureCallback+0x48>)
 8001060:	6013      	str	r3, [r2, #0]
	}
	if (value != 0){
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_TIM_IC_CaptureCallback+0x48>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00c      	beq.n	8001084 <HAL_TIM_IC_CaptureCallback+0x40>
		frequency = 6000000/value;
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <HAL_TIM_IC_CaptureCallback+0x48>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001070:	fbb2 f3f3 	udiv	r3, r2, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fa5d 	bl	8000534 <__aeabi_ui2d>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4905      	ldr	r1, [pc, #20]	; (8001094 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001080:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200003e4 	.word	0x200003e4
 8001090:	005b8d80 	.word	0x005b8d80
 8001094:	200003e8 	.word	0x200003e8

08001098 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, RxBuffer, 5);
 80010a0:	2205      	movs	r2, #5
 80010a2:	4914      	ldr	r1, [pc, #80]	; (80010f4 <HAL_UART_RxCpltCallback+0x5c>)
 80010a4:	4814      	ldr	r0, [pc, #80]	; (80010f8 <HAL_UART_RxCpltCallback+0x60>)
 80010a6:	f005 f8ae 	bl	8006206 <HAL_UART_Receive_IT>
	if (strcmp(RxBuffer,"Water")==0){
 80010aa:	4914      	ldr	r1, [pc, #80]	; (80010fc <HAL_UART_RxCpltCallback+0x64>)
 80010ac:	4811      	ldr	r0, [pc, #68]	; (80010f4 <HAL_UART_RxCpltCallback+0x5c>)
 80010ae:	f7ff f897 	bl	80001e0 <strcmp>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10c      	bne.n	80010d2 <HAL_UART_RxCpltCallback+0x3a>
		if (status == 0){
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_UART_RxCpltCallback+0x68>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d114      	bne.n	80010ea <HAL_UART_RxCpltCallback+0x52>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80010c0:	2201      	movs	r2, #1
 80010c2:	2120      	movs	r1, #32
 80010c4:	480f      	ldr	r0, [pc, #60]	; (8001104 <HAL_UART_RxCpltCallback+0x6c>)
 80010c6:	f001 ff35 	bl	8002f34 <HAL_GPIO_WritePin>
			status = 1;
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_UART_RxCpltCallback+0x68>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
		if (status == 1){
			status = 0;
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
		}
	}
}
 80010d0:	e00b      	b.n	80010ea <HAL_UART_RxCpltCallback+0x52>
		if (status == 1){
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HAL_UART_RxCpltCallback+0x68>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d107      	bne.n	80010ea <HAL_UART_RxCpltCallback+0x52>
			status = 0;
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_UART_RxCpltCallback+0x68>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2110      	movs	r1, #16
 80010e4:	4807      	ldr	r0, [pc, #28]	; (8001104 <HAL_UART_RxCpltCallback+0x6c>)
 80010e6:	f001 ff25 	bl	8002f34 <HAL_GPIO_WritePin>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200003d0 	.word	0x200003d0
 80010f8:	20000320 	.word	0x20000320
 80010fc:	0800b8c0 	.word	0x0800b8c0
 8001100:	200003e0 	.word	0x200003e0
 8001104:	40020400 	.word	0x40020400

08001108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800110c:	b087      	sub	sp, #28
 800110e:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001110:	f000 fef6 	bl	8001f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001114:	f000 f872 	bl	80011fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001118:	f000 faa6 	bl	8001668 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800111c:	f000 fa7a 	bl	8001614 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001120:	f000 f928 	bl	8001374 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001124:	f000 f9f4 	bl	8001510 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001128:	f000 f952 	bl	80013d0 <MX_TIM1_Init>
  MX_ADC1_Init();
 800112c:	f000 f8d0 	bl	80012d0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // Check I2C communication
  HAL_Delay(100);
 8001130:	2064      	movs	r0, #100	; 0x64
 8001132:	f000 ff57 	bl	8001fe4 <HAL_Delay>
////	  sprintf((char*)msg, "Error\r\n");
//	  HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 500);
//	  HAL_Delay(1000);
//  }

  AHT20_Init();
 8001136:	f000 fb1b 	bl	8001770 <AHT20_Init>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800113a:	2100      	movs	r1, #0
 800113c:	4823      	ldr	r0, [pc, #140]	; (80011cc <main+0xc4>)
 800113e:	f003 fd4d 	bl	8004bdc <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart2, RxBuffer, 5);
 8001142:	2205      	movs	r2, #5
 8001144:	4922      	ldr	r1, [pc, #136]	; (80011d0 <main+0xc8>)
 8001146:	4823      	ldr	r0, [pc, #140]	; (80011d4 <main+0xcc>)
 8001148:	f005 f85d 	bl	8006206 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800114c:	2100      	movs	r1, #0
 800114e:	4822      	ldr	r0, [pc, #136]	; (80011d8 <main+0xd0>)
 8001150:	f003 fc44 	bl	80049dc <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	    HAL_ADC_Start_IT(&hadc1);
 8001154:	4821      	ldr	r0, [pc, #132]	; (80011dc <main+0xd4>)
 8001156:	f000 ffad 	bl	80020b4 <HAL_ADC_Start_IT>

	  	TIM1->CCR1 = ADC_RES << 4;
 800115a:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <main+0xd8>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	011a      	lsls	r2, r3, #4
 8001160:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <main+0xdc>)
 8001162:	635a      	str	r2, [r3, #52]	; 0x34


		AHT20_Read(&temperature, &humidity);
 8001164:	4920      	ldr	r1, [pc, #128]	; (80011e8 <main+0xe0>)
 8001166:	4821      	ldr	r0, [pc, #132]	; (80011ec <main+0xe4>)
 8001168:	f000 fb4e 	bl	8001808 <AHT20_Read>

		sprintf((char*)result, "%d@%.2f@%.2f@%.2f\r\n", ADC_RES, frequency, temperature, humidity);
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <main+0xd8>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	461e      	mov	r6, r3
 8001172:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <main+0xe8>)
 8001174:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001178:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <main+0xe4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f9fb 	bl	8000578 <__aeabi_f2d>
 8001182:	4680      	mov	r8, r0
 8001184:	4689      	mov	r9, r1
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <main+0xe0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9f4 	bl	8000578 <__aeabi_f2d>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001198:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800119c:	e9cd 4500 	strd	r4, r5, [sp]
 80011a0:	4632      	mov	r2, r6
 80011a2:	4914      	ldr	r1, [pc, #80]	; (80011f4 <main+0xec>)
 80011a4:	4814      	ldr	r0, [pc, #80]	; (80011f8 <main+0xf0>)
 80011a6:	f006 fee1 	bl	8007f6c <siprintf>
		HAL_UART_Transmit(&huart2, result, strlen((char*)result), HAL_MAX_DELAY);
 80011aa:	4813      	ldr	r0, [pc, #76]	; (80011f8 <main+0xf0>)
 80011ac:	f7ff f878 	bl	80002a0 <strlen>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	490f      	ldr	r1, [pc, #60]	; (80011f8 <main+0xf0>)
 80011ba:	4806      	ldr	r0, [pc, #24]	; (80011d4 <main+0xcc>)
 80011bc:	f004 ff98 	bl	80060f0 <HAL_UART_Transmit>

		HAL_Delay(500);
 80011c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011c4:	f000 ff0e 	bl	8001fe4 <HAL_Delay>
  {
 80011c8:	e7c4      	b.n	8001154 <main+0x4c>
 80011ca:	bf00      	nop
 80011cc:	200002d8 	.word	0x200002d8
 80011d0:	200003d0 	.word	0x200003d0
 80011d4:	20000320 	.word	0x20000320
 80011d8:	20000290 	.word	0x20000290
 80011dc:	200001f4 	.word	0x200001f4
 80011e0:	200003f0 	.word	0x200003f0
 80011e4:	40010000 	.word	0x40010000
 80011e8:	200003dc 	.word	0x200003dc
 80011ec:	200003d8 	.word	0x200003d8
 80011f0:	200003e8 	.word	0x200003e8
 80011f4:	0800b8c8 	.word	0x0800b8c8
 80011f8:	2000039c 	.word	0x2000039c

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b094      	sub	sp, #80	; 0x50
 8001200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 0320 	add.w	r3, r7, #32
 8001206:	2230      	movs	r2, #48	; 0x30
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f006 ff11 	bl	8008032 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	4b28      	ldr	r3, [pc, #160]	; (80012c8 <SystemClock_Config+0xcc>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	4a27      	ldr	r2, [pc, #156]	; (80012c8 <SystemClock_Config+0xcc>)
 800122a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122e:	6413      	str	r3, [r2, #64]	; 0x40
 8001230:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <SystemClock_Config+0xcc>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	4b22      	ldr	r3, [pc, #136]	; (80012cc <SystemClock_Config+0xd0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001248:	4a20      	ldr	r2, [pc, #128]	; (80012cc <SystemClock_Config+0xd0>)
 800124a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <SystemClock_Config+0xd0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800125c:	2301      	movs	r3, #1
 800125e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001260:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001266:	2302      	movs	r3, #2
 8001268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800126a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800126e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001270:	2304      	movs	r3, #4
 8001272:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001274:	2348      	movs	r3, #72	; 0x48
 8001276:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001278:	2306      	movs	r3, #6
 800127a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800127c:	2307      	movs	r3, #7
 800127e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001280:	f107 0320 	add.w	r3, r7, #32
 8001284:	4618      	mov	r0, r3
 8001286:	f002 fe69 	bl	8003f5c <HAL_RCC_OscConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001290:	f000 fb2e 	bl	80018f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001294:	230f      	movs	r3, #15
 8001296:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001298:	2302      	movs	r3, #2
 800129a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800129c:	2390      	movs	r3, #144	; 0x90
 800129e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f003 f8cb 	bl	800444c <HAL_RCC_ClockConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012bc:	f000 fb18 	bl	80018f0 <Error_Handler>
  }
}
 80012c0:	bf00      	nop
 80012c2:	3750      	adds	r7, #80	; 0x50
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40007000 	.word	0x40007000

080012d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012d6:	463b      	mov	r3, r7
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <MX_ADC1_Init+0x98>)
 80012e4:	4a21      	ldr	r2, [pc, #132]	; (800136c <MX_ADC1_Init+0x9c>)
 80012e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <MX_ADC1_Init+0x98>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ee:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <MX_ADC1_Init+0x98>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012f4:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <MX_ADC1_Init+0x98>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_ADC1_Init+0x98>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <MX_ADC1_Init+0x98>)
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <MX_ADC1_Init+0x98>)
 800130a:	2200      	movs	r2, #0
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <MX_ADC1_Init+0x98>)
 8001310:	4a17      	ldr	r2, [pc, #92]	; (8001370 <MX_ADC1_Init+0xa0>)
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <MX_ADC1_Init+0x98>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <MX_ADC1_Init+0x98>)
 800131c:	2201      	movs	r2, #1
 800131e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_ADC1_Init+0x98>)
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_ADC1_Init+0x98>)
 800132a:	2201      	movs	r2, #1
 800132c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800132e:	480e      	ldr	r0, [pc, #56]	; (8001368 <MX_ADC1_Init+0x98>)
 8001330:	f000 fe7c 	bl	800202c <HAL_ADC_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800133a:	f000 fad9 	bl	80018f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800133e:	2307      	movs	r3, #7
 8001340:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001342:	2301      	movs	r3, #1
 8001344:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134a:	463b      	mov	r3, r7
 800134c:	4619      	mov	r1, r3
 800134e:	4806      	ldr	r0, [pc, #24]	; (8001368 <MX_ADC1_Init+0x98>)
 8001350:	f001 f8a0 	bl	8002494 <HAL_ADC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800135a:	f000 fac9 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200001f4 	.word	0x200001f4
 800136c:	40012000 	.word	0x40012000
 8001370:	0f000001 	.word	0x0f000001

08001374 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_I2C1_Init+0x50>)
 800137a:	4a13      	ldr	r2, [pc, #76]	; (80013c8 <MX_I2C1_Init+0x54>)
 800137c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_I2C1_Init+0x50>)
 8001380:	4a12      	ldr	r2, [pc, #72]	; (80013cc <MX_I2C1_Init+0x58>)
 8001382:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_I2C1_Init+0x50>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_I2C1_Init+0x50>)
 800138c:	2200      	movs	r2, #0
 800138e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_I2C1_Init+0x50>)
 8001392:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001396:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <MX_I2C1_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_I2C1_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <MX_I2C1_Init+0x50>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_I2C1_Init+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <MX_I2C1_Init+0x50>)
 80013b2:	f001 fdd9 	bl	8002f68 <HAL_I2C_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013bc:	f000 fa98 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	2000023c 	.word	0x2000023c
 80013c8:	40005400 	.word	0x40005400
 80013cc:	000186a0 	.word	0x000186a0

080013d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b096      	sub	sp, #88	; 0x58
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
 80013fe:	615a      	str	r2, [r3, #20]
 8001400:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2220      	movs	r2, #32
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f006 fe12 	bl	8008032 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800140e:	4b3e      	ldr	r3, [pc, #248]	; (8001508 <MX_TIM1_Init+0x138>)
 8001410:	4a3e      	ldr	r2, [pc, #248]	; (800150c <MX_TIM1_Init+0x13c>)
 8001412:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001414:	4b3c      	ldr	r3, [pc, #240]	; (8001508 <MX_TIM1_Init+0x138>)
 8001416:	2200      	movs	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <MX_TIM1_Init+0x138>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 35999;
 8001420:	4b39      	ldr	r3, [pc, #228]	; (8001508 <MX_TIM1_Init+0x138>)
 8001422:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001426:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001428:	4b37      	ldr	r3, [pc, #220]	; (8001508 <MX_TIM1_Init+0x138>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800142e:	4b36      	ldr	r3, [pc, #216]	; (8001508 <MX_TIM1_Init+0x138>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b34      	ldr	r3, [pc, #208]	; (8001508 <MX_TIM1_Init+0x138>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800143a:	4833      	ldr	r0, [pc, #204]	; (8001508 <MX_TIM1_Init+0x138>)
 800143c:	f003 fa26 	bl	800488c <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001446:	f000 fa53 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001450:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001454:	4619      	mov	r1, r3
 8001456:	482c      	ldr	r0, [pc, #176]	; (8001508 <MX_TIM1_Init+0x138>)
 8001458:	f003 ff28 	bl	80052ac <HAL_TIM_ConfigClockSource>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001462:	f000 fa45 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001466:	4828      	ldr	r0, [pc, #160]	; (8001508 <MX_TIM1_Init+0x138>)
 8001468:	f003 fa5f 	bl	800492a <HAL_TIM_PWM_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001472:	f000 fa3d 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800147e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001482:	4619      	mov	r1, r3
 8001484:	4820      	ldr	r0, [pc, #128]	; (8001508 <MX_TIM1_Init+0x138>)
 8001486:	f004 fd0f 	bl	8005ea8 <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001490:	f000 fa2e 	bl	80018f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001494:	2360      	movs	r3, #96	; 0x60
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014a0:	2300      	movs	r3, #0
 80014a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014ac:	2300      	movs	r3, #0
 80014ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b4:	2200      	movs	r2, #0
 80014b6:	4619      	mov	r1, r3
 80014b8:	4813      	ldr	r0, [pc, #76]	; (8001508 <MX_TIM1_Init+0x138>)
 80014ba:	f003 fe35 	bl	8005128 <HAL_TIM_PWM_ConfigChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80014c4:	f000 fa14 	bl	80018f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	4619      	mov	r1, r3
 80014ea:	4807      	ldr	r0, [pc, #28]	; (8001508 <MX_TIM1_Init+0x138>)
 80014ec:	f004 fd4a 	bl	8005f84 <HAL_TIMEx_ConfigBreakDeadTime>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80014f6:	f000 f9fb 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014fa:	4803      	ldr	r0, [pc, #12]	; (8001508 <MX_TIM1_Init+0x138>)
 80014fc:	f000 fb2c 	bl	8001b58 <HAL_TIM_MspPostInit>

}
 8001500:	bf00      	nop
 8001502:	3758      	adds	r7, #88	; 0x58
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000290 	.word	0x20000290
 800150c:	40010000 	.word	0x40010000

08001510 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08c      	sub	sp, #48	; 0x30
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001526:	f107 030c 	add.w	r3, r7, #12
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800153c:	4b33      	ldr	r3, [pc, #204]	; (800160c <MX_TIM3_Init+0xfc>)
 800153e:	4a34      	ldr	r2, [pc, #208]	; (8001610 <MX_TIM3_Init+0x100>)
 8001540:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001542:	4b32      	ldr	r3, [pc, #200]	; (800160c <MX_TIM3_Init+0xfc>)
 8001544:	2200      	movs	r2, #0
 8001546:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b30      	ldr	r3, [pc, #192]	; (800160c <MX_TIM3_Init+0xfc>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800154e:	4b2f      	ldr	r3, [pc, #188]	; (800160c <MX_TIM3_Init+0xfc>)
 8001550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001554:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001556:	4b2d      	ldr	r3, [pc, #180]	; (800160c <MX_TIM3_Init+0xfc>)
 8001558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800155c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155e:	4b2b      	ldr	r3, [pc, #172]	; (800160c <MX_TIM3_Init+0xfc>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001564:	4829      	ldr	r0, [pc, #164]	; (800160c <MX_TIM3_Init+0xfc>)
 8001566:	f003 fae9 	bl	8004b3c <HAL_TIM_IC_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001570:	f000 f9be 	bl	80018f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001574:	2304      	movs	r3, #4
 8001576:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001578:	2350      	movs	r3, #80	; 0x50
 800157a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001580:	2300      	movs	r3, #0
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	481f      	ldr	r0, [pc, #124]	; (800160c <MX_TIM3_Init+0xfc>)
 8001590:	f003 ff53 	bl	800543a <HAL_TIM_SlaveConfigSynchro>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800159a:	f000 f9a9 	bl	80018f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015a2:	2301      	movs	r3, #1
 80015a4:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015ae:	f107 030c 	add.w	r3, r7, #12
 80015b2:	2200      	movs	r2, #0
 80015b4:	4619      	mov	r1, r3
 80015b6:	4815      	ldr	r0, [pc, #84]	; (800160c <MX_TIM3_Init+0xfc>)
 80015b8:	f003 fd1a 	bl	8004ff0 <HAL_TIM_IC_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80015c2:	f000 f995 	bl	80018f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80015c6:	2302      	movs	r3, #2
 80015c8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80015ca:	2302      	movs	r3, #2
 80015cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	2204      	movs	r2, #4
 80015d4:	4619      	mov	r1, r3
 80015d6:	480d      	ldr	r0, [pc, #52]	; (800160c <MX_TIM3_Init+0xfc>)
 80015d8:	f003 fd0a 	bl	8004ff0 <HAL_TIM_IC_ConfigChannel>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80015e2:	f000 f985 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	4619      	mov	r1, r3
 80015f2:	4806      	ldr	r0, [pc, #24]	; (800160c <MX_TIM3_Init+0xfc>)
 80015f4:	f004 fc58 	bl	8005ea8 <HAL_TIMEx_MasterConfigSynchronization>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 80015fe:	f000 f977 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	3730      	adds	r7, #48	; 0x30
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200002d8 	.word	0x200002d8
 8001610:	40000400 	.word	0x40000400

08001614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <MX_USART2_UART_Init+0x50>)
 800161c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 8001620:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 800163a:	220c      	movs	r2, #12
 800163c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_USART2_UART_Init+0x4c>)
 800164c:	f004 fd00 	bl	8006050 <HAL_UART_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001656:	f000 f94b 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000320 	.word	0x20000320
 8001664:	40004400 	.word	0x40004400

08001668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b37      	ldr	r3, [pc, #220]	; (8001760 <MX_GPIO_Init+0xf8>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a36      	ldr	r2, [pc, #216]	; (8001760 <MX_GPIO_Init+0xf8>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b34      	ldr	r3, [pc, #208]	; (8001760 <MX_GPIO_Init+0xf8>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b30      	ldr	r3, [pc, #192]	; (8001760 <MX_GPIO_Init+0xf8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a2f      	ldr	r2, [pc, #188]	; (8001760 <MX_GPIO_Init+0xf8>)
 80016a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <MX_GPIO_Init+0xf8>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	4b29      	ldr	r3, [pc, #164]	; (8001760 <MX_GPIO_Init+0xf8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a28      	ldr	r2, [pc, #160]	; (8001760 <MX_GPIO_Init+0xf8>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b26      	ldr	r3, [pc, #152]	; (8001760 <MX_GPIO_Init+0xf8>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	4b22      	ldr	r3, [pc, #136]	; (8001760 <MX_GPIO_Init+0xf8>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a21      	ldr	r2, [pc, #132]	; (8001760 <MX_GPIO_Init+0xf8>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <MX_GPIO_Init+0xf8>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2120      	movs	r1, #32
 80016f2:	481c      	ldr	r0, [pc, #112]	; (8001764 <MX_GPIO_Init+0xfc>)
 80016f4:	f001 fc1e 	bl	8002f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2110      	movs	r1, #16
 80016fc:	481a      	ldr	r0, [pc, #104]	; (8001768 <MX_GPIO_Init+0x100>)
 80016fe:	f001 fc19 	bl	8002f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001708:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	4814      	ldr	r0, [pc, #80]	; (800176c <MX_GPIO_Init+0x104>)
 800171a:	f001 fa87 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800171e:	2320      	movs	r3, #32
 8001720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001722:	2301      	movs	r3, #1
 8001724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4619      	mov	r1, r3
 8001734:	480b      	ldr	r0, [pc, #44]	; (8001764 <MX_GPIO_Init+0xfc>)
 8001736:	f001 fa79 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800173a:	2310      	movs	r3, #16
 800173c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173e:	2301      	movs	r3, #1
 8001740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	4805      	ldr	r0, [pc, #20]	; (8001768 <MX_GPIO_Init+0x100>)
 8001752:	f001 fa6b 	bl	8002c2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001756:	bf00      	nop
 8001758:	3728      	adds	r7, #40	; 0x28
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800
 8001764:	40020000 	.word	0x40020000
 8001768:	40020400 	.word	0x40020400
 800176c:	40020800 	.word	0x40020800

08001770 <AHT20_Init>:

/* USER CODE BEGIN 4 */
void AHT20_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af02      	add	r7, sp, #8
	HAL_Delay(40);
 8001776:	2028      	movs	r0, #40	; 0x28
 8001778:	f000 fc34 	bl	8001fe4 <HAL_Delay>
	// Get a 1-byte status information
	HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDRESS, &buffer, 1, HAL_MAX_DELAY);
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2301      	movs	r3, #1
 8001784:	4a1a      	ldr	r2, [pc, #104]	; (80017f0 <AHT20_Init+0x80>)
 8001786:	2170      	movs	r1, #112	; 0x70
 8001788:	481a      	ldr	r0, [pc, #104]	; (80017f4 <AHT20_Init+0x84>)
 800178a:	f001 fe2f 	bl	80033ec <HAL_I2C_Master_Receive>
	// Check whether the calibration enable bit (4th bit of the status word) is 1, if not send init command
	if ((buffer & 0x08) == 0x00)
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <AHT20_Init+0x80>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d113      	bne.n	80017c2 <AHT20_Init+0x52>
	{
		uint8_t sendBuffer[3] = {AHT20_INIT_COMMAND, 0x08, 0x00};
 800179a:	4a17      	ldr	r2, [pc, #92]	; (80017f8 <AHT20_Init+0x88>)
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	4611      	mov	r1, r2
 80017a2:	8019      	strh	r1, [r3, #0]
 80017a4:	3302      	adds	r3, #2
 80017a6:	0c12      	lsrs	r2, r2, #16
 80017a8:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDRESS, sendBuffer, 3, HAL_MAX_DELAY);
 80017aa:	1d3a      	adds	r2, r7, #4
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2303      	movs	r3, #3
 80017b4:	2170      	movs	r1, #112	; 0x70
 80017b6:	480f      	ldr	r0, [pc, #60]	; (80017f4 <AHT20_Init+0x84>)
 80017b8:	f001 fd1a 	bl	80031f0 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 80017bc:	200a      	movs	r0, #10
 80017be:	f000 fc11 	bl	8001fe4 <HAL_Delay>
	}

	sprintf((char*)msg, "Init done\r\n");
 80017c2:	490e      	ldr	r1, [pc, #56]	; (80017fc <AHT20_Init+0x8c>)
 80017c4:	480e      	ldr	r0, [pc, #56]	; (8001800 <AHT20_Init+0x90>)
 80017c6:	f006 fbd1 	bl	8007f6c <siprintf>
	HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 500);
 80017ca:	480d      	ldr	r0, [pc, #52]	; (8001800 <AHT20_Init+0x90>)
 80017cc:	f7fe fd68 	bl	80002a0 <strlen>
 80017d0:	4603      	mov	r3, r0
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017d8:	4909      	ldr	r1, [pc, #36]	; (8001800 <AHT20_Init+0x90>)
 80017da:	480a      	ldr	r0, [pc, #40]	; (8001804 <AHT20_Init+0x94>)
 80017dc:	f004 fc88 	bl	80060f0 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80017e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017e4:	f000 fbfe 	bl	8001fe4 <HAL_Delay>
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200003e1 	.word	0x200003e1
 80017f4:	2000023c 	.word	0x2000023c
 80017f8:	0800b8e8 	.word	0x0800b8e8
 80017fc:	0800b8dc 	.word	0x0800b8dc
 8001800:	20000368 	.word	0x20000368
 8001804:	20000320 	.word	0x20000320

08001808 <AHT20_Read>:

void AHT20_Read(float *Temperature, float *Humidity)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af02      	add	r7, sp, #8
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
	uint8_t sendBuffer[3] = {AHT20_MEASURE_COMMAND, 0x33, 0x00};
 8001812:	4a31      	ldr	r2, [pc, #196]	; (80018d8 <AHT20_Read+0xd0>)
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	4611      	mov	r1, r2
 800181c:	8019      	strh	r1, [r3, #0]
 800181e:	3302      	adds	r3, #2
 8001820:	0c12      	lsrs	r2, r2, #16
 8001822:	701a      	strb	r2, [r3, #0]
	uint8_t readBuffer[6];

	// Send measure command
	HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDRESS, sendBuffer, 3, HAL_MAX_DELAY);
 8001824:	f107 0210 	add.w	r2, r7, #16
 8001828:	f04f 33ff 	mov.w	r3, #4294967295
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	2303      	movs	r3, #3
 8001830:	2170      	movs	r1, #112	; 0x70
 8001832:	482a      	ldr	r0, [pc, #168]	; (80018dc <AHT20_Read+0xd4>)
 8001834:	f001 fcdc 	bl	80031f0 <HAL_I2C_Master_Transmit>
	HAL_Delay(75);
 8001838:	204b      	movs	r0, #75	; 0x4b
 800183a:	f000 fbd3 	bl	8001fe4 <HAL_Delay>
	// Read the 6-byte status containing temperature and humidity data
	HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDRESS, readBuffer, 6, HAL_MAX_DELAY);
 800183e:	f107 0208 	add.w	r2, r7, #8
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2306      	movs	r3, #6
 800184a:	2170      	movs	r1, #112	; 0x70
 800184c:	4823      	ldr	r0, [pc, #140]	; (80018dc <AHT20_Read+0xd4>)
 800184e:	f001 fdcd 	bl	80033ec <HAL_I2C_Master_Receive>
	// Check whether the busy indication bit (8th bit of the 1st byte) is 0
	// If it is, it means measurement is completed and then 6 bytes can be read in a row
	if ((readBuffer[0] & 0x80) == 0x00)
 8001852:	7a3b      	ldrb	r3, [r7, #8]
 8001854:	b25b      	sxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	db3a      	blt.n	80018d0 <AHT20_Read+0xc8>
	{
		// Calculate temperature and humidity values
		uint32_t data = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
		// 4 high bits of the 4th byte represent humidity data, align then add those 3 bytes to form the completed humidity data
		data = ((uint32_t)readBuffer[3] >> 4) + ((uint32_t)readBuffer[2] << 4) + ((uint32_t)readBuffer[1] << 12);
 800185e:	7afb      	ldrb	r3, [r7, #11]
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	b2db      	uxtb	r3, r3
 8001864:	461a      	mov	r2, r3
 8001866:	7abb      	ldrb	r3, [r7, #10]
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	441a      	add	r2, r3
 800186c:	7a7b      	ldrb	r3, [r7, #9]
 800186e:	031b      	lsls	r3, r3, #12
 8001870:	4413      	add	r3, r2
 8001872:	617b      	str	r3, [r7, #20]
		*Humidity = data * 100.0f / (1 << 20);
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800187e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80018e0 <AHT20_Read+0xd8>
 8001882:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001886:	eddf 6a17 	vldr	s13, [pc, #92]	; 80018e4 <AHT20_Read+0xdc>
 800188a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	edc3 7a00 	vstr	s15, [r3]

		// Remove 4 high bits of the 4th byte, the remaining is the temperature data
		// Align the rest then add those 3 bytes to form the completed temperature data
		data = (((uint32_t)readBuffer[3] & 0x0F) << 16) + ((uint32_t)readBuffer[4] << 8) + (uint32_t)readBuffer[5];
 8001894:	7afb      	ldrb	r3, [r7, #11]
 8001896:	041b      	lsls	r3, r3, #16
 8001898:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800189c:	7b3b      	ldrb	r3, [r7, #12]
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	4413      	add	r3, r2
 80018a2:	7b7a      	ldrb	r2, [r7, #13]
 80018a4:	4413      	add	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]
		*Temperature = data * 200.0f / (1 << 20) - 50;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	ee07 3a90 	vmov	s15, r3
 80018ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018b2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80018e8 <AHT20_Read+0xe0>
 80018b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018ba:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80018e4 <AHT20_Read+0xdc>
 80018be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80018ec <AHT20_Read+0xe4>
 80018c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80018d0:	bf00      	nop
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	0800b8ec 	.word	0x0800b8ec
 80018dc:	2000023c 	.word	0x2000023c
 80018e0:	42c80000 	.word	0x42c80000
 80018e4:	49800000 	.word	0x49800000
 80018e8:	43480000 	.word	0x43480000
 80018ec:	42480000 	.word	0x42480000

080018f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f4:	b672      	cpsid	i
}
 80018f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <Error_Handler+0x8>
	...

080018fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <HAL_MspInit+0x4c>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	4a0f      	ldr	r2, [pc, #60]	; (8001948 <HAL_MspInit+0x4c>)
 800190c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001910:	6453      	str	r3, [r2, #68]	; 0x44
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <HAL_MspInit+0x4c>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_MspInit+0x4c>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a08      	ldr	r2, [pc, #32]	; (8001948 <HAL_MspInit+0x4c>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_MspInit+0x4c>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800193a:	2007      	movs	r0, #7
 800193c:	f001 f8a2 	bl	8002a84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800

0800194c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a1b      	ldr	r2, [pc, #108]	; (80019d8 <HAL_ADC_MspInit+0x8c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d12f      	bne.n	80019ce <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <HAL_ADC_MspInit+0x90>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	4a19      	ldr	r2, [pc, #100]	; (80019dc <HAL_ADC_MspInit+0x90>)
 8001978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197c:	6453      	str	r3, [r2, #68]	; 0x44
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_ADC_MspInit+0x90>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b13      	ldr	r3, [pc, #76]	; (80019dc <HAL_ADC_MspInit+0x90>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a12      	ldr	r2, [pc, #72]	; (80019dc <HAL_ADC_MspInit+0x90>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <HAL_ADC_MspInit+0x90>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019aa:	2303      	movs	r3, #3
 80019ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	4809      	ldr	r0, [pc, #36]	; (80019e0 <HAL_ADC_MspInit+0x94>)
 80019ba:	f001 f937 	bl	8002c2c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	2012      	movs	r0, #18
 80019c4:	f001 f869 	bl	8002a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80019c8:	2012      	movs	r0, #18
 80019ca:	f001 f882 	bl	8002ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40012000 	.word	0x40012000
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020000 	.word	0x40020000

080019e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a19      	ldr	r2, [pc, #100]	; (8001a68 <HAL_I2C_MspInit+0x84>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d12c      	bne.n	8001a60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a17      	ldr	r2, [pc, #92]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a28:	2312      	movs	r3, #18
 8001a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a30:	2303      	movs	r3, #3
 8001a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a34:	2304      	movs	r3, #4
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	480c      	ldr	r0, [pc, #48]	; (8001a70 <HAL_I2C_MspInit+0x8c>)
 8001a40:	f001 f8f4 	bl	8002c2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a52:	6413      	str	r3, [r2, #64]	; 0x40
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	; 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40005400 	.word	0x40005400
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020400 	.word	0x40020400

08001a74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <HAL_TIM_Base_MspInit+0x3c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d10d      	bne.n	8001aa2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_TIM_Base_MspInit+0x40>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	4a09      	ldr	r2, [pc, #36]	; (8001ab4 <HAL_TIM_Base_MspInit+0x40>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6453      	str	r3, [r2, #68]	; 0x44
 8001a96:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <HAL_TIM_Base_MspInit+0x40>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001aa2:	bf00      	nop
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40010000 	.word	0x40010000
 8001ab4:	40023800 	.word	0x40023800

08001ab8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <HAL_TIM_IC_MspInit+0x94>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d133      	bne.n	8001b42 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <HAL_TIM_IC_MspInit+0x98>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	4a1b      	ldr	r2, [pc, #108]	; (8001b50 <HAL_TIM_IC_MspInit+0x98>)
 8001ae4:	f043 0302 	orr.w	r3, r3, #2
 8001ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aea:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_TIM_IC_MspInit+0x98>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <HAL_TIM_IC_MspInit+0x98>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <HAL_TIM_IC_MspInit+0x98>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_TIM_IC_MspInit+0x98>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b12:	2340      	movs	r3, #64	; 0x40
 8001b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b22:	2302      	movs	r3, #2
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4809      	ldr	r0, [pc, #36]	; (8001b54 <HAL_TIM_IC_MspInit+0x9c>)
 8001b2e:	f001 f87d 	bl	8002c2c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	201d      	movs	r0, #29
 8001b38:	f000 ffaf 	bl	8002a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b3c:	201d      	movs	r0, #29
 8001b3e:	f000 ffc8 	bl	8002ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b42:	bf00      	nop
 8001b44:	3728      	adds	r7, #40	; 0x28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40000400 	.word	0x40000400
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020000 	.word	0x40020000

08001b58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <HAL_TIM_MspPostInit+0x68>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d11e      	bne.n	8001bb8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <HAL_TIM_MspPostInit+0x6c>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a10      	ldr	r2, [pc, #64]	; (8001bc4 <HAL_TIM_MspPostInit+0x6c>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <HAL_TIM_MspPostInit+0x6c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <HAL_TIM_MspPostInit+0x70>)
 8001bb4:	f001 f83a 	bl	8002c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bb8:	bf00      	nop
 8001bba:	3720      	adds	r7, #32
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40010000 	.word	0x40010000
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40020000 	.word	0x40020000

08001bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1d      	ldr	r2, [pc, #116]	; (8001c60 <HAL_UART_MspInit+0x94>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d133      	bne.n	8001c56 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <HAL_UART_MspInit+0x98>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	4a1b      	ldr	r2, [pc, #108]	; (8001c64 <HAL_UART_MspInit+0x98>)
 8001bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_UART_MspInit+0x98>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <HAL_UART_MspInit+0x98>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <HAL_UART_MspInit+0x98>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_UART_MspInit+0x98>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c26:	230c      	movs	r3, #12
 8001c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c36:	2307      	movs	r3, #7
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4809      	ldr	r0, [pc, #36]	; (8001c68 <HAL_UART_MspInit+0x9c>)
 8001c42:	f000 fff3 	bl	8002c2c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2100      	movs	r1, #0
 8001c4a:	2026      	movs	r0, #38	; 0x26
 8001c4c:	f000 ff25 	bl	8002a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c50:	2026      	movs	r0, #38	; 0x26
 8001c52:	f000 ff3e 	bl	8002ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c56:	bf00      	nop
 8001c58:	3728      	adds	r7, #40	; 0x28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40004400 	.word	0x40004400
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020000 	.word	0x40020000

08001c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c70:	e7fe      	b.n	8001c70 <NMI_Handler+0x4>

08001c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c76:	e7fe      	b.n	8001c76 <HardFault_Handler+0x4>

08001c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <MemManage_Handler+0x4>

08001c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c82:	e7fe      	b.n	8001c82 <BusFault_Handler+0x4>

08001c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <UsageFault_Handler+0x4>

08001c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb8:	f000 f974 	bl	8001fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <ADC_IRQHandler+0x10>)
 8001cc6:	f000 fab3 	bl	8002230 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200001f4 	.word	0x200001f4

08001cd4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <TIM3_IRQHandler+0x10>)
 8001cda:	f003 f899 	bl	8004e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200002d8 	.word	0x200002d8

08001ce8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <USART2_IRQHandler+0x10>)
 8001cee:	f004 faaf 	bl	8006250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000320 	.word	0x20000320

08001cfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return 1;
 8001d00:	2301      	movs	r3, #1
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <_kill>:

int _kill(int pid, int sig)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d16:	f006 f9df 	bl	80080d8 <__errno>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2216      	movs	r2, #22
 8001d1e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <_exit>:

void _exit (int status)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ffe7 	bl	8001d0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d3e:	e7fe      	b.n	8001d3e <_exit+0x12>

08001d40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	e00a      	b.n	8001d68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d52:	f3af 8000 	nop.w
 8001d56:	4601      	mov	r1, r0
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	60ba      	str	r2, [r7, #8]
 8001d5e:	b2ca      	uxtb	r2, r1
 8001d60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	3301      	adds	r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	dbf0      	blt.n	8001d52 <_read+0x12>
  }

  return len;
 8001d70:	687b      	ldr	r3, [r7, #4]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e009      	b.n	8001da0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	60ba      	str	r2, [r7, #8]
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	dbf1      	blt.n	8001d8c <_write+0x12>
  }
  return len;
 8001da8:	687b      	ldr	r3, [r7, #4]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <_close>:

int _close(int file)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dda:	605a      	str	r2, [r3, #4]
  return 0;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <_isatty>:

int _isatty(int file)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001df2:	2301      	movs	r3, #1
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e24:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <_sbrk+0x5c>)
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <_sbrk+0x60>)
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <_sbrk+0x64>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d102      	bne.n	8001e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <_sbrk+0x64>)
 8001e3a:	4a12      	ldr	r2, [pc, #72]	; (8001e84 <_sbrk+0x68>)
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <_sbrk+0x64>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d207      	bcs.n	8001e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e4c:	f006 f944 	bl	80080d8 <__errno>
 8001e50:	4603      	mov	r3, r0
 8001e52:	220c      	movs	r2, #12
 8001e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5a:	e009      	b.n	8001e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <_sbrk+0x64>)
 8001e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20018000 	.word	0x20018000
 8001e7c:	00000400 	.word	0x00000400
 8001e80:	200003f4 	.word	0x200003f4
 8001e84:	20000548 	.word	0x20000548

08001e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <SystemInit+0x20>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e92:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <SystemInit+0x20>)
 8001e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001eb0:	f7ff ffea 	bl	8001e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eb4:	480c      	ldr	r0, [pc, #48]	; (8001ee8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eb6:	490d      	ldr	r1, [pc, #52]	; (8001eec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001eb8:	4a0d      	ldr	r2, [pc, #52]	; (8001ef0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ebc:	e002      	b.n	8001ec4 <LoopCopyDataInit>

08001ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ec2:	3304      	adds	r3, #4

08001ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec8:	d3f9      	bcc.n	8001ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eca:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ecc:	4c0a      	ldr	r4, [pc, #40]	; (8001ef8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed0:	e001      	b.n	8001ed6 <LoopFillZerobss>

08001ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed4:	3204      	adds	r2, #4

08001ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed8:	d3fb      	bcc.n	8001ed2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001eda:	f006 f903 	bl	80080e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ede:	f7ff f913 	bl	8001108 <main>
  bx  lr    
 8001ee2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ee4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eec:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ef0:	0800bd40 	.word	0x0800bd40
  ldr r2, =_sbss
 8001ef4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001ef8:	20000548 	.word	0x20000548

08001efc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001efc:	e7fe      	b.n	8001efc <DMA1_Stream0_IRQHandler>
	...

08001f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <HAL_Init+0x40>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0d      	ldr	r2, [pc, #52]	; (8001f40 <HAL_Init+0x40>)
 8001f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_Init+0x40>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <HAL_Init+0x40>)
 8001f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <HAL_Init+0x40>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <HAL_Init+0x40>)
 8001f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f28:	2003      	movs	r0, #3
 8001f2a:	f000 fdab 	bl	8002a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f000 f808 	bl	8001f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f34:	f7ff fce2 	bl	80018fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023c00 	.word	0x40023c00

08001f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_InitTick+0x54>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_InitTick+0x58>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4619      	mov	r1, r3
 8001f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 fdc3 	bl	8002aee <HAL_SYSTICK_Config>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e00e      	b.n	8001f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b0f      	cmp	r3, #15
 8001f76:	d80a      	bhi.n	8001f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f80:	f000 fd8b 	bl	8002a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f84:	4a06      	ldr	r2, [pc, #24]	; (8001fa0 <HAL_InitTick+0x5c>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e000      	b.n	8001f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	20000008 	.word	0x20000008
 8001fa0:	20000004 	.word	0x20000004

08001fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x20>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb6:	6013      	str	r3, [r2, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000008 	.word	0x20000008
 8001fc8:	200003f8 	.word	0x200003f8

08001fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_GetTick+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	200003f8 	.word	0x200003f8

08001fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fec:	f7ff ffee 	bl	8001fcc <HAL_GetTick>
 8001ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d005      	beq.n	800200a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <HAL_Delay+0x44>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800200a:	bf00      	nop
 800200c:	f7ff ffde 	bl	8001fcc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	429a      	cmp	r2, r3
 800201a:	d8f7      	bhi.n	800200c <HAL_Delay+0x28>
  {
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000008 	.word	0x20000008

0800202c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e033      	b.n	80020aa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff fc7e 	bl	800194c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b00      	cmp	r3, #0
 8002068:	d118      	bne.n	800209c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002072:	f023 0302 	bic.w	r3, r3, #2
 8002076:	f043 0202 	orr.w	r2, r3, #2
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fb2a 	bl	80026d8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f023 0303 	bic.w	r3, r3, #3
 8002092:	f043 0201 	orr.w	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
 800209a:	e001      	b.n	80020a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_Start_IT+0x1a>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e0a1      	b.n	8002212 <HAL_ADC_Start_IT+0x15e>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d018      	beq.n	8002116 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020f4:	4b4a      	ldr	r3, [pc, #296]	; (8002220 <HAL_ADC_Start_IT+0x16c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a4a      	ldr	r2, [pc, #296]	; (8002224 <HAL_ADC_Start_IT+0x170>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	0c9a      	lsrs	r2, r3, #18
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002108:	e002      	b.n	8002110 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	3b01      	subs	r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f9      	bne.n	800210a <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b01      	cmp	r3, #1
 8002122:	d169      	bne.n	80021f8 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800212c:	f023 0301 	bic.w	r3, r3, #1
 8002130:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002142:	2b00      	cmp	r3, #0
 8002144:	d007      	beq.n	8002156 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800214e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800215e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002162:	d106      	bne.n	8002172 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002168:	f023 0206 	bic.w	r2, r3, #6
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	645a      	str	r2, [r3, #68]	; 0x44
 8002170:	e002      	b.n	8002178 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002180:	4b29      	ldr	r3, [pc, #164]	; (8002228 <HAL_ADC_Start_IT+0x174>)
 8002182:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800218c:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800219c:	f043 0320 	orr.w	r3, r3, #32
 80021a0:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10f      	bne.n	80021ce <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d129      	bne.n	8002210 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	e020      	b.n	8002210 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a16      	ldr	r2, [pc, #88]	; (800222c <HAL_ADC_Start_IT+0x178>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d11b      	bne.n	8002210 <HAL_ADC_Start_IT+0x15c>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d114      	bne.n	8002210 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	e00b      	b.n	8002210 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	f043 0210 	orr.w	r2, r3, #16
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002208:	f043 0201 	orr.w	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000000 	.word	0x20000000
 8002224:	431bde83 	.word	0x431bde83
 8002228:	40012300 	.word	0x40012300
 800222c:	40012000 	.word	0x40012000

08002230 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	2300      	movs	r3, #0
 800223e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d049      	beq.n	80022fa <HAL_ADC_IRQHandler+0xca>
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d046      	beq.n	80022fa <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	2b00      	cmp	r3, #0
 8002276:	d105      	bne.n	8002284 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d12b      	bne.n	80022ea <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002296:	2b00      	cmp	r3, #0
 8002298:	d127      	bne.n	80022ea <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d006      	beq.n	80022b6 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d119      	bne.n	80022ea <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0220 	bic.w	r2, r2, #32
 80022c4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d105      	bne.n	80022ea <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f043 0201 	orr.w	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fe98 	bl	8001020 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0212 	mvn.w	r2, #18
 80022f8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002308:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d057      	beq.n	80023c0 <HAL_ADC_IRQHandler+0x190>
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d054      	beq.n	80023c0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	d105      	bne.n	800232e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d139      	bne.n	80023b0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002342:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002346:	2b00      	cmp	r3, #0
 8002348:	d006      	beq.n	8002358 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002354:	2b00      	cmp	r3, #0
 8002356:	d12b      	bne.n	80023b0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002362:	2b00      	cmp	r3, #0
 8002364:	d124      	bne.n	80023b0 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002370:	2b00      	cmp	r3, #0
 8002372:	d11d      	bne.n	80023b0 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002378:	2b00      	cmp	r3, #0
 800237a:	d119      	bne.n	80023b0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800238a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d105      	bne.n	80023b0 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f043 0201 	orr.w	r2, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 fa8d 	bl	80028d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f06f 020c 	mvn.w	r2, #12
 80023be:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ce:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d017      	beq.n	8002406 <HAL_ADC_IRQHandler+0x1d6>
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d014      	beq.n	8002406 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d10d      	bne.n	8002406 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f837 	bl	800246a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0201 	mvn.w	r2, #1
 8002404:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002414:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d015      	beq.n	8002448 <HAL_ADC_IRQHandler+0x218>
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d012      	beq.n	8002448 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002426:	f043 0202 	orr.w	r2, r3, #2
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f06f 0220 	mvn.w	r2, #32
 8002436:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f820 	bl	800247e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f06f 0220 	mvn.w	r2, #32
 8002446:	601a      	str	r2, [r3, #0]
  }
}
 8002448:	bf00      	nop
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x1c>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e105      	b.n	80026bc <HAL_ADC_ConfigChannel+0x228>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b09      	cmp	r3, #9
 80024be:	d925      	bls.n	800250c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68d9      	ldr	r1, [r3, #12]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	4613      	mov	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4413      	add	r3, r2
 80024d4:	3b1e      	subs	r3, #30
 80024d6:	2207      	movs	r2, #7
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43da      	mvns	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	400a      	ands	r2, r1
 80024e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68d9      	ldr	r1, [r3, #12]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	4603      	mov	r3, r0
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4403      	add	r3, r0
 80024fe:	3b1e      	subs	r3, #30
 8002500:	409a      	lsls	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	e022      	b.n	8002552 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6919      	ldr	r1, [r3, #16]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	2207      	movs	r2, #7
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43da      	mvns	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	400a      	ands	r2, r1
 800252e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6919      	ldr	r1, [r3, #16]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	4618      	mov	r0, r3
 8002542:	4603      	mov	r3, r0
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	4403      	add	r3, r0
 8002548:	409a      	lsls	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b06      	cmp	r3, #6
 8002558:	d824      	bhi.n	80025a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	3b05      	subs	r3, #5
 800256c:	221f      	movs	r2, #31
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	400a      	ands	r2, r1
 800257a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	b29b      	uxth	r3, r3
 8002588:	4618      	mov	r0, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	3b05      	subs	r3, #5
 8002596:	fa00 f203 	lsl.w	r2, r0, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	635a      	str	r2, [r3, #52]	; 0x34
 80025a2:	e04c      	b.n	800263e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b0c      	cmp	r3, #12
 80025aa:	d824      	bhi.n	80025f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	3b23      	subs	r3, #35	; 0x23
 80025be:	221f      	movs	r2, #31
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43da      	mvns	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	400a      	ands	r2, r1
 80025cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	4618      	mov	r0, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	3b23      	subs	r3, #35	; 0x23
 80025e8:	fa00 f203 	lsl.w	r2, r0, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
 80025f4:	e023      	b.n	800263e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	3b41      	subs	r3, #65	; 0x41
 8002608:	221f      	movs	r2, #31
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43da      	mvns	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	400a      	ands	r2, r1
 8002616:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	b29b      	uxth	r3, r3
 8002624:	4618      	mov	r0, r3
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	3b41      	subs	r3, #65	; 0x41
 8002632:	fa00 f203 	lsl.w	r2, r0, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800263e:	4b22      	ldr	r3, [pc, #136]	; (80026c8 <HAL_ADC_ConfigChannel+0x234>)
 8002640:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a21      	ldr	r2, [pc, #132]	; (80026cc <HAL_ADC_ConfigChannel+0x238>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d109      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x1cc>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b12      	cmp	r3, #18
 8002652:	d105      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a19      	ldr	r2, [pc, #100]	; (80026cc <HAL_ADC_ConfigChannel+0x238>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d123      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x21e>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b10      	cmp	r3, #16
 8002670:	d003      	beq.n	800267a <HAL_ADC_ConfigChannel+0x1e6>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b11      	cmp	r3, #17
 8002678:	d11b      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b10      	cmp	r3, #16
 800268c:	d111      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <HAL_ADC_ConfigChannel+0x23c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a10      	ldr	r2, [pc, #64]	; (80026d4 <HAL_ADC_ConfigChannel+0x240>)
 8002694:	fba2 2303 	umull	r2, r3, r2, r3
 8002698:	0c9a      	lsrs	r2, r3, #18
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026a4:	e002      	b.n	80026ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	3b01      	subs	r3, #1
 80026aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f9      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	40012300 	.word	0x40012300
 80026cc:	40012000 	.word	0x40012000
 80026d0:	20000000 	.word	0x20000000
 80026d4:	431bde83 	.word	0x431bde83

080026d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026e0:	4b79      	ldr	r3, [pc, #484]	; (80028c8 <ADC_Init+0x1f0>)
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800270c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6859      	ldr	r1, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	021a      	lsls	r2, r3, #8
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002730:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002752:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6899      	ldr	r1, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	4a58      	ldr	r2, [pc, #352]	; (80028cc <ADC_Init+0x1f4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d022      	beq.n	80027b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800277e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6899      	ldr	r1, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6899      	ldr	r1, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	e00f      	b.n	80027d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0202 	bic.w	r2, r2, #2
 80027e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6899      	ldr	r1, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	7e1b      	ldrb	r3, [r3, #24]
 80027f0:	005a      	lsls	r2, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d01b      	beq.n	800283c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002812:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002822:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6859      	ldr	r1, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	3b01      	subs	r3, #1
 8002830:	035a      	lsls	r2, r3, #13
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	e007      	b.n	800284c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800284a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800285a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	3b01      	subs	r3, #1
 8002868:	051a      	lsls	r2, r3, #20
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002880:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6899      	ldr	r1, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800288e:	025a      	lsls	r2, r3, #9
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6899      	ldr	r1, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	029a      	lsls	r2, r3, #10
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	609a      	str	r2, [r3, #8]
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	40012300 	.word	0x40012300
 80028cc:	0f000001 	.word	0x0f000001

080028d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002900:	4013      	ands	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800290c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002916:	4a04      	ldr	r2, [pc, #16]	; (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	60d3      	str	r3, [r2, #12]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <__NVIC_GetPriorityGrouping+0x18>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	f003 0307 	and.w	r3, r3, #7
}
 800293a:	4618      	mov	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	2b00      	cmp	r3, #0
 8002958:	db0b      	blt.n	8002972 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	f003 021f 	and.w	r2, r3, #31
 8002960:	4907      	ldr	r1, [pc, #28]	; (8002980 <__NVIC_EnableIRQ+0x38>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	2001      	movs	r0, #1
 800296a:	fa00 f202 	lsl.w	r2, r0, r2
 800296e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000e100 	.word	0xe000e100

08002984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	6039      	str	r1, [r7, #0]
 800298e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002994:	2b00      	cmp	r3, #0
 8002996:	db0a      	blt.n	80029ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	490c      	ldr	r1, [pc, #48]	; (80029d0 <__NVIC_SetPriority+0x4c>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	0112      	lsls	r2, r2, #4
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	440b      	add	r3, r1
 80029a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029ac:	e00a      	b.n	80029c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4908      	ldr	r1, [pc, #32]	; (80029d4 <__NVIC_SetPriority+0x50>)
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	3b04      	subs	r3, #4
 80029bc:	0112      	lsls	r2, r2, #4
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	440b      	add	r3, r1
 80029c2:	761a      	strb	r2, [r3, #24]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000e100 	.word	0xe000e100
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d8:	b480      	push	{r7}
 80029da:	b089      	sub	sp, #36	; 0x24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f1c3 0307 	rsb	r3, r3, #7
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	bf28      	it	cs
 80029f6:	2304      	movcs	r3, #4
 80029f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3304      	adds	r3, #4
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d902      	bls.n	8002a08 <NVIC_EncodePriority+0x30>
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3b03      	subs	r3, #3
 8002a06:	e000      	b.n	8002a0a <NVIC_EncodePriority+0x32>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43da      	mvns	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a20:	f04f 31ff 	mov.w	r1, #4294967295
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2a:	43d9      	mvns	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a30:	4313      	orrs	r3, r2
         );
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3724      	adds	r7, #36	; 0x24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a50:	d301      	bcc.n	8002a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a52:	2301      	movs	r3, #1
 8002a54:	e00f      	b.n	8002a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a56:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <SysTick_Config+0x40>)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a5e:	210f      	movs	r1, #15
 8002a60:	f04f 30ff 	mov.w	r0, #4294967295
 8002a64:	f7ff ff8e 	bl	8002984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <SysTick_Config+0x40>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a6e:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <SysTick_Config+0x40>)
 8002a70:	2207      	movs	r2, #7
 8002a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	e000e010 	.word	0xe000e010

08002a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ff29 	bl	80028e4 <__NVIC_SetPriorityGrouping>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b086      	sub	sp, #24
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aac:	f7ff ff3e 	bl	800292c <__NVIC_GetPriorityGrouping>
 8002ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	6978      	ldr	r0, [r7, #20]
 8002ab8:	f7ff ff8e 	bl	80029d8 <NVIC_EncodePriority>
 8002abc:	4602      	mov	r2, r0
 8002abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff5d 	bl	8002984 <__NVIC_SetPriority>
}
 8002aca:	bf00      	nop
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff31 	bl	8002948 <__NVIC_EnableIRQ>
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ffa2 	bl	8002a40 <SysTick_Config>
 8002afc:	4603      	mov	r3, r0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b14:	f7ff fa5a 	bl	8001fcc <HAL_GetTick>
 8002b18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d008      	beq.n	8002b38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e052      	b.n	8002bde <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0216 	bic.w	r2, r2, #22
 8002b46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d103      	bne.n	8002b68 <HAL_DMA_Abort+0x62>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d007      	beq.n	8002b78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0208 	bic.w	r2, r2, #8
 8002b76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0201 	bic.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b88:	e013      	b.n	8002bb2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b8a:	f7ff fa1f 	bl	8001fcc <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b05      	cmp	r3, #5
 8002b96:	d90c      	bls.n	8002bb2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e015      	b.n	8002bde <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1e4      	bne.n	8002b8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc4:	223f      	movs	r2, #63	; 0x3f
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d004      	beq.n	8002c04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2280      	movs	r2, #128	; 0x80
 8002bfe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e00c      	b.n	8002c1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2205      	movs	r2, #5
 8002c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b089      	sub	sp, #36	; 0x24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
 8002c46:	e159      	b.n	8002efc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c48:	2201      	movs	r2, #1
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	f040 8148 	bne.w	8002ef6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d005      	beq.n	8002c7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d130      	bne.n	8002ce0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	2203      	movs	r2, #3
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4013      	ands	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	091b      	lsrs	r3, r3, #4
 8002cca:	f003 0201 	and.w	r2, r3, #1
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d017      	beq.n	8002d1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d123      	bne.n	8002d70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	08da      	lsrs	r2, r3, #3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3208      	adds	r2, #8
 8002d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	220f      	movs	r2, #15
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	691a      	ldr	r2, [r3, #16]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	08da      	lsrs	r2, r3, #3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3208      	adds	r2, #8
 8002d6a:	69b9      	ldr	r1, [r7, #24]
 8002d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4013      	ands	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0203 	and.w	r2, r3, #3
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80a2 	beq.w	8002ef6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	4b57      	ldr	r3, [pc, #348]	; (8002f14 <HAL_GPIO_Init+0x2e8>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	4a56      	ldr	r2, [pc, #344]	; (8002f14 <HAL_GPIO_Init+0x2e8>)
 8002dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc2:	4b54      	ldr	r3, [pc, #336]	; (8002f14 <HAL_GPIO_Init+0x2e8>)
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dce:	4a52      	ldr	r2, [pc, #328]	; (8002f18 <HAL_GPIO_Init+0x2ec>)
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	089b      	lsrs	r3, r3, #2
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	220f      	movs	r2, #15
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a49      	ldr	r2, [pc, #292]	; (8002f1c <HAL_GPIO_Init+0x2f0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d019      	beq.n	8002e2e <HAL_GPIO_Init+0x202>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a48      	ldr	r2, [pc, #288]	; (8002f20 <HAL_GPIO_Init+0x2f4>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d013      	beq.n	8002e2a <HAL_GPIO_Init+0x1fe>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a47      	ldr	r2, [pc, #284]	; (8002f24 <HAL_GPIO_Init+0x2f8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00d      	beq.n	8002e26 <HAL_GPIO_Init+0x1fa>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a46      	ldr	r2, [pc, #280]	; (8002f28 <HAL_GPIO_Init+0x2fc>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d007      	beq.n	8002e22 <HAL_GPIO_Init+0x1f6>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a45      	ldr	r2, [pc, #276]	; (8002f2c <HAL_GPIO_Init+0x300>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d101      	bne.n	8002e1e <HAL_GPIO_Init+0x1f2>
 8002e1a:	2304      	movs	r3, #4
 8002e1c:	e008      	b.n	8002e30 <HAL_GPIO_Init+0x204>
 8002e1e:	2307      	movs	r3, #7
 8002e20:	e006      	b.n	8002e30 <HAL_GPIO_Init+0x204>
 8002e22:	2303      	movs	r3, #3
 8002e24:	e004      	b.n	8002e30 <HAL_GPIO_Init+0x204>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e002      	b.n	8002e30 <HAL_GPIO_Init+0x204>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <HAL_GPIO_Init+0x204>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	69fa      	ldr	r2, [r7, #28]
 8002e32:	f002 0203 	and.w	r2, r2, #3
 8002e36:	0092      	lsls	r2, r2, #2
 8002e38:	4093      	lsls	r3, r2
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e40:	4935      	ldr	r1, [pc, #212]	; (8002f18 <HAL_GPIO_Init+0x2ec>)
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	089b      	lsrs	r3, r3, #2
 8002e46:	3302      	adds	r3, #2
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e4e:	4b38      	ldr	r3, [pc, #224]	; (8002f30 <HAL_GPIO_Init+0x304>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e72:	4a2f      	ldr	r2, [pc, #188]	; (8002f30 <HAL_GPIO_Init+0x304>)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e78:	4b2d      	ldr	r3, [pc, #180]	; (8002f30 <HAL_GPIO_Init+0x304>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e9c:	4a24      	ldr	r2, [pc, #144]	; (8002f30 <HAL_GPIO_Init+0x304>)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ea2:	4b23      	ldr	r3, [pc, #140]	; (8002f30 <HAL_GPIO_Init+0x304>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ec6:	4a1a      	ldr	r2, [pc, #104]	; (8002f30 <HAL_GPIO_Init+0x304>)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ecc:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <HAL_GPIO_Init+0x304>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ef0:	4a0f      	ldr	r2, [pc, #60]	; (8002f30 <HAL_GPIO_Init+0x304>)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	61fb      	str	r3, [r7, #28]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	2b0f      	cmp	r3, #15
 8002f00:	f67f aea2 	bls.w	8002c48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	3724      	adds	r7, #36	; 0x24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40013800 	.word	0x40013800
 8002f1c:	40020000 	.word	0x40020000
 8002f20:	40020400 	.word	0x40020400
 8002f24:	40020800 	.word	0x40020800
 8002f28:	40020c00 	.word	0x40020c00
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40013c00 	.word	0x40013c00

08002f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	807b      	strh	r3, [r7, #2]
 8002f40:	4613      	mov	r3, r2
 8002f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f44:	787b      	ldrb	r3, [r7, #1]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f4a:	887a      	ldrh	r2, [r7, #2]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f50:	e003      	b.n	8002f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f52:	887b      	ldrh	r3, [r7, #2]
 8002f54:	041a      	lsls	r2, r3, #16
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	619a      	str	r2, [r3, #24]
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e12b      	b.n	80031d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fe fd28 	bl	80019e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2224      	movs	r2, #36	; 0x24
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fcc:	f001 fc36 	bl	800483c <HAL_RCC_GetPCLK1Freq>
 8002fd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	4a81      	ldr	r2, [pc, #516]	; (80031dc <HAL_I2C_Init+0x274>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d807      	bhi.n	8002fec <HAL_I2C_Init+0x84>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4a80      	ldr	r2, [pc, #512]	; (80031e0 <HAL_I2C_Init+0x278>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	bf94      	ite	ls
 8002fe4:	2301      	movls	r3, #1
 8002fe6:	2300      	movhi	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	e006      	b.n	8002ffa <HAL_I2C_Init+0x92>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4a7d      	ldr	r2, [pc, #500]	; (80031e4 <HAL_I2C_Init+0x27c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	bf94      	ite	ls
 8002ff4:	2301      	movls	r3, #1
 8002ff6:	2300      	movhi	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e0e7      	b.n	80031d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4a78      	ldr	r2, [pc, #480]	; (80031e8 <HAL_I2C_Init+0x280>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	0c9b      	lsrs	r3, r3, #18
 800300c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	430a      	orrs	r2, r1
 8003020:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4a6a      	ldr	r2, [pc, #424]	; (80031dc <HAL_I2C_Init+0x274>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d802      	bhi.n	800303c <HAL_I2C_Init+0xd4>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	3301      	adds	r3, #1
 800303a:	e009      	b.n	8003050 <HAL_I2C_Init+0xe8>
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003042:	fb02 f303 	mul.w	r3, r2, r3
 8003046:	4a69      	ldr	r2, [pc, #420]	; (80031ec <HAL_I2C_Init+0x284>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	099b      	lsrs	r3, r3, #6
 800304e:	3301      	adds	r3, #1
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	430b      	orrs	r3, r1
 8003056:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003062:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	495c      	ldr	r1, [pc, #368]	; (80031dc <HAL_I2C_Init+0x274>)
 800306c:	428b      	cmp	r3, r1
 800306e:	d819      	bhi.n	80030a4 <HAL_I2C_Init+0x13c>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1e59      	subs	r1, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	fbb1 f3f3 	udiv	r3, r1, r3
 800307e:	1c59      	adds	r1, r3, #1
 8003080:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003084:	400b      	ands	r3, r1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <HAL_I2C_Init+0x138>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1e59      	subs	r1, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	fbb1 f3f3 	udiv	r3, r1, r3
 8003098:	3301      	adds	r3, #1
 800309a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309e:	e051      	b.n	8003144 <HAL_I2C_Init+0x1dc>
 80030a0:	2304      	movs	r3, #4
 80030a2:	e04f      	b.n	8003144 <HAL_I2C_Init+0x1dc>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d111      	bne.n	80030d0 <HAL_I2C_Init+0x168>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1e58      	subs	r0, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6859      	ldr	r1, [r3, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	440b      	add	r3, r1
 80030ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80030be:	3301      	adds	r3, #1
 80030c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	e012      	b.n	80030f6 <HAL_I2C_Init+0x18e>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1e58      	subs	r0, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	0099      	lsls	r1, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_Init+0x196>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e022      	b.n	8003144 <HAL_I2C_Init+0x1dc>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10e      	bne.n	8003124 <HAL_I2C_Init+0x1bc>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1e58      	subs	r0, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6859      	ldr	r1, [r3, #4]
 800310e:	460b      	mov	r3, r1
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	440b      	add	r3, r1
 8003114:	fbb0 f3f3 	udiv	r3, r0, r3
 8003118:	3301      	adds	r3, #1
 800311a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003122:	e00f      	b.n	8003144 <HAL_I2C_Init+0x1dc>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	1e58      	subs	r0, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6859      	ldr	r1, [r3, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	0099      	lsls	r1, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	fbb0 f3f3 	udiv	r3, r0, r3
 800313a:	3301      	adds	r3, #1
 800313c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003140:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	6809      	ldr	r1, [r1, #0]
 8003148:	4313      	orrs	r3, r2
 800314a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69da      	ldr	r2, [r3, #28]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003172:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6911      	ldr	r1, [r2, #16]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68d2      	ldr	r2, [r2, #12]
 800317e:	4311      	orrs	r1, r2
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	430b      	orrs	r3, r1
 8003186:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	000186a0 	.word	0x000186a0
 80031e0:	001e847f 	.word	0x001e847f
 80031e4:	003d08ff 	.word	0x003d08ff
 80031e8:	431bde83 	.word	0x431bde83
 80031ec:	10624dd3 	.word	0x10624dd3

080031f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	607a      	str	r2, [r7, #4]
 80031fa:	461a      	mov	r2, r3
 80031fc:	460b      	mov	r3, r1
 80031fe:	817b      	strh	r3, [r7, #10]
 8003200:	4613      	mov	r3, r2
 8003202:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003204:	f7fe fee2 	bl	8001fcc <HAL_GetTick>
 8003208:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b20      	cmp	r3, #32
 8003214:	f040 80e0 	bne.w	80033d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	2319      	movs	r3, #25
 800321e:	2201      	movs	r2, #1
 8003220:	4970      	ldr	r1, [pc, #448]	; (80033e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 fc64 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800322e:	2302      	movs	r3, #2
 8003230:	e0d3      	b.n	80033da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_I2C_Master_Transmit+0x50>
 800323c:	2302      	movs	r3, #2
 800323e:	e0cc      	b.n	80033da <HAL_I2C_Master_Transmit+0x1ea>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b01      	cmp	r3, #1
 8003254:	d007      	beq.n	8003266 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0201 	orr.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003274:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2221      	movs	r2, #33	; 0x21
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2210      	movs	r2, #16
 8003282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	893a      	ldrh	r2, [r7, #8]
 8003296:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4a50      	ldr	r2, [pc, #320]	; (80033e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80032a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032a8:	8979      	ldrh	r1, [r7, #10]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	6a3a      	ldr	r2, [r7, #32]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 face 	bl	8003850 <I2C_MasterRequestWrite>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e08d      	b.n	80033da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032d4:	e066      	b.n	80033a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	6a39      	ldr	r1, [r7, #32]
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 fd22 	bl	8003d24 <I2C_WaitOnTXEFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00d      	beq.n	8003302 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d107      	bne.n	80032fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e06b      	b.n	80033da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	781a      	ldrb	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b04      	cmp	r3, #4
 800333e:	d11b      	bne.n	8003378 <HAL_I2C_Master_Transmit+0x188>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003344:	2b00      	cmp	r3, #0
 8003346:	d017      	beq.n	8003378 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	781a      	ldrb	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	6a39      	ldr	r1, [r7, #32]
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 fd19 	bl	8003db4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00d      	beq.n	80033a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	2b04      	cmp	r3, #4
 800338e:	d107      	bne.n	80033a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800339e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e01a      	b.n	80033da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d194      	bne.n	80032d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e000      	b.n	80033da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80033d8:	2302      	movs	r3, #2
  }
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	00100002 	.word	0x00100002
 80033e8:	ffff0000 	.word	0xffff0000

080033ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08c      	sub	sp, #48	; 0x30
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	461a      	mov	r2, r3
 80033f8:	460b      	mov	r3, r1
 80033fa:	817b      	strh	r3, [r7, #10]
 80033fc:	4613      	mov	r3, r2
 80033fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003400:	f7fe fde4 	bl	8001fcc <HAL_GetTick>
 8003404:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b20      	cmp	r3, #32
 8003410:	f040 8217 	bne.w	8003842 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	2319      	movs	r3, #25
 800341a:	2201      	movs	r2, #1
 800341c:	497c      	ldr	r1, [pc, #496]	; (8003610 <HAL_I2C_Master_Receive+0x224>)
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 fb66 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800342a:	2302      	movs	r3, #2
 800342c:	e20a      	b.n	8003844 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <HAL_I2C_Master_Receive+0x50>
 8003438:	2302      	movs	r3, #2
 800343a:	e203      	b.n	8003844 <HAL_I2C_Master_Receive+0x458>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b01      	cmp	r3, #1
 8003450:	d007      	beq.n	8003462 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 0201 	orr.w	r2, r2, #1
 8003460:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003470:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2222      	movs	r2, #34	; 0x22
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2210      	movs	r2, #16
 800347e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	893a      	ldrh	r2, [r7, #8]
 8003492:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	4a5c      	ldr	r2, [pc, #368]	; (8003614 <HAL_I2C_Master_Receive+0x228>)
 80034a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034a4:	8979      	ldrh	r1, [r7, #10]
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 fa52 	bl	8003954 <I2C_MasterRequestRead>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e1c4      	b.n	8003844 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d113      	bne.n	80034ea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c2:	2300      	movs	r3, #0
 80034c4:	623b      	str	r3, [r7, #32]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	623b      	str	r3, [r7, #32]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	623b      	str	r3, [r7, #32]
 80034d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	e198      	b.n	800381c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d11b      	bne.n	800352a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003500:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	e178      	b.n	800381c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352e:	2b02      	cmp	r3, #2
 8003530:	d11b      	bne.n	800356a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003540:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003550:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003552:	2300      	movs	r3, #0
 8003554:	61bb      	str	r3, [r7, #24]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	e158      	b.n	800381c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003578:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003590:	e144      	b.n	800381c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003596:	2b03      	cmp	r3, #3
 8003598:	f200 80f1 	bhi.w	800377e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d123      	bne.n	80035ec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 fc4b 	bl	8003e44 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e145      	b.n	8003844 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691a      	ldr	r2, [r3, #16]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035ea:	e117      	b.n	800381c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d14e      	bne.n	8003692 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fa:	2200      	movs	r2, #0
 80035fc:	4906      	ldr	r1, [pc, #24]	; (8003618 <HAL_I2C_Master_Receive+0x22c>)
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 fa76 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d008      	beq.n	800361c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e11a      	b.n	8003844 <HAL_I2C_Master_Receive+0x458>
 800360e:	bf00      	nop
 8003610:	00100002 	.word	0x00100002
 8003614:	ffff0000 	.word	0xffff0000
 8003618:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003690:	e0c4      	b.n	800381c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	2200      	movs	r2, #0
 800369a:	496c      	ldr	r1, [pc, #432]	; (800384c <HAL_I2C_Master_Receive+0x460>)
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 fa27 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0cb      	b.n	8003844 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	2200      	movs	r2, #0
 80036f6:	4955      	ldr	r1, [pc, #340]	; (800384c <HAL_I2C_Master_Receive+0x460>)
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f9f9 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e09d      	b.n	8003844 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003716:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800377c:	e04e      	b.n	800381c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800377e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003780:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 fb5e 	bl	8003e44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e058      	b.n	8003844 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d124      	bne.n	800381c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d107      	bne.n	80037ea <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003806:	3b01      	subs	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003820:	2b00      	cmp	r3, #0
 8003822:	f47f aeb6 	bne.w	8003592 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	e000      	b.n	8003844 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003842:	2302      	movs	r3, #2
  }
}
 8003844:	4618      	mov	r0, r3
 8003846:	3728      	adds	r7, #40	; 0x28
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	00010004 	.word	0x00010004

08003850 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af02      	add	r7, sp, #8
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	603b      	str	r3, [r7, #0]
 800385c:	460b      	mov	r3, r1
 800385e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b08      	cmp	r3, #8
 800386a:	d006      	beq.n	800387a <I2C_MasterRequestWrite+0x2a>
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d003      	beq.n	800387a <I2C_MasterRequestWrite+0x2a>
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003878:	d108      	bne.n	800388c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	e00b      	b.n	80038a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	2b12      	cmp	r3, #18
 8003892:	d107      	bne.n	80038a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f91d 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00d      	beq.n	80038d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ca:	d103      	bne.n	80038d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e035      	b.n	8003944 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038e0:	d108      	bne.n	80038f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038e2:	897b      	ldrh	r3, [r7, #10]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038f0:	611a      	str	r2, [r3, #16]
 80038f2:	e01b      	b.n	800392c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038f4:	897b      	ldrh	r3, [r7, #10]
 80038f6:	11db      	asrs	r3, r3, #7
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	f003 0306 	and.w	r3, r3, #6
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f063 030f 	orn	r3, r3, #15
 8003904:	b2da      	uxtb	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	490e      	ldr	r1, [pc, #56]	; (800394c <I2C_MasterRequestWrite+0xfc>)
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f966 	bl	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e010      	b.n	8003944 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003922:	897b      	ldrh	r3, [r7, #10]
 8003924:	b2da      	uxtb	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	4907      	ldr	r1, [pc, #28]	; (8003950 <I2C_MasterRequestWrite+0x100>)
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f956 	bl	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	00010008 	.word	0x00010008
 8003950:	00010002 	.word	0x00010002

08003954 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af02      	add	r7, sp, #8
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	607a      	str	r2, [r7, #4]
 800395e:	603b      	str	r3, [r7, #0]
 8003960:	460b      	mov	r3, r1
 8003962:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003978:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b08      	cmp	r3, #8
 800397e:	d006      	beq.n	800398e <I2C_MasterRequestRead+0x3a>
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d003      	beq.n	800398e <I2C_MasterRequestRead+0x3a>
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800398c:	d108      	bne.n	80039a0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	e00b      	b.n	80039b8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	2b11      	cmp	r3, #17
 80039a6:	d107      	bne.n	80039b8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f893 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00d      	beq.n	80039ec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039de:	d103      	bne.n	80039e8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e079      	b.n	8003ae0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039f4:	d108      	bne.n	8003a08 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039f6:	897b      	ldrh	r3, [r7, #10]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	611a      	str	r2, [r3, #16]
 8003a06:	e05f      	b.n	8003ac8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a08:	897b      	ldrh	r3, [r7, #10]
 8003a0a:	11db      	asrs	r3, r3, #7
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f003 0306 	and.w	r3, r3, #6
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	f063 030f 	orn	r3, r3, #15
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	4930      	ldr	r1, [pc, #192]	; (8003ae8 <I2C_MasterRequestRead+0x194>)
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 f8dc 	bl	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e054      	b.n	8003ae0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a36:	897b      	ldrh	r3, [r7, #10]
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	4929      	ldr	r1, [pc, #164]	; (8003aec <I2C_MasterRequestRead+0x198>)
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f8cc 	bl	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e044      	b.n	8003ae0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a56:	2300      	movs	r3, #0
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a7a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 f831 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00d      	beq.n	8003ab0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa2:	d103      	bne.n	8003aac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e017      	b.n	8003ae0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ab0:	897b      	ldrh	r3, [r7, #10]
 8003ab2:	11db      	asrs	r3, r3, #7
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f003 0306 	and.w	r3, r3, #6
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	f063 030e 	orn	r3, r3, #14
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	4907      	ldr	r1, [pc, #28]	; (8003aec <I2C_MasterRequestRead+0x198>)
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f888 	bl	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	00010008 	.word	0x00010008
 8003aec:	00010002 	.word	0x00010002

08003af0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b00:	e048      	b.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b08:	d044      	beq.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0a:	f7fe fa5f 	bl	8001fcc <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d302      	bcc.n	8003b20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d139      	bne.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	0c1b      	lsrs	r3, r3, #16
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d10d      	bne.n	8003b46 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	43da      	mvns	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	4013      	ands	r3, r2
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bf0c      	ite	eq
 8003b3c:	2301      	moveq	r3, #1
 8003b3e:	2300      	movne	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	461a      	mov	r2, r3
 8003b44:	e00c      	b.n	8003b60 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	43da      	mvns	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	4013      	ands	r3, r2
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	bf0c      	ite	eq
 8003b58:	2301      	moveq	r3, #1
 8003b5a:	2300      	movne	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	461a      	mov	r2, r3
 8003b60:	79fb      	ldrb	r3, [r7, #7]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d116      	bne.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	f043 0220 	orr.w	r2, r3, #32
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e023      	b.n	8003bdc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	0c1b      	lsrs	r3, r3, #16
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d10d      	bne.n	8003bba <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	43da      	mvns	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	e00c      	b.n	8003bd4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	43da      	mvns	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d093      	beq.n	8003b02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bf2:	e071      	b.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c02:	d123      	bne.n	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c12:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	f043 0204 	orr.w	r2, r3, #4
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e067      	b.n	8003d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c52:	d041      	beq.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c54:	f7fe f9ba 	bl	8001fcc <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d302      	bcc.n	8003c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d136      	bne.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	0c1b      	lsrs	r3, r3, #16
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d10c      	bne.n	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	43da      	mvns	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	bf14      	ite	ne
 8003c86:	2301      	movne	r3, #1
 8003c88:	2300      	moveq	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	e00b      	b.n	8003ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	43da      	mvns	r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf14      	ite	ne
 8003ca0:	2301      	movne	r3, #1
 8003ca2:	2300      	moveq	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d016      	beq.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f043 0220 	orr.w	r2, r3, #32
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e021      	b.n	8003d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	0c1b      	lsrs	r3, r3, #16
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d10c      	bne.n	8003cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	43da      	mvns	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4013      	ands	r3, r2
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf14      	ite	ne
 8003cf4:	2301      	movne	r3, #1
 8003cf6:	2300      	moveq	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	e00b      	b.n	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	43da      	mvns	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4013      	ands	r3, r2
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	bf14      	ite	ne
 8003d0e:	2301      	movne	r3, #1
 8003d10:	2300      	moveq	r3, #0
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f47f af6d 	bne.w	8003bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d30:	e034      	b.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f8e3 	bl	8003efe <I2C_IsAcknowledgeFailed>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e034      	b.n	8003dac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d028      	beq.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4a:	f7fe f93f 	bl	8001fcc <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d302      	bcc.n	8003d60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d11d      	bne.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6a:	2b80      	cmp	r3, #128	; 0x80
 8003d6c:	d016      	beq.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	f043 0220 	orr.w	r2, r3, #32
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e007      	b.n	8003dac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da6:	2b80      	cmp	r3, #128	; 0x80
 8003da8:	d1c3      	bne.n	8003d32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dc0:	e034      	b.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f89b 	bl	8003efe <I2C_IsAcknowledgeFailed>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e034      	b.n	8003e3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d028      	beq.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dda:	f7fe f8f7 	bl	8001fcc <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d302      	bcc.n	8003df0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d11d      	bne.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d016      	beq.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	f043 0220 	orr.w	r2, r3, #32
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e007      	b.n	8003e3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d1c3      	bne.n	8003dc2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e50:	e049      	b.n	8003ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b10      	cmp	r3, #16
 8003e5e:	d119      	bne.n	8003e94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0210 	mvn.w	r2, #16
 8003e68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e030      	b.n	8003ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e94:	f7fe f89a 	bl	8001fcc <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d302      	bcc.n	8003eaa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d11d      	bne.n	8003ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb4:	2b40      	cmp	r3, #64	; 0x40
 8003eb6:	d016      	beq.n	8003ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f043 0220 	orr.w	r2, r3, #32
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e007      	b.n	8003ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	d1ae      	bne.n	8003e52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f14:	d11b      	bne.n	8003f4e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f1e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f043 0204 	orr.w	r2, r3, #4
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e267      	b.n	800443e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d075      	beq.n	8004066 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f7a:	4b88      	ldr	r3, [pc, #544]	; (800419c <HAL_RCC_OscConfig+0x240>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d00c      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f86:	4b85      	ldr	r3, [pc, #532]	; (800419c <HAL_RCC_OscConfig+0x240>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d112      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f92:	4b82      	ldr	r3, [pc, #520]	; (800419c <HAL_RCC_OscConfig+0x240>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f9e:	d10b      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa0:	4b7e      	ldr	r3, [pc, #504]	; (800419c <HAL_RCC_OscConfig+0x240>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d05b      	beq.n	8004064 <HAL_RCC_OscConfig+0x108>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d157      	bne.n	8004064 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e242      	b.n	800443e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc0:	d106      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x74>
 8003fc2:	4b76      	ldr	r3, [pc, #472]	; (800419c <HAL_RCC_OscConfig+0x240>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a75      	ldr	r2, [pc, #468]	; (800419c <HAL_RCC_OscConfig+0x240>)
 8003fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	e01d      	b.n	800400c <HAL_RCC_OscConfig+0xb0>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x98>
 8003fda:	4b70      	ldr	r3, [pc, #448]	; (800419c <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a6f      	ldr	r2, [pc, #444]	; (800419c <HAL_RCC_OscConfig+0x240>)
 8003fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	4b6d      	ldr	r3, [pc, #436]	; (800419c <HAL_RCC_OscConfig+0x240>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a6c      	ldr	r2, [pc, #432]	; (800419c <HAL_RCC_OscConfig+0x240>)
 8003fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	e00b      	b.n	800400c <HAL_RCC_OscConfig+0xb0>
 8003ff4:	4b69      	ldr	r3, [pc, #420]	; (800419c <HAL_RCC_OscConfig+0x240>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a68      	ldr	r2, [pc, #416]	; (800419c <HAL_RCC_OscConfig+0x240>)
 8003ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	4b66      	ldr	r3, [pc, #408]	; (800419c <HAL_RCC_OscConfig+0x240>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a65      	ldr	r2, [pc, #404]	; (800419c <HAL_RCC_OscConfig+0x240>)
 8004006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800400a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d013      	beq.n	800403c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004014:	f7fd ffda 	bl	8001fcc <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800401c:	f7fd ffd6 	bl	8001fcc <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b64      	cmp	r3, #100	; 0x64
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e207      	b.n	800443e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402e:	4b5b      	ldr	r3, [pc, #364]	; (800419c <HAL_RCC_OscConfig+0x240>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0f0      	beq.n	800401c <HAL_RCC_OscConfig+0xc0>
 800403a:	e014      	b.n	8004066 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403c:	f7fd ffc6 	bl	8001fcc <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004044:	f7fd ffc2 	bl	8001fcc <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	; 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e1f3      	b.n	800443e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004056:	4b51      	ldr	r3, [pc, #324]	; (800419c <HAL_RCC_OscConfig+0x240>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0xe8>
 8004062:	e000      	b.n	8004066 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d063      	beq.n	800413a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004072:	4b4a      	ldr	r3, [pc, #296]	; (800419c <HAL_RCC_OscConfig+0x240>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00b      	beq.n	8004096 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800407e:	4b47      	ldr	r3, [pc, #284]	; (800419c <HAL_RCC_OscConfig+0x240>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004086:	2b08      	cmp	r3, #8
 8004088:	d11c      	bne.n	80040c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800408a:	4b44      	ldr	r3, [pc, #272]	; (800419c <HAL_RCC_OscConfig+0x240>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d116      	bne.n	80040c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004096:	4b41      	ldr	r3, [pc, #260]	; (800419c <HAL_RCC_OscConfig+0x240>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <HAL_RCC_OscConfig+0x152>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d001      	beq.n	80040ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e1c7      	b.n	800443e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ae:	4b3b      	ldr	r3, [pc, #236]	; (800419c <HAL_RCC_OscConfig+0x240>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	4937      	ldr	r1, [pc, #220]	; (800419c <HAL_RCC_OscConfig+0x240>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040c2:	e03a      	b.n	800413a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d020      	beq.n	800410e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040cc:	4b34      	ldr	r3, [pc, #208]	; (80041a0 <HAL_RCC_OscConfig+0x244>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d2:	f7fd ff7b 	bl	8001fcc <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040da:	f7fd ff77 	bl	8001fcc <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e1a8      	b.n	800443e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ec:	4b2b      	ldr	r3, [pc, #172]	; (800419c <HAL_RCC_OscConfig+0x240>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f8:	4b28      	ldr	r3, [pc, #160]	; (800419c <HAL_RCC_OscConfig+0x240>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	4925      	ldr	r1, [pc, #148]	; (800419c <HAL_RCC_OscConfig+0x240>)
 8004108:	4313      	orrs	r3, r2
 800410a:	600b      	str	r3, [r1, #0]
 800410c:	e015      	b.n	800413a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800410e:	4b24      	ldr	r3, [pc, #144]	; (80041a0 <HAL_RCC_OscConfig+0x244>)
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004114:	f7fd ff5a 	bl	8001fcc <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800411c:	f7fd ff56 	bl	8001fcc <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e187      	b.n	800443e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800412e:	4b1b      	ldr	r3, [pc, #108]	; (800419c <HAL_RCC_OscConfig+0x240>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f0      	bne.n	800411c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d036      	beq.n	80041b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d016      	beq.n	800417c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800414e:	4b15      	ldr	r3, [pc, #84]	; (80041a4 <HAL_RCC_OscConfig+0x248>)
 8004150:	2201      	movs	r2, #1
 8004152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004154:	f7fd ff3a 	bl	8001fcc <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800415c:	f7fd ff36 	bl	8001fcc <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e167      	b.n	800443e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800416e:	4b0b      	ldr	r3, [pc, #44]	; (800419c <HAL_RCC_OscConfig+0x240>)
 8004170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0x200>
 800417a:	e01b      	b.n	80041b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800417c:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <HAL_RCC_OscConfig+0x248>)
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004182:	f7fd ff23 	bl	8001fcc <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004188:	e00e      	b.n	80041a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800418a:	f7fd ff1f 	bl	8001fcc <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d907      	bls.n	80041a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e150      	b.n	800443e <HAL_RCC_OscConfig+0x4e2>
 800419c:	40023800 	.word	0x40023800
 80041a0:	42470000 	.word	0x42470000
 80041a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a8:	4b88      	ldr	r3, [pc, #544]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 80041aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1ea      	bne.n	800418a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 8097 	beq.w	80042f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041c2:	2300      	movs	r3, #0
 80041c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041c6:	4b81      	ldr	r3, [pc, #516]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10f      	bne.n	80041f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d2:	2300      	movs	r3, #0
 80041d4:	60bb      	str	r3, [r7, #8]
 80041d6:	4b7d      	ldr	r3, [pc, #500]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	4a7c      	ldr	r2, [pc, #496]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 80041dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e0:	6413      	str	r3, [r2, #64]	; 0x40
 80041e2:	4b7a      	ldr	r3, [pc, #488]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ea:	60bb      	str	r3, [r7, #8]
 80041ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ee:	2301      	movs	r3, #1
 80041f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f2:	4b77      	ldr	r3, [pc, #476]	; (80043d0 <HAL_RCC_OscConfig+0x474>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d118      	bne.n	8004230 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041fe:	4b74      	ldr	r3, [pc, #464]	; (80043d0 <HAL_RCC_OscConfig+0x474>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a73      	ldr	r2, [pc, #460]	; (80043d0 <HAL_RCC_OscConfig+0x474>)
 8004204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800420a:	f7fd fedf 	bl	8001fcc <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004212:	f7fd fedb 	bl	8001fcc <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e10c      	b.n	800443e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004224:	4b6a      	ldr	r3, [pc, #424]	; (80043d0 <HAL_RCC_OscConfig+0x474>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d106      	bne.n	8004246 <HAL_RCC_OscConfig+0x2ea>
 8004238:	4b64      	ldr	r3, [pc, #400]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 800423a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423c:	4a63      	ldr	r2, [pc, #396]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 800423e:	f043 0301 	orr.w	r3, r3, #1
 8004242:	6713      	str	r3, [r2, #112]	; 0x70
 8004244:	e01c      	b.n	8004280 <HAL_RCC_OscConfig+0x324>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2b05      	cmp	r3, #5
 800424c:	d10c      	bne.n	8004268 <HAL_RCC_OscConfig+0x30c>
 800424e:	4b5f      	ldr	r3, [pc, #380]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	4a5e      	ldr	r2, [pc, #376]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 8004254:	f043 0304 	orr.w	r3, r3, #4
 8004258:	6713      	str	r3, [r2, #112]	; 0x70
 800425a:	4b5c      	ldr	r3, [pc, #368]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 800425c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425e:	4a5b      	ldr	r2, [pc, #364]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	6713      	str	r3, [r2, #112]	; 0x70
 8004266:	e00b      	b.n	8004280 <HAL_RCC_OscConfig+0x324>
 8004268:	4b58      	ldr	r3, [pc, #352]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	4a57      	ldr	r2, [pc, #348]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 800426e:	f023 0301 	bic.w	r3, r3, #1
 8004272:	6713      	str	r3, [r2, #112]	; 0x70
 8004274:	4b55      	ldr	r3, [pc, #340]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 8004276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004278:	4a54      	ldr	r2, [pc, #336]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 800427a:	f023 0304 	bic.w	r3, r3, #4
 800427e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d015      	beq.n	80042b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004288:	f7fd fea0 	bl	8001fcc <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428e:	e00a      	b.n	80042a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004290:	f7fd fe9c 	bl	8001fcc <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	f241 3288 	movw	r2, #5000	; 0x1388
 800429e:	4293      	cmp	r3, r2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e0cb      	b.n	800443e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a6:	4b49      	ldr	r3, [pc, #292]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0ee      	beq.n	8004290 <HAL_RCC_OscConfig+0x334>
 80042b2:	e014      	b.n	80042de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b4:	f7fd fe8a 	bl	8001fcc <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ba:	e00a      	b.n	80042d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042bc:	f7fd fe86 	bl	8001fcc <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e0b5      	b.n	800443e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d2:	4b3e      	ldr	r3, [pc, #248]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1ee      	bne.n	80042bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042de:	7dfb      	ldrb	r3, [r7, #23]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d105      	bne.n	80042f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e4:	4b39      	ldr	r3, [pc, #228]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	4a38      	ldr	r2, [pc, #224]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 80042ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 80a1 	beq.w	800443c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042fa:	4b34      	ldr	r3, [pc, #208]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 030c 	and.w	r3, r3, #12
 8004302:	2b08      	cmp	r3, #8
 8004304:	d05c      	beq.n	80043c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d141      	bne.n	8004392 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430e:	4b31      	ldr	r3, [pc, #196]	; (80043d4 <HAL_RCC_OscConfig+0x478>)
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004314:	f7fd fe5a 	bl	8001fcc <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800431c:	f7fd fe56 	bl	8001fcc <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e087      	b.n	800443e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432e:	4b27      	ldr	r3, [pc, #156]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69da      	ldr	r2, [r3, #28]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	019b      	lsls	r3, r3, #6
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004350:	085b      	lsrs	r3, r3, #1
 8004352:	3b01      	subs	r3, #1
 8004354:	041b      	lsls	r3, r3, #16
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	061b      	lsls	r3, r3, #24
 800435e:	491b      	ldr	r1, [pc, #108]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 8004360:	4313      	orrs	r3, r2
 8004362:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004364:	4b1b      	ldr	r3, [pc, #108]	; (80043d4 <HAL_RCC_OscConfig+0x478>)
 8004366:	2201      	movs	r2, #1
 8004368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436a:	f7fd fe2f 	bl	8001fcc <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004372:	f7fd fe2b 	bl	8001fcc <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e05c      	b.n	800443e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004384:	4b11      	ldr	r3, [pc, #68]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0f0      	beq.n	8004372 <HAL_RCC_OscConfig+0x416>
 8004390:	e054      	b.n	800443c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004392:	4b10      	ldr	r3, [pc, #64]	; (80043d4 <HAL_RCC_OscConfig+0x478>)
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004398:	f7fd fe18 	bl	8001fcc <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fd fe14 	bl	8001fcc <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e045      	b.n	800443e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b2:	4b06      	ldr	r3, [pc, #24]	; (80043cc <HAL_RCC_OscConfig+0x470>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x444>
 80043be:	e03d      	b.n	800443c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d107      	bne.n	80043d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e038      	b.n	800443e <HAL_RCC_OscConfig+0x4e2>
 80043cc:	40023800 	.word	0x40023800
 80043d0:	40007000 	.word	0x40007000
 80043d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043d8:	4b1b      	ldr	r3, [pc, #108]	; (8004448 <HAL_RCC_OscConfig+0x4ec>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d028      	beq.n	8004438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d121      	bne.n	8004438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fe:	429a      	cmp	r2, r3
 8004400:	d11a      	bne.n	8004438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004408:	4013      	ands	r3, r2
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800440e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004410:	4293      	cmp	r3, r2
 8004412:	d111      	bne.n	8004438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441e:	085b      	lsrs	r3, r3, #1
 8004420:	3b01      	subs	r3, #1
 8004422:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004424:	429a      	cmp	r2, r3
 8004426:	d107      	bne.n	8004438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004434:	429a      	cmp	r2, r3
 8004436:	d001      	beq.n	800443c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40023800 	.word	0x40023800

0800444c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0cc      	b.n	80045fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004460:	4b68      	ldr	r3, [pc, #416]	; (8004604 <HAL_RCC_ClockConfig+0x1b8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d90c      	bls.n	8004488 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446e:	4b65      	ldr	r3, [pc, #404]	; (8004604 <HAL_RCC_ClockConfig+0x1b8>)
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004476:	4b63      	ldr	r3, [pc, #396]	; (8004604 <HAL_RCC_ClockConfig+0x1b8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d001      	beq.n	8004488 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0b8      	b.n	80045fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d020      	beq.n	80044d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d005      	beq.n	80044ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a0:	4b59      	ldr	r3, [pc, #356]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	4a58      	ldr	r2, [pc, #352]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044b8:	4b53      	ldr	r3, [pc, #332]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	4a52      	ldr	r2, [pc, #328]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c4:	4b50      	ldr	r3, [pc, #320]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	494d      	ldr	r1, [pc, #308]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d044      	beq.n	800456c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d107      	bne.n	80044fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ea:	4b47      	ldr	r3, [pc, #284]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d119      	bne.n	800452a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e07f      	b.n	80045fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d003      	beq.n	800450a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004506:	2b03      	cmp	r3, #3
 8004508:	d107      	bne.n	800451a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800450a:	4b3f      	ldr	r3, [pc, #252]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d109      	bne.n	800452a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e06f      	b.n	80045fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800451a:	4b3b      	ldr	r3, [pc, #236]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e067      	b.n	80045fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800452a:	4b37      	ldr	r3, [pc, #220]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f023 0203 	bic.w	r2, r3, #3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	4934      	ldr	r1, [pc, #208]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 8004538:	4313      	orrs	r3, r2
 800453a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800453c:	f7fd fd46 	bl	8001fcc <HAL_GetTick>
 8004540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004542:	e00a      	b.n	800455a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004544:	f7fd fd42 	bl	8001fcc <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004552:	4293      	cmp	r3, r2
 8004554:	d901      	bls.n	800455a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e04f      	b.n	80045fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455a:	4b2b      	ldr	r3, [pc, #172]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 020c 	and.w	r2, r3, #12
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	429a      	cmp	r2, r3
 800456a:	d1eb      	bne.n	8004544 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800456c:	4b25      	ldr	r3, [pc, #148]	; (8004604 <HAL_RCC_ClockConfig+0x1b8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d20c      	bcs.n	8004594 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457a:	4b22      	ldr	r3, [pc, #136]	; (8004604 <HAL_RCC_ClockConfig+0x1b8>)
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004582:	4b20      	ldr	r3, [pc, #128]	; (8004604 <HAL_RCC_ClockConfig+0x1b8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d001      	beq.n	8004594 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e032      	b.n	80045fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d008      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a0:	4b19      	ldr	r3, [pc, #100]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4916      	ldr	r1, [pc, #88]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d009      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045be:	4b12      	ldr	r3, [pc, #72]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	490e      	ldr	r1, [pc, #56]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045d2:	f000 f821 	bl	8004618 <HAL_RCC_GetSysClockFreq>
 80045d6:	4602      	mov	r2, r0
 80045d8:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	091b      	lsrs	r3, r3, #4
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	490a      	ldr	r1, [pc, #40]	; (800460c <HAL_RCC_ClockConfig+0x1c0>)
 80045e4:	5ccb      	ldrb	r3, [r1, r3]
 80045e6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ea:	4a09      	ldr	r2, [pc, #36]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 80045ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045ee:	4b09      	ldr	r3, [pc, #36]	; (8004614 <HAL_RCC_ClockConfig+0x1c8>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fd fca6 	bl	8001f44 <HAL_InitTick>

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40023c00 	.word	0x40023c00
 8004608:	40023800 	.word	0x40023800
 800460c:	0800b8f0 	.word	0x0800b8f0
 8004610:	20000000 	.word	0x20000000
 8004614:	20000004 	.word	0x20000004

08004618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800461c:	b094      	sub	sp, #80	; 0x50
 800461e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004620:	2300      	movs	r3, #0
 8004622:	647b      	str	r3, [r7, #68]	; 0x44
 8004624:	2300      	movs	r3, #0
 8004626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004628:	2300      	movs	r3, #0
 800462a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004630:	4b79      	ldr	r3, [pc, #484]	; (8004818 <HAL_RCC_GetSysClockFreq+0x200>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 030c 	and.w	r3, r3, #12
 8004638:	2b08      	cmp	r3, #8
 800463a:	d00d      	beq.n	8004658 <HAL_RCC_GetSysClockFreq+0x40>
 800463c:	2b08      	cmp	r3, #8
 800463e:	f200 80e1 	bhi.w	8004804 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <HAL_RCC_GetSysClockFreq+0x34>
 8004646:	2b04      	cmp	r3, #4
 8004648:	d003      	beq.n	8004652 <HAL_RCC_GetSysClockFreq+0x3a>
 800464a:	e0db      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800464c:	4b73      	ldr	r3, [pc, #460]	; (800481c <HAL_RCC_GetSysClockFreq+0x204>)
 800464e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004650:	e0db      	b.n	800480a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004652:	4b73      	ldr	r3, [pc, #460]	; (8004820 <HAL_RCC_GetSysClockFreq+0x208>)
 8004654:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004656:	e0d8      	b.n	800480a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004658:	4b6f      	ldr	r3, [pc, #444]	; (8004818 <HAL_RCC_GetSysClockFreq+0x200>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004660:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004662:	4b6d      	ldr	r3, [pc, #436]	; (8004818 <HAL_RCC_GetSysClockFreq+0x200>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d063      	beq.n	8004736 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800466e:	4b6a      	ldr	r3, [pc, #424]	; (8004818 <HAL_RCC_GetSysClockFreq+0x200>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	099b      	lsrs	r3, r3, #6
 8004674:	2200      	movs	r2, #0
 8004676:	63bb      	str	r3, [r7, #56]	; 0x38
 8004678:	63fa      	str	r2, [r7, #60]	; 0x3c
 800467a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004680:	633b      	str	r3, [r7, #48]	; 0x30
 8004682:	2300      	movs	r3, #0
 8004684:	637b      	str	r3, [r7, #52]	; 0x34
 8004686:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800468a:	4622      	mov	r2, r4
 800468c:	462b      	mov	r3, r5
 800468e:	f04f 0000 	mov.w	r0, #0
 8004692:	f04f 0100 	mov.w	r1, #0
 8004696:	0159      	lsls	r1, r3, #5
 8004698:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800469c:	0150      	lsls	r0, r2, #5
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4621      	mov	r1, r4
 80046a4:	1a51      	subs	r1, r2, r1
 80046a6:	6139      	str	r1, [r7, #16]
 80046a8:	4629      	mov	r1, r5
 80046aa:	eb63 0301 	sbc.w	r3, r3, r1
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046bc:	4659      	mov	r1, fp
 80046be:	018b      	lsls	r3, r1, #6
 80046c0:	4651      	mov	r1, sl
 80046c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046c6:	4651      	mov	r1, sl
 80046c8:	018a      	lsls	r2, r1, #6
 80046ca:	4651      	mov	r1, sl
 80046cc:	ebb2 0801 	subs.w	r8, r2, r1
 80046d0:	4659      	mov	r1, fp
 80046d2:	eb63 0901 	sbc.w	r9, r3, r1
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046ea:	4690      	mov	r8, r2
 80046ec:	4699      	mov	r9, r3
 80046ee:	4623      	mov	r3, r4
 80046f0:	eb18 0303 	adds.w	r3, r8, r3
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	462b      	mov	r3, r5
 80046f8:	eb49 0303 	adc.w	r3, r9, r3
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800470a:	4629      	mov	r1, r5
 800470c:	024b      	lsls	r3, r1, #9
 800470e:	4621      	mov	r1, r4
 8004710:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004714:	4621      	mov	r1, r4
 8004716:	024a      	lsls	r2, r1, #9
 8004718:	4610      	mov	r0, r2
 800471a:	4619      	mov	r1, r3
 800471c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800471e:	2200      	movs	r2, #0
 8004720:	62bb      	str	r3, [r7, #40]	; 0x28
 8004722:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004724:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004728:	f7fc fac6 	bl	8000cb8 <__aeabi_uldivmod>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4613      	mov	r3, r2
 8004732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004734:	e058      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004736:	4b38      	ldr	r3, [pc, #224]	; (8004818 <HAL_RCC_GetSysClockFreq+0x200>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	099b      	lsrs	r3, r3, #6
 800473c:	2200      	movs	r2, #0
 800473e:	4618      	mov	r0, r3
 8004740:	4611      	mov	r1, r2
 8004742:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004746:	623b      	str	r3, [r7, #32]
 8004748:	2300      	movs	r3, #0
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
 800474c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004750:	4642      	mov	r2, r8
 8004752:	464b      	mov	r3, r9
 8004754:	f04f 0000 	mov.w	r0, #0
 8004758:	f04f 0100 	mov.w	r1, #0
 800475c:	0159      	lsls	r1, r3, #5
 800475e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004762:	0150      	lsls	r0, r2, #5
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4641      	mov	r1, r8
 800476a:	ebb2 0a01 	subs.w	sl, r2, r1
 800476e:	4649      	mov	r1, r9
 8004770:	eb63 0b01 	sbc.w	fp, r3, r1
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	f04f 0300 	mov.w	r3, #0
 800477c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004780:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004784:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004788:	ebb2 040a 	subs.w	r4, r2, sl
 800478c:	eb63 050b 	sbc.w	r5, r3, fp
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	00eb      	lsls	r3, r5, #3
 800479a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800479e:	00e2      	lsls	r2, r4, #3
 80047a0:	4614      	mov	r4, r2
 80047a2:	461d      	mov	r5, r3
 80047a4:	4643      	mov	r3, r8
 80047a6:	18e3      	adds	r3, r4, r3
 80047a8:	603b      	str	r3, [r7, #0]
 80047aa:	464b      	mov	r3, r9
 80047ac:	eb45 0303 	adc.w	r3, r5, r3
 80047b0:	607b      	str	r3, [r7, #4]
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047be:	4629      	mov	r1, r5
 80047c0:	028b      	lsls	r3, r1, #10
 80047c2:	4621      	mov	r1, r4
 80047c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047c8:	4621      	mov	r1, r4
 80047ca:	028a      	lsls	r2, r1, #10
 80047cc:	4610      	mov	r0, r2
 80047ce:	4619      	mov	r1, r3
 80047d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d2:	2200      	movs	r2, #0
 80047d4:	61bb      	str	r3, [r7, #24]
 80047d6:	61fa      	str	r2, [r7, #28]
 80047d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047dc:	f7fc fa6c 	bl	8000cb8 <__aeabi_uldivmod>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4613      	mov	r3, r2
 80047e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047e8:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <HAL_RCC_GetSysClockFreq+0x200>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	0c1b      	lsrs	r3, r3, #16
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	3301      	adds	r3, #1
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004800:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004802:	e002      	b.n	800480a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <HAL_RCC_GetSysClockFreq+0x204>)
 8004806:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004808:	bf00      	nop
    }
  }
  return sysclockfreq;
 800480a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800480c:	4618      	mov	r0, r3
 800480e:	3750      	adds	r7, #80	; 0x50
 8004810:	46bd      	mov	sp, r7
 8004812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004816:	bf00      	nop
 8004818:	40023800 	.word	0x40023800
 800481c:	00f42400 	.word	0x00f42400
 8004820:	007a1200 	.word	0x007a1200

08004824 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004828:	4b03      	ldr	r3, [pc, #12]	; (8004838 <HAL_RCC_GetHCLKFreq+0x14>)
 800482a:	681b      	ldr	r3, [r3, #0]
}
 800482c:	4618      	mov	r0, r3
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	20000000 	.word	0x20000000

0800483c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004840:	f7ff fff0 	bl	8004824 <HAL_RCC_GetHCLKFreq>
 8004844:	4602      	mov	r2, r0
 8004846:	4b05      	ldr	r3, [pc, #20]	; (800485c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	0a9b      	lsrs	r3, r3, #10
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	4903      	ldr	r1, [pc, #12]	; (8004860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004852:	5ccb      	ldrb	r3, [r1, r3]
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004858:	4618      	mov	r0, r3
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40023800 	.word	0x40023800
 8004860:	0800b900 	.word	0x0800b900

08004864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004868:	f7ff ffdc 	bl	8004824 <HAL_RCC_GetHCLKFreq>
 800486c:	4602      	mov	r2, r0
 800486e:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	0b5b      	lsrs	r3, r3, #13
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	4903      	ldr	r1, [pc, #12]	; (8004888 <HAL_RCC_GetPCLK2Freq+0x24>)
 800487a:	5ccb      	ldrb	r3, [r1, r3]
 800487c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004880:	4618      	mov	r0, r3
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40023800 	.word	0x40023800
 8004888:	0800b900 	.word	0x0800b900

0800488c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e041      	b.n	8004922 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d106      	bne.n	80048b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7fd f8de 	bl	8001a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3304      	adds	r3, #4
 80048c8:	4619      	mov	r1, r3
 80048ca:	4610      	mov	r0, r2
 80048cc:	f000 fe64 	bl	8005598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e041      	b.n	80049c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d106      	bne.n	8004956 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f839 	bl	80049c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2202      	movs	r2, #2
 800495a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	3304      	adds	r3, #4
 8004966:	4619      	mov	r1, r3
 8004968:	4610      	mov	r0, r2
 800496a:	f000 fe15 	bl	8005598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d109      	bne.n	8004a00 <HAL_TIM_PWM_Start+0x24>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	bf14      	ite	ne
 80049f8:	2301      	movne	r3, #1
 80049fa:	2300      	moveq	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	e022      	b.n	8004a46 <HAL_TIM_PWM_Start+0x6a>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d109      	bne.n	8004a1a <HAL_TIM_PWM_Start+0x3e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	bf14      	ite	ne
 8004a12:	2301      	movne	r3, #1
 8004a14:	2300      	moveq	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	e015      	b.n	8004a46 <HAL_TIM_PWM_Start+0x6a>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d109      	bne.n	8004a34 <HAL_TIM_PWM_Start+0x58>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	bf14      	ite	ne
 8004a2c:	2301      	movne	r3, #1
 8004a2e:	2300      	moveq	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	e008      	b.n	8004a46 <HAL_TIM_PWM_Start+0x6a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	bf14      	ite	ne
 8004a40:	2301      	movne	r3, #1
 8004a42:	2300      	moveq	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e068      	b.n	8004b20 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d104      	bne.n	8004a5e <HAL_TIM_PWM_Start+0x82>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a5c:	e013      	b.n	8004a86 <HAL_TIM_PWM_Start+0xaa>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d104      	bne.n	8004a6e <HAL_TIM_PWM_Start+0x92>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a6c:	e00b      	b.n	8004a86 <HAL_TIM_PWM_Start+0xaa>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d104      	bne.n	8004a7e <HAL_TIM_PWM_Start+0xa2>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a7c:	e003      	b.n	8004a86 <HAL_TIM_PWM_Start+0xaa>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2202      	movs	r2, #2
 8004a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	6839      	ldr	r1, [r7, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f001 f9e4 	bl	8005e5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a23      	ldr	r2, [pc, #140]	; (8004b28 <HAL_TIM_PWM_Start+0x14c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d107      	bne.n	8004aae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a1d      	ldr	r2, [pc, #116]	; (8004b28 <HAL_TIM_PWM_Start+0x14c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d018      	beq.n	8004aea <HAL_TIM_PWM_Start+0x10e>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac0:	d013      	beq.n	8004aea <HAL_TIM_PWM_Start+0x10e>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a19      	ldr	r2, [pc, #100]	; (8004b2c <HAL_TIM_PWM_Start+0x150>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00e      	beq.n	8004aea <HAL_TIM_PWM_Start+0x10e>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a17      	ldr	r2, [pc, #92]	; (8004b30 <HAL_TIM_PWM_Start+0x154>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d009      	beq.n	8004aea <HAL_TIM_PWM_Start+0x10e>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a16      	ldr	r2, [pc, #88]	; (8004b34 <HAL_TIM_PWM_Start+0x158>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d004      	beq.n	8004aea <HAL_TIM_PWM_Start+0x10e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a14      	ldr	r2, [pc, #80]	; (8004b38 <HAL_TIM_PWM_Start+0x15c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d111      	bne.n	8004b0e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b06      	cmp	r3, #6
 8004afa:	d010      	beq.n	8004b1e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0201 	orr.w	r2, r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0c:	e007      	b.n	8004b1e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f042 0201 	orr.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40010000 	.word	0x40010000
 8004b2c:	40000400 	.word	0x40000400
 8004b30:	40000800 	.word	0x40000800
 8004b34:	40000c00 	.word	0x40000c00
 8004b38:	40014000 	.word	0x40014000

08004b3c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e041      	b.n	8004bd2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fc ffa8 	bl	8001ab8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3304      	adds	r3, #4
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	f000 fd0c 	bl	8005598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d104      	bne.n	8004bfa <HAL_TIM_IC_Start_IT+0x1e>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	e013      	b.n	8004c22 <HAL_TIM_IC_Start_IT+0x46>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d104      	bne.n	8004c0a <HAL_TIM_IC_Start_IT+0x2e>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	e00b      	b.n	8004c22 <HAL_TIM_IC_Start_IT+0x46>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d104      	bne.n	8004c1a <HAL_TIM_IC_Start_IT+0x3e>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	e003      	b.n	8004c22 <HAL_TIM_IC_Start_IT+0x46>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d104      	bne.n	8004c34 <HAL_TIM_IC_Start_IT+0x58>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	e013      	b.n	8004c5c <HAL_TIM_IC_Start_IT+0x80>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d104      	bne.n	8004c44 <HAL_TIM_IC_Start_IT+0x68>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	e00b      	b.n	8004c5c <HAL_TIM_IC_Start_IT+0x80>
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d104      	bne.n	8004c54 <HAL_TIM_IC_Start_IT+0x78>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	e003      	b.n	8004c5c <HAL_TIM_IC_Start_IT+0x80>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c5e:	7bbb      	ldrb	r3, [r7, #14]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d102      	bne.n	8004c6a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c64:	7b7b      	ldrb	r3, [r7, #13]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d001      	beq.n	8004c6e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e0c2      	b.n	8004df4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d104      	bne.n	8004c7e <HAL_TIM_IC_Start_IT+0xa2>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c7c:	e013      	b.n	8004ca6 <HAL_TIM_IC_Start_IT+0xca>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d104      	bne.n	8004c8e <HAL_TIM_IC_Start_IT+0xb2>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c8c:	e00b      	b.n	8004ca6 <HAL_TIM_IC_Start_IT+0xca>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d104      	bne.n	8004c9e <HAL_TIM_IC_Start_IT+0xc2>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c9c:	e003      	b.n	8004ca6 <HAL_TIM_IC_Start_IT+0xca>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d104      	bne.n	8004cb6 <HAL_TIM_IC_Start_IT+0xda>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cb4:	e013      	b.n	8004cde <HAL_TIM_IC_Start_IT+0x102>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d104      	bne.n	8004cc6 <HAL_TIM_IC_Start_IT+0xea>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cc4:	e00b      	b.n	8004cde <HAL_TIM_IC_Start_IT+0x102>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d104      	bne.n	8004cd6 <HAL_TIM_IC_Start_IT+0xfa>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd4:	e003      	b.n	8004cde <HAL_TIM_IC_Start_IT+0x102>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2202      	movs	r2, #2
 8004cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b0c      	cmp	r3, #12
 8004ce2:	d841      	bhi.n	8004d68 <HAL_TIM_IC_Start_IT+0x18c>
 8004ce4:	a201      	add	r2, pc, #4	; (adr r2, 8004cec <HAL_TIM_IC_Start_IT+0x110>)
 8004ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cea:	bf00      	nop
 8004cec:	08004d21 	.word	0x08004d21
 8004cf0:	08004d69 	.word	0x08004d69
 8004cf4:	08004d69 	.word	0x08004d69
 8004cf8:	08004d69 	.word	0x08004d69
 8004cfc:	08004d33 	.word	0x08004d33
 8004d00:	08004d69 	.word	0x08004d69
 8004d04:	08004d69 	.word	0x08004d69
 8004d08:	08004d69 	.word	0x08004d69
 8004d0c:	08004d45 	.word	0x08004d45
 8004d10:	08004d69 	.word	0x08004d69
 8004d14:	08004d69 	.word	0x08004d69
 8004d18:	08004d69 	.word	0x08004d69
 8004d1c:	08004d57 	.word	0x08004d57
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0202 	orr.w	r2, r2, #2
 8004d2e:	60da      	str	r2, [r3, #12]
      break;
 8004d30:	e01d      	b.n	8004d6e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f042 0204 	orr.w	r2, r2, #4
 8004d40:	60da      	str	r2, [r3, #12]
      break;
 8004d42:	e014      	b.n	8004d6e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0208 	orr.w	r2, r2, #8
 8004d52:	60da      	str	r2, [r3, #12]
      break;
 8004d54:	e00b      	b.n	8004d6e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f042 0210 	orr.w	r2, r2, #16
 8004d64:	60da      	str	r2, [r3, #12]
      break;
 8004d66:	e002      	b.n	8004d6e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d6c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d6e:	7bfb      	ldrb	r3, [r7, #15]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d13e      	bne.n	8004df2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	6839      	ldr	r1, [r7, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f001 f86d 	bl	8005e5c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a1d      	ldr	r2, [pc, #116]	; (8004dfc <HAL_TIM_IC_Start_IT+0x220>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d018      	beq.n	8004dbe <HAL_TIM_IC_Start_IT+0x1e2>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d94:	d013      	beq.n	8004dbe <HAL_TIM_IC_Start_IT+0x1e2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a19      	ldr	r2, [pc, #100]	; (8004e00 <HAL_TIM_IC_Start_IT+0x224>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00e      	beq.n	8004dbe <HAL_TIM_IC_Start_IT+0x1e2>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a17      	ldr	r2, [pc, #92]	; (8004e04 <HAL_TIM_IC_Start_IT+0x228>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d009      	beq.n	8004dbe <HAL_TIM_IC_Start_IT+0x1e2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a16      	ldr	r2, [pc, #88]	; (8004e08 <HAL_TIM_IC_Start_IT+0x22c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d004      	beq.n	8004dbe <HAL_TIM_IC_Start_IT+0x1e2>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a14      	ldr	r2, [pc, #80]	; (8004e0c <HAL_TIM_IC_Start_IT+0x230>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d111      	bne.n	8004de2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b06      	cmp	r3, #6
 8004dce:	d010      	beq.n	8004df2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de0:	e007      	b.n	8004df2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f042 0201 	orr.w	r2, r2, #1
 8004df0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40010000 	.word	0x40010000
 8004e00:	40000400 	.word	0x40000400
 8004e04:	40000800 	.word	0x40000800
 8004e08:	40000c00 	.word	0x40000c00
 8004e0c:	40014000 	.word	0x40014000

08004e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d020      	beq.n	8004e74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01b      	beq.n	8004e74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f06f 0202 	mvn.w	r2, #2
 8004e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7fc f8f2 	bl	8001044 <HAL_TIM_IC_CaptureCallback>
 8004e60:	e005      	b.n	8004e6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fb7a 	bl	800555c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fb81 	bl	8005570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f003 0304 	and.w	r3, r3, #4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d020      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01b      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f06f 0204 	mvn.w	r2, #4
 8004e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2202      	movs	r2, #2
 8004e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fc f8cc 	bl	8001044 <HAL_TIM_IC_CaptureCallback>
 8004eac:	e005      	b.n	8004eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fb54 	bl	800555c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fb5b 	bl	8005570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d020      	beq.n	8004f0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01b      	beq.n	8004f0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0208 	mvn.w	r2, #8
 8004edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2204      	movs	r2, #4
 8004ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7fc f8a6 	bl	8001044 <HAL_TIM_IC_CaptureCallback>
 8004ef8:	e005      	b.n	8004f06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fb2e 	bl	800555c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fb35 	bl	8005570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d020      	beq.n	8004f58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f003 0310 	and.w	r3, r3, #16
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d01b      	beq.n	8004f58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0210 	mvn.w	r2, #16
 8004f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2208      	movs	r2, #8
 8004f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7fc f880 	bl	8001044 <HAL_TIM_IC_CaptureCallback>
 8004f44:	e005      	b.n	8004f52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fb08 	bl	800555c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 fb0f 	bl	8005570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00c      	beq.n	8004f7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d007      	beq.n	8004f7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f06f 0201 	mvn.w	r2, #1
 8004f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fae6 	bl	8005548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00c      	beq.n	8004fa0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d007      	beq.n	8004fa0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f001 f84e 	bl	800603c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00c      	beq.n	8004fc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d007      	beq.n	8004fc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fae0 	bl	8005584 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f003 0320 	and.w	r3, r3, #32
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00c      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f003 0320 	and.w	r3, r3, #32
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d007      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0220 	mvn.w	r2, #32
 8004fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f001 f820 	bl	8006028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fe8:	bf00      	nop
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005006:	2b01      	cmp	r3, #1
 8005008:	d101      	bne.n	800500e <HAL_TIM_IC_ConfigChannel+0x1e>
 800500a:	2302      	movs	r3, #2
 800500c:	e088      	b.n	8005120 <HAL_TIM_IC_ConfigChannel+0x130>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d11b      	bne.n	8005054 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800502c:	f000 fd5e 	bl	8005aec <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 020c 	bic.w	r2, r2, #12
 800503e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6999      	ldr	r1, [r3, #24]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	619a      	str	r2, [r3, #24]
 8005052:	e060      	b.n	8005116 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b04      	cmp	r3, #4
 8005058:	d11c      	bne.n	8005094 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800506a:	f000 fdd6 	bl	8005c1a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	699a      	ldr	r2, [r3, #24]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800507c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6999      	ldr	r1, [r3, #24]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	021a      	lsls	r2, r3, #8
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	619a      	str	r2, [r3, #24]
 8005092:	e040      	b.n	8005116 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b08      	cmp	r3, #8
 8005098:	d11b      	bne.n	80050d2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80050aa:	f000 fe23 	bl	8005cf4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69da      	ldr	r2, [r3, #28]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 020c 	bic.w	r2, r2, #12
 80050bc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	69d9      	ldr	r1, [r3, #28]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	61da      	str	r2, [r3, #28]
 80050d0:	e021      	b.n	8005116 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b0c      	cmp	r3, #12
 80050d6:	d11c      	bne.n	8005112 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80050e8:	f000 fe40 	bl	8005d6c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69da      	ldr	r2, [r3, #28]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80050fa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	69d9      	ldr	r1, [r3, #28]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	021a      	lsls	r2, r3, #8
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	61da      	str	r2, [r3, #28]
 8005110:	e001      	b.n	8005116 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800511e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005142:	2302      	movs	r3, #2
 8005144:	e0ae      	b.n	80052a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b0c      	cmp	r3, #12
 8005152:	f200 809f 	bhi.w	8005294 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005156:	a201      	add	r2, pc, #4	; (adr r2, 800515c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515c:	08005191 	.word	0x08005191
 8005160:	08005295 	.word	0x08005295
 8005164:	08005295 	.word	0x08005295
 8005168:	08005295 	.word	0x08005295
 800516c:	080051d1 	.word	0x080051d1
 8005170:	08005295 	.word	0x08005295
 8005174:	08005295 	.word	0x08005295
 8005178:	08005295 	.word	0x08005295
 800517c:	08005213 	.word	0x08005213
 8005180:	08005295 	.word	0x08005295
 8005184:	08005295 	.word	0x08005295
 8005188:	08005295 	.word	0x08005295
 800518c:	08005253 	.word	0x08005253
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fa8a 	bl	80056b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699a      	ldr	r2, [r3, #24]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0208 	orr.w	r2, r2, #8
 80051aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699a      	ldr	r2, [r3, #24]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0204 	bic.w	r2, r2, #4
 80051ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6999      	ldr	r1, [r3, #24]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	691a      	ldr	r2, [r3, #16]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	619a      	str	r2, [r3, #24]
      break;
 80051ce:	e064      	b.n	800529a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68b9      	ldr	r1, [r7, #8]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fad0 	bl	800577c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699a      	ldr	r2, [r3, #24]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6999      	ldr	r1, [r3, #24]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	021a      	lsls	r2, r3, #8
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	619a      	str	r2, [r3, #24]
      break;
 8005210:	e043      	b.n	800529a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fb1b 	bl	8005854 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69da      	ldr	r2, [r3, #28]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f042 0208 	orr.w	r2, r2, #8
 800522c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69da      	ldr	r2, [r3, #28]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0204 	bic.w	r2, r2, #4
 800523c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69d9      	ldr	r1, [r3, #28]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	691a      	ldr	r2, [r3, #16]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	61da      	str	r2, [r3, #28]
      break;
 8005250:	e023      	b.n	800529a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fb65 	bl	8005928 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69da      	ldr	r2, [r3, #28]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800526c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69da      	ldr	r2, [r3, #28]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800527c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69d9      	ldr	r1, [r3, #28]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	021a      	lsls	r2, r3, #8
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	61da      	str	r2, [r3, #28]
      break;
 8005292:	e002      	b.n	800529a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	75fb      	strb	r3, [r7, #23]
      break;
 8005298:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_TIM_ConfigClockSource+0x1c>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e0b4      	b.n	8005432 <HAL_TIM_ConfigClockSource+0x186>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005300:	d03e      	beq.n	8005380 <HAL_TIM_ConfigClockSource+0xd4>
 8005302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005306:	f200 8087 	bhi.w	8005418 <HAL_TIM_ConfigClockSource+0x16c>
 800530a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800530e:	f000 8086 	beq.w	800541e <HAL_TIM_ConfigClockSource+0x172>
 8005312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005316:	d87f      	bhi.n	8005418 <HAL_TIM_ConfigClockSource+0x16c>
 8005318:	2b70      	cmp	r3, #112	; 0x70
 800531a:	d01a      	beq.n	8005352 <HAL_TIM_ConfigClockSource+0xa6>
 800531c:	2b70      	cmp	r3, #112	; 0x70
 800531e:	d87b      	bhi.n	8005418 <HAL_TIM_ConfigClockSource+0x16c>
 8005320:	2b60      	cmp	r3, #96	; 0x60
 8005322:	d050      	beq.n	80053c6 <HAL_TIM_ConfigClockSource+0x11a>
 8005324:	2b60      	cmp	r3, #96	; 0x60
 8005326:	d877      	bhi.n	8005418 <HAL_TIM_ConfigClockSource+0x16c>
 8005328:	2b50      	cmp	r3, #80	; 0x50
 800532a:	d03c      	beq.n	80053a6 <HAL_TIM_ConfigClockSource+0xfa>
 800532c:	2b50      	cmp	r3, #80	; 0x50
 800532e:	d873      	bhi.n	8005418 <HAL_TIM_ConfigClockSource+0x16c>
 8005330:	2b40      	cmp	r3, #64	; 0x40
 8005332:	d058      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0x13a>
 8005334:	2b40      	cmp	r3, #64	; 0x40
 8005336:	d86f      	bhi.n	8005418 <HAL_TIM_ConfigClockSource+0x16c>
 8005338:	2b30      	cmp	r3, #48	; 0x30
 800533a:	d064      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x15a>
 800533c:	2b30      	cmp	r3, #48	; 0x30
 800533e:	d86b      	bhi.n	8005418 <HAL_TIM_ConfigClockSource+0x16c>
 8005340:	2b20      	cmp	r3, #32
 8005342:	d060      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x15a>
 8005344:	2b20      	cmp	r3, #32
 8005346:	d867      	bhi.n	8005418 <HAL_TIM_ConfigClockSource+0x16c>
 8005348:	2b00      	cmp	r3, #0
 800534a:	d05c      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x15a>
 800534c:	2b10      	cmp	r3, #16
 800534e:	d05a      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x15a>
 8005350:	e062      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005362:	f000 fd5b 	bl	8005e1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005374:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	609a      	str	r2, [r3, #8]
      break;
 800537e:	e04f      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005390:	f000 fd44 	bl	8005e1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689a      	ldr	r2, [r3, #8]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053a2:	609a      	str	r2, [r3, #8]
      break;
 80053a4:	e03c      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053b2:	461a      	mov	r2, r3
 80053b4:	f000 fc02 	bl	8005bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2150      	movs	r1, #80	; 0x50
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fd11 	bl	8005de6 <TIM_ITRx_SetConfig>
      break;
 80053c4:	e02c      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053d2:	461a      	mov	r2, r3
 80053d4:	f000 fc5e 	bl	8005c94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2160      	movs	r1, #96	; 0x60
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 fd01 	bl	8005de6 <TIM_ITRx_SetConfig>
      break;
 80053e4:	e01c      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f2:	461a      	mov	r2, r3
 80053f4:	f000 fbe2 	bl	8005bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2140      	movs	r1, #64	; 0x40
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fcf1 	bl	8005de6 <TIM_ITRx_SetConfig>
      break;
 8005404:	e00c      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4619      	mov	r1, r3
 8005410:	4610      	mov	r0, r2
 8005412:	f000 fce8 	bl	8005de6 <TIM_ITRx_SetConfig>
      break;
 8005416:	e003      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	73fb      	strb	r3, [r7, #15]
      break;
 800541c:	e000      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800541e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005430:	7bfb      	ldrb	r3, [r7, #15]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b082      	sub	sp, #8
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
 8005442:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800544a:	2b01      	cmp	r3, #1
 800544c:	d101      	bne.n	8005452 <HAL_TIM_SlaveConfigSynchro+0x18>
 800544e:	2302      	movs	r3, #2
 8005450:	e031      	b.n	80054b6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2202      	movs	r2, #2
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005462:	6839      	ldr	r1, [r7, #0]
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 faaf 	bl	80059c8 <TIM_SlaveTimer_SetConfig>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d009      	beq.n	8005484 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e018      	b.n	80054b6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005492:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80054a2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b0c      	cmp	r3, #12
 80054d2:	d831      	bhi.n	8005538 <HAL_TIM_ReadCapturedValue+0x78>
 80054d4:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <HAL_TIM_ReadCapturedValue+0x1c>)
 80054d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054da:	bf00      	nop
 80054dc:	08005511 	.word	0x08005511
 80054e0:	08005539 	.word	0x08005539
 80054e4:	08005539 	.word	0x08005539
 80054e8:	08005539 	.word	0x08005539
 80054ec:	0800551b 	.word	0x0800551b
 80054f0:	08005539 	.word	0x08005539
 80054f4:	08005539 	.word	0x08005539
 80054f8:	08005539 	.word	0x08005539
 80054fc:	08005525 	.word	0x08005525
 8005500:	08005539 	.word	0x08005539
 8005504:	08005539 	.word	0x08005539
 8005508:	08005539 	.word	0x08005539
 800550c:	0800552f 	.word	0x0800552f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005516:	60fb      	str	r3, [r7, #12]

      break;
 8005518:	e00f      	b.n	800553a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005520:	60fb      	str	r3, [r7, #12]

      break;
 8005522:	e00a      	b.n	800553a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552a:	60fb      	str	r3, [r7, #12]

      break;
 800552c:	e005      	b.n	800553a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005534:	60fb      	str	r3, [r7, #12]

      break;
 8005536:	e000      	b.n	800553a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005538:	bf00      	nop
  }

  return tmpreg;
 800553a:	68fb      	ldr	r3, [r7, #12]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a3a      	ldr	r2, [pc, #232]	; (8005694 <TIM_Base_SetConfig+0xfc>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00f      	beq.n	80055d0 <TIM_Base_SetConfig+0x38>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b6:	d00b      	beq.n	80055d0 <TIM_Base_SetConfig+0x38>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a37      	ldr	r2, [pc, #220]	; (8005698 <TIM_Base_SetConfig+0x100>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d007      	beq.n	80055d0 <TIM_Base_SetConfig+0x38>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a36      	ldr	r2, [pc, #216]	; (800569c <TIM_Base_SetConfig+0x104>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d003      	beq.n	80055d0 <TIM_Base_SetConfig+0x38>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a35      	ldr	r2, [pc, #212]	; (80056a0 <TIM_Base_SetConfig+0x108>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d108      	bne.n	80055e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a2b      	ldr	r2, [pc, #172]	; (8005694 <TIM_Base_SetConfig+0xfc>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d01b      	beq.n	8005622 <TIM_Base_SetConfig+0x8a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f0:	d017      	beq.n	8005622 <TIM_Base_SetConfig+0x8a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a28      	ldr	r2, [pc, #160]	; (8005698 <TIM_Base_SetConfig+0x100>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d013      	beq.n	8005622 <TIM_Base_SetConfig+0x8a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a27      	ldr	r2, [pc, #156]	; (800569c <TIM_Base_SetConfig+0x104>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00f      	beq.n	8005622 <TIM_Base_SetConfig+0x8a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a26      	ldr	r2, [pc, #152]	; (80056a0 <TIM_Base_SetConfig+0x108>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d00b      	beq.n	8005622 <TIM_Base_SetConfig+0x8a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a25      	ldr	r2, [pc, #148]	; (80056a4 <TIM_Base_SetConfig+0x10c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d007      	beq.n	8005622 <TIM_Base_SetConfig+0x8a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a24      	ldr	r2, [pc, #144]	; (80056a8 <TIM_Base_SetConfig+0x110>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d003      	beq.n	8005622 <TIM_Base_SetConfig+0x8a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a23      	ldr	r2, [pc, #140]	; (80056ac <TIM_Base_SetConfig+0x114>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d108      	bne.n	8005634 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4313      	orrs	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a0e      	ldr	r2, [pc, #56]	; (8005694 <TIM_Base_SetConfig+0xfc>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d103      	bne.n	8005668 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b01      	cmp	r3, #1
 8005678:	d105      	bne.n	8005686 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f023 0201 	bic.w	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	611a      	str	r2, [r3, #16]
  }
}
 8005686:	bf00      	nop
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40010000 	.word	0x40010000
 8005698:	40000400 	.word	0x40000400
 800569c:	40000800 	.word	0x40000800
 80056a0:	40000c00 	.word	0x40000c00
 80056a4:	40014000 	.word	0x40014000
 80056a8:	40014400 	.word	0x40014400
 80056ac:	40014800 	.word	0x40014800

080056b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	f023 0201 	bic.w	r2, r3, #1
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0303 	bic.w	r3, r3, #3
 80056e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f023 0302 	bic.w	r3, r3, #2
 80056f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a1c      	ldr	r2, [pc, #112]	; (8005778 <TIM_OC1_SetConfig+0xc8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d10c      	bne.n	8005726 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f023 0308 	bic.w	r3, r3, #8
 8005712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	4313      	orrs	r3, r2
 800571c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f023 0304 	bic.w	r3, r3, #4
 8005724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a13      	ldr	r2, [pc, #76]	; (8005778 <TIM_OC1_SetConfig+0xc8>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d111      	bne.n	8005752 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800573c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	621a      	str	r2, [r3, #32]
}
 800576c:	bf00      	nop
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	40010000 	.word	0x40010000

0800577c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	f023 0210 	bic.w	r2, r3, #16
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	021b      	lsls	r3, r3, #8
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f023 0320 	bic.w	r3, r3, #32
 80057c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a1e      	ldr	r2, [pc, #120]	; (8005850 <TIM_OC2_SetConfig+0xd4>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d10d      	bne.n	80057f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	011b      	lsls	r3, r3, #4
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a15      	ldr	r2, [pc, #84]	; (8005850 <TIM_OC2_SetConfig+0xd4>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d113      	bne.n	8005828 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005806:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800580e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	4313      	orrs	r3, r2
 800581a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	621a      	str	r2, [r3, #32]
}
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40010000 	.word	0x40010000

08005854 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0303 	bic.w	r3, r3, #3
 800588a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800589c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	021b      	lsls	r3, r3, #8
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a1d      	ldr	r2, [pc, #116]	; (8005924 <TIM_OC3_SetConfig+0xd0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d10d      	bne.n	80058ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	021b      	lsls	r3, r3, #8
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a14      	ldr	r2, [pc, #80]	; (8005924 <TIM_OC3_SetConfig+0xd0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d113      	bne.n	80058fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	621a      	str	r2, [r3, #32]
}
 8005918:	bf00      	nop
 800591a:	371c      	adds	r7, #28
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	40010000 	.word	0x40010000

08005928 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800595e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	021b      	lsls	r3, r3, #8
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005972:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	031b      	lsls	r3, r3, #12
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	4313      	orrs	r3, r2
 800597e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a10      	ldr	r2, [pc, #64]	; (80059c4 <TIM_OC4_SetConfig+0x9c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d109      	bne.n	800599c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800598e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	019b      	lsls	r3, r3, #6
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	4313      	orrs	r3, r2
 800599a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	621a      	str	r2, [r3, #32]
}
 80059b6:	bf00      	nop
 80059b8:	371c      	adds	r7, #28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	40010000 	.word	0x40010000

080059c8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f023 0307 	bic.w	r3, r3, #7
 80059f6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b70      	cmp	r3, #112	; 0x70
 8005a10:	d01a      	beq.n	8005a48 <TIM_SlaveTimer_SetConfig+0x80>
 8005a12:	2b70      	cmp	r3, #112	; 0x70
 8005a14:	d860      	bhi.n	8005ad8 <TIM_SlaveTimer_SetConfig+0x110>
 8005a16:	2b60      	cmp	r3, #96	; 0x60
 8005a18:	d054      	beq.n	8005ac4 <TIM_SlaveTimer_SetConfig+0xfc>
 8005a1a:	2b60      	cmp	r3, #96	; 0x60
 8005a1c:	d85c      	bhi.n	8005ad8 <TIM_SlaveTimer_SetConfig+0x110>
 8005a1e:	2b50      	cmp	r3, #80	; 0x50
 8005a20:	d046      	beq.n	8005ab0 <TIM_SlaveTimer_SetConfig+0xe8>
 8005a22:	2b50      	cmp	r3, #80	; 0x50
 8005a24:	d858      	bhi.n	8005ad8 <TIM_SlaveTimer_SetConfig+0x110>
 8005a26:	2b40      	cmp	r3, #64	; 0x40
 8005a28:	d019      	beq.n	8005a5e <TIM_SlaveTimer_SetConfig+0x96>
 8005a2a:	2b40      	cmp	r3, #64	; 0x40
 8005a2c:	d854      	bhi.n	8005ad8 <TIM_SlaveTimer_SetConfig+0x110>
 8005a2e:	2b30      	cmp	r3, #48	; 0x30
 8005a30:	d055      	beq.n	8005ade <TIM_SlaveTimer_SetConfig+0x116>
 8005a32:	2b30      	cmp	r3, #48	; 0x30
 8005a34:	d850      	bhi.n	8005ad8 <TIM_SlaveTimer_SetConfig+0x110>
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	d051      	beq.n	8005ade <TIM_SlaveTimer_SetConfig+0x116>
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	d84c      	bhi.n	8005ad8 <TIM_SlaveTimer_SetConfig+0x110>
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d04d      	beq.n	8005ade <TIM_SlaveTimer_SetConfig+0x116>
 8005a42:	2b10      	cmp	r3, #16
 8005a44:	d04b      	beq.n	8005ade <TIM_SlaveTimer_SetConfig+0x116>
 8005a46:	e047      	b.n	8005ad8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005a58:	f000 f9e0 	bl	8005e1c <TIM_ETR_SetConfig>
      break;
 8005a5c:	e040      	b.n	8005ae0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b05      	cmp	r3, #5
 8005a64:	d101      	bne.n	8005a6a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e03b      	b.n	8005ae2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6a1a      	ldr	r2, [r3, #32]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0201 	bic.w	r2, r2, #1
 8005a80:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a90:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	011b      	lsls	r3, r3, #4
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	621a      	str	r2, [r3, #32]
      break;
 8005aae:	e017      	b.n	8005ae0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005abc:	461a      	mov	r2, r3
 8005abe:	f000 f87d 	bl	8005bbc <TIM_TI1_ConfigInputStage>
      break;
 8005ac2:	e00d      	b.n	8005ae0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	f000 f8df 	bl	8005c94 <TIM_TI2_ConfigInputStage>
      break;
 8005ad6:	e003      	b.n	8005ae0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	75fb      	strb	r3, [r7, #23]
      break;
 8005adc:	e000      	b.n	8005ae0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005ade:	bf00      	nop
  }

  return status;
 8005ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b087      	sub	sp, #28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
 8005af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	f023 0201 	bic.w	r2, r3, #1
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4a24      	ldr	r2, [pc, #144]	; (8005ba8 <TIM_TI1_SetConfig+0xbc>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d013      	beq.n	8005b42 <TIM_TI1_SetConfig+0x56>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b20:	d00f      	beq.n	8005b42 <TIM_TI1_SetConfig+0x56>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4a21      	ldr	r2, [pc, #132]	; (8005bac <TIM_TI1_SetConfig+0xc0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00b      	beq.n	8005b42 <TIM_TI1_SetConfig+0x56>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4a20      	ldr	r2, [pc, #128]	; (8005bb0 <TIM_TI1_SetConfig+0xc4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d007      	beq.n	8005b42 <TIM_TI1_SetConfig+0x56>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	4a1f      	ldr	r2, [pc, #124]	; (8005bb4 <TIM_TI1_SetConfig+0xc8>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d003      	beq.n	8005b42 <TIM_TI1_SetConfig+0x56>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	4a1e      	ldr	r2, [pc, #120]	; (8005bb8 <TIM_TI1_SetConfig+0xcc>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d101      	bne.n	8005b46 <TIM_TI1_SetConfig+0x5a>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e000      	b.n	8005b48 <TIM_TI1_SetConfig+0x5c>
 8005b46:	2300      	movs	r3, #0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d008      	beq.n	8005b5e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f023 0303 	bic.w	r3, r3, #3
 8005b52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	e003      	b.n	8005b66 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f043 0301 	orr.w	r3, r3, #1
 8005b64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f023 030a 	bic.w	r3, r3, #10
 8005b80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f003 030a 	and.w	r3, r3, #10
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	621a      	str	r2, [r3, #32]
}
 8005b9a:	bf00      	nop
 8005b9c:	371c      	adds	r7, #28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	40010000 	.word	0x40010000
 8005bac:	40000400 	.word	0x40000400
 8005bb0:	40000800 	.word	0x40000800
 8005bb4:	40000c00 	.word	0x40000c00
 8005bb8:	40014000 	.word	0x40014000

08005bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	f023 0201 	bic.w	r2, r3, #1
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	011b      	lsls	r3, r3, #4
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f023 030a 	bic.w	r3, r3, #10
 8005bf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	621a      	str	r2, [r3, #32]
}
 8005c0e:	bf00      	nop
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b087      	sub	sp, #28
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	607a      	str	r2, [r7, #4]
 8005c26:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	f023 0210 	bic.w	r2, r3, #16
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	021b      	lsls	r3, r3, #8
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	031b      	lsls	r3, r3, #12
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c6c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	621a      	str	r2, [r3, #32]
}
 8005c88:	bf00      	nop
 8005c8a:	371c      	adds	r7, #28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	f023 0210 	bic.w	r2, r3, #16
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	031b      	lsls	r3, r3, #12
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cd0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	011b      	lsls	r3, r3, #4
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	621a      	str	r2, [r3, #32]
}
 8005ce8:	bf00      	nop
 8005cea:	371c      	adds	r7, #28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f023 0303 	bic.w	r3, r3, #3
 8005d20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d30:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005d44:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	021b      	lsls	r3, r3, #8
 8005d4a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	621a      	str	r2, [r3, #32]
}
 8005d60:	bf00      	nop
 8005d62:	371c      	adds	r7, #28
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	69db      	ldr	r3, [r3, #28]
 8005d90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d98:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	021b      	lsls	r3, r3, #8
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005daa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	031b      	lsls	r3, r3, #12
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005dbe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	031b      	lsls	r3, r3, #12
 8005dc4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	621a      	str	r2, [r3, #32]
}
 8005dda:	bf00      	nop
 8005ddc:	371c      	adds	r7, #28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b085      	sub	sp, #20
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	f043 0307 	orr.w	r3, r3, #7
 8005e08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	609a      	str	r2, [r3, #8]
}
 8005e10:	bf00      	nop
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
 8005e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	021a      	lsls	r2, r3, #8
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	609a      	str	r2, [r3, #8]
}
 8005e50:	bf00      	nop
 8005e52:	371c      	adds	r7, #28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f003 031f 	and.w	r3, r3, #31
 8005e6e:	2201      	movs	r2, #1
 8005e70:	fa02 f303 	lsl.w	r3, r2, r3
 8005e74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a1a      	ldr	r2, [r3, #32]
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	401a      	ands	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a1a      	ldr	r2, [r3, #32]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f003 031f 	and.w	r3, r3, #31
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	fa01 f303 	lsl.w	r3, r1, r3
 8005e94:	431a      	orrs	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	621a      	str	r2, [r3, #32]
}
 8005e9a:	bf00      	nop
 8005e9c:	371c      	adds	r7, #28
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
	...

08005ea8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d101      	bne.n	8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e050      	b.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1c      	ldr	r2, [pc, #112]	; (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d018      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f0c:	d013      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a18      	ldr	r2, [pc, #96]	; (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00e      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a16      	ldr	r2, [pc, #88]	; (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d009      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a15      	ldr	r2, [pc, #84]	; (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d004      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a13      	ldr	r2, [pc, #76]	; (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d10c      	bne.n	8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	40010000 	.word	0x40010000
 8005f74:	40000400 	.word	0x40000400
 8005f78:	40000800 	.word	0x40000800
 8005f7c:	40000c00 	.word	0x40000c00
 8005f80:	40014000 	.word	0x40014000

08005f84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d101      	bne.n	8005fa0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e03d      	b.n	800601c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e042      	b.n	80060e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d106      	bne.n	800607c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7fb fda8 	bl	8001bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2224      	movs	r2, #36	; 0x24
 8006080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006092:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fdbd 	bl	8006c14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	695a      	ldr	r2, [r3, #20]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2220      	movs	r2, #32
 80060dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08a      	sub	sp, #40	; 0x28
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	603b      	str	r3, [r7, #0]
 80060fc:	4613      	mov	r3, r2
 80060fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b20      	cmp	r3, #32
 800610e:	d175      	bne.n	80061fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d002      	beq.n	800611c <HAL_UART_Transmit+0x2c>
 8006116:	88fb      	ldrh	r3, [r7, #6]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e06e      	b.n	80061fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2221      	movs	r2, #33	; 0x21
 800612a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800612e:	f7fb ff4d 	bl	8001fcc <HAL_GetTick>
 8006132:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	88fa      	ldrh	r2, [r7, #6]
 8006138:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	88fa      	ldrh	r2, [r7, #6]
 800613e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006148:	d108      	bne.n	800615c <HAL_UART_Transmit+0x6c>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d104      	bne.n	800615c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006152:	2300      	movs	r3, #0
 8006154:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	61bb      	str	r3, [r7, #24]
 800615a:	e003      	b.n	8006164 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006160:	2300      	movs	r3, #0
 8006162:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006164:	e02e      	b.n	80061c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	2200      	movs	r2, #0
 800616e:	2180      	movs	r1, #128	; 0x80
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 fb1f 	bl	80067b4 <UART_WaitOnFlagUntilTimeout>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d005      	beq.n	8006188 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2220      	movs	r2, #32
 8006180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e03a      	b.n	80061fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10b      	bne.n	80061a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800619c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	3302      	adds	r3, #2
 80061a2:	61bb      	str	r3, [r7, #24]
 80061a4:	e007      	b.n	80061b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	781a      	ldrb	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	3301      	adds	r3, #1
 80061b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	3b01      	subs	r3, #1
 80061be:	b29a      	uxth	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1cb      	bne.n	8006166 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2200      	movs	r2, #0
 80061d6:	2140      	movs	r1, #64	; 0x40
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 faeb 	bl	80067b4 <UART_WaitOnFlagUntilTimeout>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d005      	beq.n	80061f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e006      	b.n	80061fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2220      	movs	r2, #32
 80061f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80061f8:	2300      	movs	r3, #0
 80061fa:	e000      	b.n	80061fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80061fc:	2302      	movs	r3, #2
  }
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3720      	adds	r7, #32
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	60f8      	str	r0, [r7, #12]
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	4613      	mov	r3, r2
 8006212:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b20      	cmp	r3, #32
 800621e:	d112      	bne.n	8006246 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <HAL_UART_Receive_IT+0x26>
 8006226:	88fb      	ldrh	r3, [r7, #6]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e00b      	b.n	8006248 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006236:	88fb      	ldrh	r3, [r7, #6]
 8006238:	461a      	mov	r2, r3
 800623a:	68b9      	ldr	r1, [r7, #8]
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 fb12 	bl	8006866 <UART_Start_Receive_IT>
 8006242:	4603      	mov	r3, r0
 8006244:	e000      	b.n	8006248 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006246:	2302      	movs	r3, #2
  }
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b0ba      	sub	sp, #232	; 0xe8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006276:	2300      	movs	r3, #0
 8006278:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800627c:	2300      	movs	r3, #0
 800627e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006286:	f003 030f 	and.w	r3, r3, #15
 800628a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800628e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10f      	bne.n	80062b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d009      	beq.n	80062b6 <HAL_UART_IRQHandler+0x66>
 80062a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fbf2 	bl	8006a98 <UART_Receive_IT>
      return;
 80062b4:	e25b      	b.n	800676e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80062b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 80de 	beq.w	800647c <HAL_UART_IRQHandler+0x22c>
 80062c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d106      	bne.n	80062da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 80d1 	beq.w	800647c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00b      	beq.n	80062fe <HAL_UART_IRQHandler+0xae>
 80062e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d005      	beq.n	80062fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f6:	f043 0201 	orr.w	r2, r3, #1
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00b      	beq.n	8006322 <HAL_UART_IRQHandler+0xd2>
 800630a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d005      	beq.n	8006322 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631a:	f043 0202 	orr.w	r2, r3, #2
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00b      	beq.n	8006346 <HAL_UART_IRQHandler+0xf6>
 800632e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d005      	beq.n	8006346 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800633e:	f043 0204 	orr.w	r2, r3, #4
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800634a:	f003 0308 	and.w	r3, r3, #8
 800634e:	2b00      	cmp	r3, #0
 8006350:	d011      	beq.n	8006376 <HAL_UART_IRQHandler+0x126>
 8006352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006356:	f003 0320 	and.w	r3, r3, #32
 800635a:	2b00      	cmp	r3, #0
 800635c:	d105      	bne.n	800636a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800635e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d005      	beq.n	8006376 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636e:	f043 0208 	orr.w	r2, r3, #8
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 81f2 	beq.w	8006764 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006384:	f003 0320 	and.w	r3, r3, #32
 8006388:	2b00      	cmp	r3, #0
 800638a:	d008      	beq.n	800639e <HAL_UART_IRQHandler+0x14e>
 800638c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006390:	f003 0320 	and.w	r3, r3, #32
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fb7d 	bl	8006a98 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a8:	2b40      	cmp	r3, #64	; 0x40
 80063aa:	bf0c      	ite	eq
 80063ac:	2301      	moveq	r3, #1
 80063ae:	2300      	movne	r3, #0
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d103      	bne.n	80063ca <HAL_UART_IRQHandler+0x17a>
 80063c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d04f      	beq.n	800646a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fa85 	bl	80068da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063da:	2b40      	cmp	r3, #64	; 0x40
 80063dc:	d141      	bne.n	8006462 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3314      	adds	r3, #20
 80063e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063ec:	e853 3f00 	ldrex	r3, [r3]
 80063f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80063f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3314      	adds	r3, #20
 8006406:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800640a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800640e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006412:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006416:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800641a:	e841 2300 	strex	r3, r2, [r1]
 800641e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1d9      	bne.n	80063de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642e:	2b00      	cmp	r3, #0
 8006430:	d013      	beq.n	800645a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006436:	4a7e      	ldr	r2, [pc, #504]	; (8006630 <HAL_UART_IRQHandler+0x3e0>)
 8006438:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643e:	4618      	mov	r0, r3
 8006440:	f7fc fbd1 	bl	8002be6 <HAL_DMA_Abort_IT>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d016      	beq.n	8006478 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006454:	4610      	mov	r0, r2
 8006456:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006458:	e00e      	b.n	8006478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f994 	bl	8006788 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006460:	e00a      	b.n	8006478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f990 	bl	8006788 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006468:	e006      	b.n	8006478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f98c 	bl	8006788 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006476:	e175      	b.n	8006764 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006478:	bf00      	nop
    return;
 800647a:	e173      	b.n	8006764 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006480:	2b01      	cmp	r3, #1
 8006482:	f040 814f 	bne.w	8006724 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800648a:	f003 0310 	and.w	r3, r3, #16
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 8148 	beq.w	8006724 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006498:	f003 0310 	and.w	r3, r3, #16
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 8141 	beq.w	8006724 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064a2:	2300      	movs	r3, #0
 80064a4:	60bb      	str	r3, [r7, #8]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60bb      	str	r3, [r7, #8]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	60bb      	str	r3, [r7, #8]
 80064b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c2:	2b40      	cmp	r3, #64	; 0x40
 80064c4:	f040 80b6 	bne.w	8006634 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 8145 	beq.w	8006768 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064e6:	429a      	cmp	r2, r3
 80064e8:	f080 813e 	bcs.w	8006768 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064fe:	f000 8088 	beq.w	8006612 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	330c      	adds	r3, #12
 8006508:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006510:	e853 3f00 	ldrex	r3, [r3]
 8006514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006518:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800651c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006520:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	330c      	adds	r3, #12
 800652a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800652e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006532:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800653a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800653e:	e841 2300 	strex	r3, r2, [r1]
 8006542:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006546:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1d9      	bne.n	8006502 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3314      	adds	r3, #20
 8006554:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006556:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006558:	e853 3f00 	ldrex	r3, [r3]
 800655c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800655e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006560:	f023 0301 	bic.w	r3, r3, #1
 8006564:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3314      	adds	r3, #20
 800656e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006572:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006576:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006578:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800657a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800657e:	e841 2300 	strex	r3, r2, [r1]
 8006582:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006584:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1e1      	bne.n	800654e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3314      	adds	r3, #20
 8006590:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006594:	e853 3f00 	ldrex	r3, [r3]
 8006598:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800659a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800659c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3314      	adds	r3, #20
 80065aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065b6:	e841 2300 	strex	r3, r2, [r1]
 80065ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e3      	bne.n	800658a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	330c      	adds	r3, #12
 80065d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065da:	e853 3f00 	ldrex	r3, [r3]
 80065de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e2:	f023 0310 	bic.w	r3, r3, #16
 80065e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	330c      	adds	r3, #12
 80065f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80065f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80065f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065fc:	e841 2300 	strex	r3, r2, [r1]
 8006600:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1e3      	bne.n	80065d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660c:	4618      	mov	r0, r3
 800660e:	f7fc fa7a 	bl	8002b06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2202      	movs	r2, #2
 8006616:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006620:	b29b      	uxth	r3, r3
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	b29b      	uxth	r3, r3
 8006626:	4619      	mov	r1, r3
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f8b7 	bl	800679c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800662e:	e09b      	b.n	8006768 <HAL_UART_IRQHandler+0x518>
 8006630:	080069a1 	.word	0x080069a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800663c:	b29b      	uxth	r3, r3
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006648:	b29b      	uxth	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 808e 	beq.w	800676c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006650:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 8089 	beq.w	800676c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	330c      	adds	r3, #12
 8006660:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800666a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006670:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	330c      	adds	r3, #12
 800667a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800667e:	647a      	str	r2, [r7, #68]	; 0x44
 8006680:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006684:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800668c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e3      	bne.n	800665a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3314      	adds	r3, #20
 8006698:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	623b      	str	r3, [r7, #32]
   return(result);
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	f023 0301 	bic.w	r3, r3, #1
 80066a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3314      	adds	r3, #20
 80066b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066b6:	633a      	str	r2, [r7, #48]	; 0x30
 80066b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e3      	bne.n	8006692 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	330c      	adds	r3, #12
 80066de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	e853 3f00 	ldrex	r3, [r3]
 80066e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0310 	bic.w	r3, r3, #16
 80066ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	330c      	adds	r3, #12
 80066f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80066fc:	61fa      	str	r2, [r7, #28]
 80066fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006700:	69b9      	ldr	r1, [r7, #24]
 8006702:	69fa      	ldr	r2, [r7, #28]
 8006704:	e841 2300 	strex	r3, r2, [r1]
 8006708:	617b      	str	r3, [r7, #20]
   return(result);
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e3      	bne.n	80066d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006716:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f83d 	bl	800679c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006722:	e023      	b.n	800676c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800672c:	2b00      	cmp	r3, #0
 800672e:	d009      	beq.n	8006744 <HAL_UART_IRQHandler+0x4f4>
 8006730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f943 	bl	80069c8 <UART_Transmit_IT>
    return;
 8006742:	e014      	b.n	800676e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00e      	beq.n	800676e <HAL_UART_IRQHandler+0x51e>
 8006750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006758:	2b00      	cmp	r3, #0
 800675a:	d008      	beq.n	800676e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f983 	bl	8006a68 <UART_EndTransmit_IT>
    return;
 8006762:	e004      	b.n	800676e <HAL_UART_IRQHandler+0x51e>
    return;
 8006764:	bf00      	nop
 8006766:	e002      	b.n	800676e <HAL_UART_IRQHandler+0x51e>
      return;
 8006768:	bf00      	nop
 800676a:	e000      	b.n	800676e <HAL_UART_IRQHandler+0x51e>
      return;
 800676c:	bf00      	nop
  }
}
 800676e:	37e8      	adds	r7, #232	; 0xe8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	603b      	str	r3, [r7, #0]
 80067c0:	4613      	mov	r3, r2
 80067c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067c4:	e03b      	b.n	800683e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067cc:	d037      	beq.n	800683e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ce:	f7fb fbfd 	bl	8001fcc <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	6a3a      	ldr	r2, [r7, #32]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d302      	bcc.n	80067e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e03a      	b.n	800685e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f003 0304 	and.w	r3, r3, #4
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d023      	beq.n	800683e <UART_WaitOnFlagUntilTimeout+0x8a>
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b80      	cmp	r3, #128	; 0x80
 80067fa:	d020      	beq.n	800683e <UART_WaitOnFlagUntilTimeout+0x8a>
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	2b40      	cmp	r3, #64	; 0x40
 8006800:	d01d      	beq.n	800683e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0308 	and.w	r3, r3, #8
 800680c:	2b08      	cmp	r3, #8
 800680e:	d116      	bne.n	800683e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006810:	2300      	movs	r3, #0
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	617b      	str	r3, [r7, #20]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 f857 	bl	80068da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2208      	movs	r2, #8
 8006830:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e00f      	b.n	800685e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	4013      	ands	r3, r2
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	429a      	cmp	r2, r3
 800684c:	bf0c      	ite	eq
 800684e:	2301      	moveq	r3, #1
 8006850:	2300      	movne	r3, #0
 8006852:	b2db      	uxtb	r3, r3
 8006854:	461a      	mov	r2, r3
 8006856:	79fb      	ldrb	r3, [r7, #7]
 8006858:	429a      	cmp	r2, r3
 800685a:	d0b4      	beq.n	80067c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006866:	b480      	push	{r7}
 8006868:	b085      	sub	sp, #20
 800686a:	af00      	add	r7, sp, #0
 800686c:	60f8      	str	r0, [r7, #12]
 800686e:	60b9      	str	r1, [r7, #8]
 8006870:	4613      	mov	r3, r2
 8006872:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	88fa      	ldrh	r2, [r7, #6]
 800687e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	88fa      	ldrh	r2, [r7, #6]
 8006884:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2222      	movs	r2, #34	; 0x22
 8006890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d007      	beq.n	80068ac <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068aa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	695a      	ldr	r2, [r3, #20]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0201 	orr.w	r2, r2, #1
 80068ba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68da      	ldr	r2, [r3, #12]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0220 	orr.w	r2, r2, #32
 80068ca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068da:	b480      	push	{r7}
 80068dc:	b095      	sub	sp, #84	; 0x54
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	330c      	adds	r3, #12
 80068e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ec:	e853 3f00 	ldrex	r3, [r3]
 80068f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	330c      	adds	r3, #12
 8006900:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006902:	643a      	str	r2, [r7, #64]	; 0x40
 8006904:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006906:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006908:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1e5      	bne.n	80068e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3314      	adds	r3, #20
 800691c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	e853 3f00 	ldrex	r3, [r3]
 8006924:	61fb      	str	r3, [r7, #28]
   return(result);
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	f023 0301 	bic.w	r3, r3, #1
 800692c:	64bb      	str	r3, [r7, #72]	; 0x48
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3314      	adds	r3, #20
 8006934:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006936:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006938:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800693c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800693e:	e841 2300 	strex	r3, r2, [r1]
 8006942:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1e5      	bne.n	8006916 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694e:	2b01      	cmp	r3, #1
 8006950:	d119      	bne.n	8006986 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	330c      	adds	r3, #12
 8006958:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	60bb      	str	r3, [r7, #8]
   return(result);
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f023 0310 	bic.w	r3, r3, #16
 8006968:	647b      	str	r3, [r7, #68]	; 0x44
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	330c      	adds	r3, #12
 8006970:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006972:	61ba      	str	r2, [r7, #24]
 8006974:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	6979      	ldr	r1, [r7, #20]
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	613b      	str	r3, [r7, #16]
   return(result);
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e5      	bne.n	8006952 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2220      	movs	r2, #32
 800698a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006994:	bf00      	nop
 8006996:	3754      	adds	r7, #84	; 0x54
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f7ff fee4 	bl	8006788 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069c0:	bf00      	nop
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b21      	cmp	r3, #33	; 0x21
 80069da:	d13e      	bne.n	8006a5a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e4:	d114      	bne.n	8006a10 <UART_Transmit_IT+0x48>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d110      	bne.n	8006a10 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	461a      	mov	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a02:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	1c9a      	adds	r2, r3, #2
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	621a      	str	r2, [r3, #32]
 8006a0e:	e008      	b.n	8006a22 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	1c59      	adds	r1, r3, #1
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	6211      	str	r1, [r2, #32]
 8006a1a:	781a      	ldrb	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	4619      	mov	r1, r3
 8006a30:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10f      	bne.n	8006a56 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68da      	ldr	r2, [r3, #12]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a44:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a54:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	e000      	b.n	8006a5c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a5a:	2302      	movs	r3, #2
  }
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68da      	ldr	r2, [r3, #12]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a7e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2220      	movs	r2, #32
 8006a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7ff fe73 	bl	8006774 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08c      	sub	sp, #48	; 0x30
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b22      	cmp	r3, #34	; 0x22
 8006aaa:	f040 80ae 	bne.w	8006c0a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab6:	d117      	bne.n	8006ae8 <UART_Receive_IT+0x50>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d113      	bne.n	8006ae8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae0:	1c9a      	adds	r2, r3, #2
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	629a      	str	r2, [r3, #40]	; 0x28
 8006ae6:	e026      	b.n	8006b36 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006aee:	2300      	movs	r3, #0
 8006af0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006afa:	d007      	beq.n	8006b0c <UART_Receive_IT+0x74>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10a      	bne.n	8006b1a <UART_Receive_IT+0x82>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d106      	bne.n	8006b1a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b16:	701a      	strb	r2, [r3, #0]
 8006b18:	e008      	b.n	8006b2c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b30:	1c5a      	adds	r2, r3, #1
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	4619      	mov	r1, r3
 8006b44:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d15d      	bne.n	8006c06 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68da      	ldr	r2, [r3, #12]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f022 0220 	bic.w	r2, r2, #32
 8006b58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68da      	ldr	r2, [r3, #12]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	695a      	ldr	r2, [r3, #20]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 0201 	bic.w	r2, r2, #1
 8006b78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d135      	bne.n	8006bfc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	330c      	adds	r3, #12
 8006b9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f023 0310 	bic.w	r3, r3, #16
 8006bac:	627b      	str	r3, [r7, #36]	; 0x24
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	330c      	adds	r3, #12
 8006bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb6:	623a      	str	r2, [r7, #32]
 8006bb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bba:	69f9      	ldr	r1, [r7, #28]
 8006bbc:	6a3a      	ldr	r2, [r7, #32]
 8006bbe:	e841 2300 	strex	r3, r2, [r1]
 8006bc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1e5      	bne.n	8006b96 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	2b10      	cmp	r3, #16
 8006bd6:	d10a      	bne.n	8006bee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bd8:	2300      	movs	r3, #0
 8006bda:	60fb      	str	r3, [r7, #12]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7ff fdd1 	bl	800679c <HAL_UARTEx_RxEventCallback>
 8006bfa:	e002      	b.n	8006c02 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7fa fa4b 	bl	8001098 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	e002      	b.n	8006c0c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	e000      	b.n	8006c0c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006c0a:	2302      	movs	r3, #2
  }
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3730      	adds	r7, #48	; 0x30
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c18:	b0c0      	sub	sp, #256	; 0x100
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c30:	68d9      	ldr	r1, [r3, #12]
 8006c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	ea40 0301 	orr.w	r3, r0, r1
 8006c3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	431a      	orrs	r2, r3
 8006c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c6c:	f021 010c 	bic.w	r1, r1, #12
 8006c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c7a:	430b      	orrs	r3, r1
 8006c7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c8e:	6999      	ldr	r1, [r3, #24]
 8006c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	ea40 0301 	orr.w	r3, r0, r1
 8006c9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	4b8f      	ldr	r3, [pc, #572]	; (8006ee0 <UART_SetConfig+0x2cc>)
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d005      	beq.n	8006cb4 <UART_SetConfig+0xa0>
 8006ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	4b8d      	ldr	r3, [pc, #564]	; (8006ee4 <UART_SetConfig+0x2d0>)
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d104      	bne.n	8006cbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cb4:	f7fd fdd6 	bl	8004864 <HAL_RCC_GetPCLK2Freq>
 8006cb8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006cbc:	e003      	b.n	8006cc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cbe:	f7fd fdbd 	bl	800483c <HAL_RCC_GetPCLK1Freq>
 8006cc2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cca:	69db      	ldr	r3, [r3, #28]
 8006ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cd0:	f040 810c 	bne.w	8006eec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006cde:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006ce2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006ce6:	4622      	mov	r2, r4
 8006ce8:	462b      	mov	r3, r5
 8006cea:	1891      	adds	r1, r2, r2
 8006cec:	65b9      	str	r1, [r7, #88]	; 0x58
 8006cee:	415b      	adcs	r3, r3
 8006cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cf2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	eb12 0801 	adds.w	r8, r2, r1
 8006cfc:	4629      	mov	r1, r5
 8006cfe:	eb43 0901 	adc.w	r9, r3, r1
 8006d02:	f04f 0200 	mov.w	r2, #0
 8006d06:	f04f 0300 	mov.w	r3, #0
 8006d0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d16:	4690      	mov	r8, r2
 8006d18:	4699      	mov	r9, r3
 8006d1a:	4623      	mov	r3, r4
 8006d1c:	eb18 0303 	adds.w	r3, r8, r3
 8006d20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d24:	462b      	mov	r3, r5
 8006d26:	eb49 0303 	adc.w	r3, r9, r3
 8006d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d42:	460b      	mov	r3, r1
 8006d44:	18db      	adds	r3, r3, r3
 8006d46:	653b      	str	r3, [r7, #80]	; 0x50
 8006d48:	4613      	mov	r3, r2
 8006d4a:	eb42 0303 	adc.w	r3, r2, r3
 8006d4e:	657b      	str	r3, [r7, #84]	; 0x54
 8006d50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d58:	f7f9 ffae 	bl	8000cb8 <__aeabi_uldivmod>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4b61      	ldr	r3, [pc, #388]	; (8006ee8 <UART_SetConfig+0x2d4>)
 8006d62:	fba3 2302 	umull	r2, r3, r3, r2
 8006d66:	095b      	lsrs	r3, r3, #5
 8006d68:	011c      	lsls	r4, r3, #4
 8006d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d7c:	4642      	mov	r2, r8
 8006d7e:	464b      	mov	r3, r9
 8006d80:	1891      	adds	r1, r2, r2
 8006d82:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d84:	415b      	adcs	r3, r3
 8006d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d8c:	4641      	mov	r1, r8
 8006d8e:	eb12 0a01 	adds.w	sl, r2, r1
 8006d92:	4649      	mov	r1, r9
 8006d94:	eb43 0b01 	adc.w	fp, r3, r1
 8006d98:	f04f 0200 	mov.w	r2, #0
 8006d9c:	f04f 0300 	mov.w	r3, #0
 8006da0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006da4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006da8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dac:	4692      	mov	sl, r2
 8006dae:	469b      	mov	fp, r3
 8006db0:	4643      	mov	r3, r8
 8006db2:	eb1a 0303 	adds.w	r3, sl, r3
 8006db6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006dba:	464b      	mov	r3, r9
 8006dbc:	eb4b 0303 	adc.w	r3, fp, r3
 8006dc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006dd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006dd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006dd8:	460b      	mov	r3, r1
 8006dda:	18db      	adds	r3, r3, r3
 8006ddc:	643b      	str	r3, [r7, #64]	; 0x40
 8006dde:	4613      	mov	r3, r2
 8006de0:	eb42 0303 	adc.w	r3, r2, r3
 8006de4:	647b      	str	r3, [r7, #68]	; 0x44
 8006de6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006dea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006dee:	f7f9 ff63 	bl	8000cb8 <__aeabi_uldivmod>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4611      	mov	r1, r2
 8006df8:	4b3b      	ldr	r3, [pc, #236]	; (8006ee8 <UART_SetConfig+0x2d4>)
 8006dfa:	fba3 2301 	umull	r2, r3, r3, r1
 8006dfe:	095b      	lsrs	r3, r3, #5
 8006e00:	2264      	movs	r2, #100	; 0x64
 8006e02:	fb02 f303 	mul.w	r3, r2, r3
 8006e06:	1acb      	subs	r3, r1, r3
 8006e08:	00db      	lsls	r3, r3, #3
 8006e0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006e0e:	4b36      	ldr	r3, [pc, #216]	; (8006ee8 <UART_SetConfig+0x2d4>)
 8006e10:	fba3 2302 	umull	r2, r3, r3, r2
 8006e14:	095b      	lsrs	r3, r3, #5
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e1c:	441c      	add	r4, r3
 8006e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e22:	2200      	movs	r2, #0
 8006e24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e30:	4642      	mov	r2, r8
 8006e32:	464b      	mov	r3, r9
 8006e34:	1891      	adds	r1, r2, r2
 8006e36:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e38:	415b      	adcs	r3, r3
 8006e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e40:	4641      	mov	r1, r8
 8006e42:	1851      	adds	r1, r2, r1
 8006e44:	6339      	str	r1, [r7, #48]	; 0x30
 8006e46:	4649      	mov	r1, r9
 8006e48:	414b      	adcs	r3, r1
 8006e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e4c:	f04f 0200 	mov.w	r2, #0
 8006e50:	f04f 0300 	mov.w	r3, #0
 8006e54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e58:	4659      	mov	r1, fp
 8006e5a:	00cb      	lsls	r3, r1, #3
 8006e5c:	4651      	mov	r1, sl
 8006e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e62:	4651      	mov	r1, sl
 8006e64:	00ca      	lsls	r2, r1, #3
 8006e66:	4610      	mov	r0, r2
 8006e68:	4619      	mov	r1, r3
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	4642      	mov	r2, r8
 8006e6e:	189b      	adds	r3, r3, r2
 8006e70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e74:	464b      	mov	r3, r9
 8006e76:	460a      	mov	r2, r1
 8006e78:	eb42 0303 	adc.w	r3, r2, r3
 8006e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e94:	460b      	mov	r3, r1
 8006e96:	18db      	adds	r3, r3, r3
 8006e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	eb42 0303 	adc.w	r3, r2, r3
 8006ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ea2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ea6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006eaa:	f7f9 ff05 	bl	8000cb8 <__aeabi_uldivmod>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4b0d      	ldr	r3, [pc, #52]	; (8006ee8 <UART_SetConfig+0x2d4>)
 8006eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8006eb8:	095b      	lsrs	r3, r3, #5
 8006eba:	2164      	movs	r1, #100	; 0x64
 8006ebc:	fb01 f303 	mul.w	r3, r1, r3
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	00db      	lsls	r3, r3, #3
 8006ec4:	3332      	adds	r3, #50	; 0x32
 8006ec6:	4a08      	ldr	r2, [pc, #32]	; (8006ee8 <UART_SetConfig+0x2d4>)
 8006ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ecc:	095b      	lsrs	r3, r3, #5
 8006ece:	f003 0207 	and.w	r2, r3, #7
 8006ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4422      	add	r2, r4
 8006eda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006edc:	e106      	b.n	80070ec <UART_SetConfig+0x4d8>
 8006ede:	bf00      	nop
 8006ee0:	40011000 	.word	0x40011000
 8006ee4:	40011400 	.word	0x40011400
 8006ee8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ef6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006efa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006efe:	4642      	mov	r2, r8
 8006f00:	464b      	mov	r3, r9
 8006f02:	1891      	adds	r1, r2, r2
 8006f04:	6239      	str	r1, [r7, #32]
 8006f06:	415b      	adcs	r3, r3
 8006f08:	627b      	str	r3, [r7, #36]	; 0x24
 8006f0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f0e:	4641      	mov	r1, r8
 8006f10:	1854      	adds	r4, r2, r1
 8006f12:	4649      	mov	r1, r9
 8006f14:	eb43 0501 	adc.w	r5, r3, r1
 8006f18:	f04f 0200 	mov.w	r2, #0
 8006f1c:	f04f 0300 	mov.w	r3, #0
 8006f20:	00eb      	lsls	r3, r5, #3
 8006f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f26:	00e2      	lsls	r2, r4, #3
 8006f28:	4614      	mov	r4, r2
 8006f2a:	461d      	mov	r5, r3
 8006f2c:	4643      	mov	r3, r8
 8006f2e:	18e3      	adds	r3, r4, r3
 8006f30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f34:	464b      	mov	r3, r9
 8006f36:	eb45 0303 	adc.w	r3, r5, r3
 8006f3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f4e:	f04f 0200 	mov.w	r2, #0
 8006f52:	f04f 0300 	mov.w	r3, #0
 8006f56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	008b      	lsls	r3, r1, #2
 8006f5e:	4621      	mov	r1, r4
 8006f60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f64:	4621      	mov	r1, r4
 8006f66:	008a      	lsls	r2, r1, #2
 8006f68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f6c:	f7f9 fea4 	bl	8000cb8 <__aeabi_uldivmod>
 8006f70:	4602      	mov	r2, r0
 8006f72:	460b      	mov	r3, r1
 8006f74:	4b60      	ldr	r3, [pc, #384]	; (80070f8 <UART_SetConfig+0x4e4>)
 8006f76:	fba3 2302 	umull	r2, r3, r3, r2
 8006f7a:	095b      	lsrs	r3, r3, #5
 8006f7c:	011c      	lsls	r4, r3, #4
 8006f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f82:	2200      	movs	r2, #0
 8006f84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f90:	4642      	mov	r2, r8
 8006f92:	464b      	mov	r3, r9
 8006f94:	1891      	adds	r1, r2, r2
 8006f96:	61b9      	str	r1, [r7, #24]
 8006f98:	415b      	adcs	r3, r3
 8006f9a:	61fb      	str	r3, [r7, #28]
 8006f9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fa0:	4641      	mov	r1, r8
 8006fa2:	1851      	adds	r1, r2, r1
 8006fa4:	6139      	str	r1, [r7, #16]
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	414b      	adcs	r3, r1
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	f04f 0200 	mov.w	r2, #0
 8006fb0:	f04f 0300 	mov.w	r3, #0
 8006fb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fb8:	4659      	mov	r1, fp
 8006fba:	00cb      	lsls	r3, r1, #3
 8006fbc:	4651      	mov	r1, sl
 8006fbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fc2:	4651      	mov	r1, sl
 8006fc4:	00ca      	lsls	r2, r1, #3
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4603      	mov	r3, r0
 8006fcc:	4642      	mov	r2, r8
 8006fce:	189b      	adds	r3, r3, r2
 8006fd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fd4:	464b      	mov	r3, r9
 8006fd6:	460a      	mov	r2, r1
 8006fd8:	eb42 0303 	adc.w	r3, r2, r3
 8006fdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006fec:	f04f 0200 	mov.w	r2, #0
 8006ff0:	f04f 0300 	mov.w	r3, #0
 8006ff4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ff8:	4649      	mov	r1, r9
 8006ffa:	008b      	lsls	r3, r1, #2
 8006ffc:	4641      	mov	r1, r8
 8006ffe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007002:	4641      	mov	r1, r8
 8007004:	008a      	lsls	r2, r1, #2
 8007006:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800700a:	f7f9 fe55 	bl	8000cb8 <__aeabi_uldivmod>
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	4611      	mov	r1, r2
 8007014:	4b38      	ldr	r3, [pc, #224]	; (80070f8 <UART_SetConfig+0x4e4>)
 8007016:	fba3 2301 	umull	r2, r3, r3, r1
 800701a:	095b      	lsrs	r3, r3, #5
 800701c:	2264      	movs	r2, #100	; 0x64
 800701e:	fb02 f303 	mul.w	r3, r2, r3
 8007022:	1acb      	subs	r3, r1, r3
 8007024:	011b      	lsls	r3, r3, #4
 8007026:	3332      	adds	r3, #50	; 0x32
 8007028:	4a33      	ldr	r2, [pc, #204]	; (80070f8 <UART_SetConfig+0x4e4>)
 800702a:	fba2 2303 	umull	r2, r3, r2, r3
 800702e:	095b      	lsrs	r3, r3, #5
 8007030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007034:	441c      	add	r4, r3
 8007036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800703a:	2200      	movs	r2, #0
 800703c:	673b      	str	r3, [r7, #112]	; 0x70
 800703e:	677a      	str	r2, [r7, #116]	; 0x74
 8007040:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007044:	4642      	mov	r2, r8
 8007046:	464b      	mov	r3, r9
 8007048:	1891      	adds	r1, r2, r2
 800704a:	60b9      	str	r1, [r7, #8]
 800704c:	415b      	adcs	r3, r3
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007054:	4641      	mov	r1, r8
 8007056:	1851      	adds	r1, r2, r1
 8007058:	6039      	str	r1, [r7, #0]
 800705a:	4649      	mov	r1, r9
 800705c:	414b      	adcs	r3, r1
 800705e:	607b      	str	r3, [r7, #4]
 8007060:	f04f 0200 	mov.w	r2, #0
 8007064:	f04f 0300 	mov.w	r3, #0
 8007068:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800706c:	4659      	mov	r1, fp
 800706e:	00cb      	lsls	r3, r1, #3
 8007070:	4651      	mov	r1, sl
 8007072:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007076:	4651      	mov	r1, sl
 8007078:	00ca      	lsls	r2, r1, #3
 800707a:	4610      	mov	r0, r2
 800707c:	4619      	mov	r1, r3
 800707e:	4603      	mov	r3, r0
 8007080:	4642      	mov	r2, r8
 8007082:	189b      	adds	r3, r3, r2
 8007084:	66bb      	str	r3, [r7, #104]	; 0x68
 8007086:	464b      	mov	r3, r9
 8007088:	460a      	mov	r2, r1
 800708a:	eb42 0303 	adc.w	r3, r2, r3
 800708e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	663b      	str	r3, [r7, #96]	; 0x60
 800709a:	667a      	str	r2, [r7, #100]	; 0x64
 800709c:	f04f 0200 	mov.w	r2, #0
 80070a0:	f04f 0300 	mov.w	r3, #0
 80070a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80070a8:	4649      	mov	r1, r9
 80070aa:	008b      	lsls	r3, r1, #2
 80070ac:	4641      	mov	r1, r8
 80070ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070b2:	4641      	mov	r1, r8
 80070b4:	008a      	lsls	r2, r1, #2
 80070b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80070ba:	f7f9 fdfd 	bl	8000cb8 <__aeabi_uldivmod>
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	4b0d      	ldr	r3, [pc, #52]	; (80070f8 <UART_SetConfig+0x4e4>)
 80070c4:	fba3 1302 	umull	r1, r3, r3, r2
 80070c8:	095b      	lsrs	r3, r3, #5
 80070ca:	2164      	movs	r1, #100	; 0x64
 80070cc:	fb01 f303 	mul.w	r3, r1, r3
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	011b      	lsls	r3, r3, #4
 80070d4:	3332      	adds	r3, #50	; 0x32
 80070d6:	4a08      	ldr	r2, [pc, #32]	; (80070f8 <UART_SetConfig+0x4e4>)
 80070d8:	fba2 2303 	umull	r2, r3, r2, r3
 80070dc:	095b      	lsrs	r3, r3, #5
 80070de:	f003 020f 	and.w	r2, r3, #15
 80070e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4422      	add	r2, r4
 80070ea:	609a      	str	r2, [r3, #8]
}
 80070ec:	bf00      	nop
 80070ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80070f2:	46bd      	mov	sp, r7
 80070f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070f8:	51eb851f 	.word	0x51eb851f

080070fc <__cvt>:
 80070fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007100:	ec55 4b10 	vmov	r4, r5, d0
 8007104:	2d00      	cmp	r5, #0
 8007106:	460e      	mov	r6, r1
 8007108:	4619      	mov	r1, r3
 800710a:	462b      	mov	r3, r5
 800710c:	bfbb      	ittet	lt
 800710e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007112:	461d      	movlt	r5, r3
 8007114:	2300      	movge	r3, #0
 8007116:	232d      	movlt	r3, #45	; 0x2d
 8007118:	700b      	strb	r3, [r1, #0]
 800711a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800711c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007120:	4691      	mov	r9, r2
 8007122:	f023 0820 	bic.w	r8, r3, #32
 8007126:	bfbc      	itt	lt
 8007128:	4622      	movlt	r2, r4
 800712a:	4614      	movlt	r4, r2
 800712c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007130:	d005      	beq.n	800713e <__cvt+0x42>
 8007132:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007136:	d100      	bne.n	800713a <__cvt+0x3e>
 8007138:	3601      	adds	r6, #1
 800713a:	2102      	movs	r1, #2
 800713c:	e000      	b.n	8007140 <__cvt+0x44>
 800713e:	2103      	movs	r1, #3
 8007140:	ab03      	add	r3, sp, #12
 8007142:	9301      	str	r3, [sp, #4]
 8007144:	ab02      	add	r3, sp, #8
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	ec45 4b10 	vmov	d0, r4, r5
 800714c:	4653      	mov	r3, sl
 800714e:	4632      	mov	r2, r6
 8007150:	f001 f87e 	bl	8008250 <_dtoa_r>
 8007154:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007158:	4607      	mov	r7, r0
 800715a:	d102      	bne.n	8007162 <__cvt+0x66>
 800715c:	f019 0f01 	tst.w	r9, #1
 8007160:	d022      	beq.n	80071a8 <__cvt+0xac>
 8007162:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007166:	eb07 0906 	add.w	r9, r7, r6
 800716a:	d110      	bne.n	800718e <__cvt+0x92>
 800716c:	783b      	ldrb	r3, [r7, #0]
 800716e:	2b30      	cmp	r3, #48	; 0x30
 8007170:	d10a      	bne.n	8007188 <__cvt+0x8c>
 8007172:	2200      	movs	r2, #0
 8007174:	2300      	movs	r3, #0
 8007176:	4620      	mov	r0, r4
 8007178:	4629      	mov	r1, r5
 800717a:	f7f9 fcbd 	bl	8000af8 <__aeabi_dcmpeq>
 800717e:	b918      	cbnz	r0, 8007188 <__cvt+0x8c>
 8007180:	f1c6 0601 	rsb	r6, r6, #1
 8007184:	f8ca 6000 	str.w	r6, [sl]
 8007188:	f8da 3000 	ldr.w	r3, [sl]
 800718c:	4499      	add	r9, r3
 800718e:	2200      	movs	r2, #0
 8007190:	2300      	movs	r3, #0
 8007192:	4620      	mov	r0, r4
 8007194:	4629      	mov	r1, r5
 8007196:	f7f9 fcaf 	bl	8000af8 <__aeabi_dcmpeq>
 800719a:	b108      	cbz	r0, 80071a0 <__cvt+0xa4>
 800719c:	f8cd 900c 	str.w	r9, [sp, #12]
 80071a0:	2230      	movs	r2, #48	; 0x30
 80071a2:	9b03      	ldr	r3, [sp, #12]
 80071a4:	454b      	cmp	r3, r9
 80071a6:	d307      	bcc.n	80071b8 <__cvt+0xbc>
 80071a8:	9b03      	ldr	r3, [sp, #12]
 80071aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071ac:	1bdb      	subs	r3, r3, r7
 80071ae:	4638      	mov	r0, r7
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	b004      	add	sp, #16
 80071b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b8:	1c59      	adds	r1, r3, #1
 80071ba:	9103      	str	r1, [sp, #12]
 80071bc:	701a      	strb	r2, [r3, #0]
 80071be:	e7f0      	b.n	80071a2 <__cvt+0xa6>

080071c0 <__exponent>:
 80071c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071c2:	4603      	mov	r3, r0
 80071c4:	2900      	cmp	r1, #0
 80071c6:	bfb8      	it	lt
 80071c8:	4249      	neglt	r1, r1
 80071ca:	f803 2b02 	strb.w	r2, [r3], #2
 80071ce:	bfb4      	ite	lt
 80071d0:	222d      	movlt	r2, #45	; 0x2d
 80071d2:	222b      	movge	r2, #43	; 0x2b
 80071d4:	2909      	cmp	r1, #9
 80071d6:	7042      	strb	r2, [r0, #1]
 80071d8:	dd2a      	ble.n	8007230 <__exponent+0x70>
 80071da:	f10d 0207 	add.w	r2, sp, #7
 80071de:	4617      	mov	r7, r2
 80071e0:	260a      	movs	r6, #10
 80071e2:	4694      	mov	ip, r2
 80071e4:	fb91 f5f6 	sdiv	r5, r1, r6
 80071e8:	fb06 1415 	mls	r4, r6, r5, r1
 80071ec:	3430      	adds	r4, #48	; 0x30
 80071ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80071f2:	460c      	mov	r4, r1
 80071f4:	2c63      	cmp	r4, #99	; 0x63
 80071f6:	f102 32ff 	add.w	r2, r2, #4294967295
 80071fa:	4629      	mov	r1, r5
 80071fc:	dcf1      	bgt.n	80071e2 <__exponent+0x22>
 80071fe:	3130      	adds	r1, #48	; 0x30
 8007200:	f1ac 0402 	sub.w	r4, ip, #2
 8007204:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007208:	1c41      	adds	r1, r0, #1
 800720a:	4622      	mov	r2, r4
 800720c:	42ba      	cmp	r2, r7
 800720e:	d30a      	bcc.n	8007226 <__exponent+0x66>
 8007210:	f10d 0209 	add.w	r2, sp, #9
 8007214:	eba2 020c 	sub.w	r2, r2, ip
 8007218:	42bc      	cmp	r4, r7
 800721a:	bf88      	it	hi
 800721c:	2200      	movhi	r2, #0
 800721e:	4413      	add	r3, r2
 8007220:	1a18      	subs	r0, r3, r0
 8007222:	b003      	add	sp, #12
 8007224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007226:	f812 5b01 	ldrb.w	r5, [r2], #1
 800722a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800722e:	e7ed      	b.n	800720c <__exponent+0x4c>
 8007230:	2330      	movs	r3, #48	; 0x30
 8007232:	3130      	adds	r1, #48	; 0x30
 8007234:	7083      	strb	r3, [r0, #2]
 8007236:	70c1      	strb	r1, [r0, #3]
 8007238:	1d03      	adds	r3, r0, #4
 800723a:	e7f1      	b.n	8007220 <__exponent+0x60>

0800723c <_printf_float>:
 800723c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007240:	ed2d 8b02 	vpush	{d8}
 8007244:	b08d      	sub	sp, #52	; 0x34
 8007246:	460c      	mov	r4, r1
 8007248:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800724c:	4616      	mov	r6, r2
 800724e:	461f      	mov	r7, r3
 8007250:	4605      	mov	r5, r0
 8007252:	f000 fef7 	bl	8008044 <_localeconv_r>
 8007256:	f8d0 a000 	ldr.w	sl, [r0]
 800725a:	4650      	mov	r0, sl
 800725c:	f7f9 f820 	bl	80002a0 <strlen>
 8007260:	2300      	movs	r3, #0
 8007262:	930a      	str	r3, [sp, #40]	; 0x28
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	9305      	str	r3, [sp, #20]
 8007268:	f8d8 3000 	ldr.w	r3, [r8]
 800726c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007270:	3307      	adds	r3, #7
 8007272:	f023 0307 	bic.w	r3, r3, #7
 8007276:	f103 0208 	add.w	r2, r3, #8
 800727a:	f8c8 2000 	str.w	r2, [r8]
 800727e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007282:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007286:	9307      	str	r3, [sp, #28]
 8007288:	f8cd 8018 	str.w	r8, [sp, #24]
 800728c:	ee08 0a10 	vmov	s16, r0
 8007290:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007294:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007298:	4b9e      	ldr	r3, [pc, #632]	; (8007514 <_printf_float+0x2d8>)
 800729a:	f04f 32ff 	mov.w	r2, #4294967295
 800729e:	f7f9 fc5d 	bl	8000b5c <__aeabi_dcmpun>
 80072a2:	bb88      	cbnz	r0, 8007308 <_printf_float+0xcc>
 80072a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072a8:	4b9a      	ldr	r3, [pc, #616]	; (8007514 <_printf_float+0x2d8>)
 80072aa:	f04f 32ff 	mov.w	r2, #4294967295
 80072ae:	f7f9 fc37 	bl	8000b20 <__aeabi_dcmple>
 80072b2:	bb48      	cbnz	r0, 8007308 <_printf_float+0xcc>
 80072b4:	2200      	movs	r2, #0
 80072b6:	2300      	movs	r3, #0
 80072b8:	4640      	mov	r0, r8
 80072ba:	4649      	mov	r1, r9
 80072bc:	f7f9 fc26 	bl	8000b0c <__aeabi_dcmplt>
 80072c0:	b110      	cbz	r0, 80072c8 <_printf_float+0x8c>
 80072c2:	232d      	movs	r3, #45	; 0x2d
 80072c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072c8:	4a93      	ldr	r2, [pc, #588]	; (8007518 <_printf_float+0x2dc>)
 80072ca:	4b94      	ldr	r3, [pc, #592]	; (800751c <_printf_float+0x2e0>)
 80072cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80072d0:	bf94      	ite	ls
 80072d2:	4690      	movls	r8, r2
 80072d4:	4698      	movhi	r8, r3
 80072d6:	2303      	movs	r3, #3
 80072d8:	6123      	str	r3, [r4, #16]
 80072da:	9b05      	ldr	r3, [sp, #20]
 80072dc:	f023 0304 	bic.w	r3, r3, #4
 80072e0:	6023      	str	r3, [r4, #0]
 80072e2:	f04f 0900 	mov.w	r9, #0
 80072e6:	9700      	str	r7, [sp, #0]
 80072e8:	4633      	mov	r3, r6
 80072ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80072ec:	4621      	mov	r1, r4
 80072ee:	4628      	mov	r0, r5
 80072f0:	f000 f9da 	bl	80076a8 <_printf_common>
 80072f4:	3001      	adds	r0, #1
 80072f6:	f040 8090 	bne.w	800741a <_printf_float+0x1de>
 80072fa:	f04f 30ff 	mov.w	r0, #4294967295
 80072fe:	b00d      	add	sp, #52	; 0x34
 8007300:	ecbd 8b02 	vpop	{d8}
 8007304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007308:	4642      	mov	r2, r8
 800730a:	464b      	mov	r3, r9
 800730c:	4640      	mov	r0, r8
 800730e:	4649      	mov	r1, r9
 8007310:	f7f9 fc24 	bl	8000b5c <__aeabi_dcmpun>
 8007314:	b140      	cbz	r0, 8007328 <_printf_float+0xec>
 8007316:	464b      	mov	r3, r9
 8007318:	2b00      	cmp	r3, #0
 800731a:	bfbc      	itt	lt
 800731c:	232d      	movlt	r3, #45	; 0x2d
 800731e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007322:	4a7f      	ldr	r2, [pc, #508]	; (8007520 <_printf_float+0x2e4>)
 8007324:	4b7f      	ldr	r3, [pc, #508]	; (8007524 <_printf_float+0x2e8>)
 8007326:	e7d1      	b.n	80072cc <_printf_float+0x90>
 8007328:	6863      	ldr	r3, [r4, #4]
 800732a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800732e:	9206      	str	r2, [sp, #24]
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	d13f      	bne.n	80073b4 <_printf_float+0x178>
 8007334:	2306      	movs	r3, #6
 8007336:	6063      	str	r3, [r4, #4]
 8007338:	9b05      	ldr	r3, [sp, #20]
 800733a:	6861      	ldr	r1, [r4, #4]
 800733c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007340:	2300      	movs	r3, #0
 8007342:	9303      	str	r3, [sp, #12]
 8007344:	ab0a      	add	r3, sp, #40	; 0x28
 8007346:	e9cd b301 	strd	fp, r3, [sp, #4]
 800734a:	ab09      	add	r3, sp, #36	; 0x24
 800734c:	ec49 8b10 	vmov	d0, r8, r9
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	6022      	str	r2, [r4, #0]
 8007354:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007358:	4628      	mov	r0, r5
 800735a:	f7ff fecf 	bl	80070fc <__cvt>
 800735e:	9b06      	ldr	r3, [sp, #24]
 8007360:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007362:	2b47      	cmp	r3, #71	; 0x47
 8007364:	4680      	mov	r8, r0
 8007366:	d108      	bne.n	800737a <_printf_float+0x13e>
 8007368:	1cc8      	adds	r0, r1, #3
 800736a:	db02      	blt.n	8007372 <_printf_float+0x136>
 800736c:	6863      	ldr	r3, [r4, #4]
 800736e:	4299      	cmp	r1, r3
 8007370:	dd41      	ble.n	80073f6 <_printf_float+0x1ba>
 8007372:	f1ab 0302 	sub.w	r3, fp, #2
 8007376:	fa5f fb83 	uxtb.w	fp, r3
 800737a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800737e:	d820      	bhi.n	80073c2 <_printf_float+0x186>
 8007380:	3901      	subs	r1, #1
 8007382:	465a      	mov	r2, fp
 8007384:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007388:	9109      	str	r1, [sp, #36]	; 0x24
 800738a:	f7ff ff19 	bl	80071c0 <__exponent>
 800738e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007390:	1813      	adds	r3, r2, r0
 8007392:	2a01      	cmp	r2, #1
 8007394:	4681      	mov	r9, r0
 8007396:	6123      	str	r3, [r4, #16]
 8007398:	dc02      	bgt.n	80073a0 <_printf_float+0x164>
 800739a:	6822      	ldr	r2, [r4, #0]
 800739c:	07d2      	lsls	r2, r2, #31
 800739e:	d501      	bpl.n	80073a4 <_printf_float+0x168>
 80073a0:	3301      	adds	r3, #1
 80073a2:	6123      	str	r3, [r4, #16]
 80073a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d09c      	beq.n	80072e6 <_printf_float+0xaa>
 80073ac:	232d      	movs	r3, #45	; 0x2d
 80073ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073b2:	e798      	b.n	80072e6 <_printf_float+0xaa>
 80073b4:	9a06      	ldr	r2, [sp, #24]
 80073b6:	2a47      	cmp	r2, #71	; 0x47
 80073b8:	d1be      	bne.n	8007338 <_printf_float+0xfc>
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1bc      	bne.n	8007338 <_printf_float+0xfc>
 80073be:	2301      	movs	r3, #1
 80073c0:	e7b9      	b.n	8007336 <_printf_float+0xfa>
 80073c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80073c6:	d118      	bne.n	80073fa <_printf_float+0x1be>
 80073c8:	2900      	cmp	r1, #0
 80073ca:	6863      	ldr	r3, [r4, #4]
 80073cc:	dd0b      	ble.n	80073e6 <_printf_float+0x1aa>
 80073ce:	6121      	str	r1, [r4, #16]
 80073d0:	b913      	cbnz	r3, 80073d8 <_printf_float+0x19c>
 80073d2:	6822      	ldr	r2, [r4, #0]
 80073d4:	07d0      	lsls	r0, r2, #31
 80073d6:	d502      	bpl.n	80073de <_printf_float+0x1a2>
 80073d8:	3301      	adds	r3, #1
 80073da:	440b      	add	r3, r1
 80073dc:	6123      	str	r3, [r4, #16]
 80073de:	65a1      	str	r1, [r4, #88]	; 0x58
 80073e0:	f04f 0900 	mov.w	r9, #0
 80073e4:	e7de      	b.n	80073a4 <_printf_float+0x168>
 80073e6:	b913      	cbnz	r3, 80073ee <_printf_float+0x1b2>
 80073e8:	6822      	ldr	r2, [r4, #0]
 80073ea:	07d2      	lsls	r2, r2, #31
 80073ec:	d501      	bpl.n	80073f2 <_printf_float+0x1b6>
 80073ee:	3302      	adds	r3, #2
 80073f0:	e7f4      	b.n	80073dc <_printf_float+0x1a0>
 80073f2:	2301      	movs	r3, #1
 80073f4:	e7f2      	b.n	80073dc <_printf_float+0x1a0>
 80073f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80073fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073fc:	4299      	cmp	r1, r3
 80073fe:	db05      	blt.n	800740c <_printf_float+0x1d0>
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	6121      	str	r1, [r4, #16]
 8007404:	07d8      	lsls	r0, r3, #31
 8007406:	d5ea      	bpl.n	80073de <_printf_float+0x1a2>
 8007408:	1c4b      	adds	r3, r1, #1
 800740a:	e7e7      	b.n	80073dc <_printf_float+0x1a0>
 800740c:	2900      	cmp	r1, #0
 800740e:	bfd4      	ite	le
 8007410:	f1c1 0202 	rsble	r2, r1, #2
 8007414:	2201      	movgt	r2, #1
 8007416:	4413      	add	r3, r2
 8007418:	e7e0      	b.n	80073dc <_printf_float+0x1a0>
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	055a      	lsls	r2, r3, #21
 800741e:	d407      	bmi.n	8007430 <_printf_float+0x1f4>
 8007420:	6923      	ldr	r3, [r4, #16]
 8007422:	4642      	mov	r2, r8
 8007424:	4631      	mov	r1, r6
 8007426:	4628      	mov	r0, r5
 8007428:	47b8      	blx	r7
 800742a:	3001      	adds	r0, #1
 800742c:	d12c      	bne.n	8007488 <_printf_float+0x24c>
 800742e:	e764      	b.n	80072fa <_printf_float+0xbe>
 8007430:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007434:	f240 80e0 	bls.w	80075f8 <_printf_float+0x3bc>
 8007438:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800743c:	2200      	movs	r2, #0
 800743e:	2300      	movs	r3, #0
 8007440:	f7f9 fb5a 	bl	8000af8 <__aeabi_dcmpeq>
 8007444:	2800      	cmp	r0, #0
 8007446:	d034      	beq.n	80074b2 <_printf_float+0x276>
 8007448:	4a37      	ldr	r2, [pc, #220]	; (8007528 <_printf_float+0x2ec>)
 800744a:	2301      	movs	r3, #1
 800744c:	4631      	mov	r1, r6
 800744e:	4628      	mov	r0, r5
 8007450:	47b8      	blx	r7
 8007452:	3001      	adds	r0, #1
 8007454:	f43f af51 	beq.w	80072fa <_printf_float+0xbe>
 8007458:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800745c:	429a      	cmp	r2, r3
 800745e:	db02      	blt.n	8007466 <_printf_float+0x22a>
 8007460:	6823      	ldr	r3, [r4, #0]
 8007462:	07d8      	lsls	r0, r3, #31
 8007464:	d510      	bpl.n	8007488 <_printf_float+0x24c>
 8007466:	ee18 3a10 	vmov	r3, s16
 800746a:	4652      	mov	r2, sl
 800746c:	4631      	mov	r1, r6
 800746e:	4628      	mov	r0, r5
 8007470:	47b8      	blx	r7
 8007472:	3001      	adds	r0, #1
 8007474:	f43f af41 	beq.w	80072fa <_printf_float+0xbe>
 8007478:	f04f 0800 	mov.w	r8, #0
 800747c:	f104 091a 	add.w	r9, r4, #26
 8007480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007482:	3b01      	subs	r3, #1
 8007484:	4543      	cmp	r3, r8
 8007486:	dc09      	bgt.n	800749c <_printf_float+0x260>
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	079b      	lsls	r3, r3, #30
 800748c:	f100 8107 	bmi.w	800769e <_printf_float+0x462>
 8007490:	68e0      	ldr	r0, [r4, #12]
 8007492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007494:	4298      	cmp	r0, r3
 8007496:	bfb8      	it	lt
 8007498:	4618      	movlt	r0, r3
 800749a:	e730      	b.n	80072fe <_printf_float+0xc2>
 800749c:	2301      	movs	r3, #1
 800749e:	464a      	mov	r2, r9
 80074a0:	4631      	mov	r1, r6
 80074a2:	4628      	mov	r0, r5
 80074a4:	47b8      	blx	r7
 80074a6:	3001      	adds	r0, #1
 80074a8:	f43f af27 	beq.w	80072fa <_printf_float+0xbe>
 80074ac:	f108 0801 	add.w	r8, r8, #1
 80074b0:	e7e6      	b.n	8007480 <_printf_float+0x244>
 80074b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	dc39      	bgt.n	800752c <_printf_float+0x2f0>
 80074b8:	4a1b      	ldr	r2, [pc, #108]	; (8007528 <_printf_float+0x2ec>)
 80074ba:	2301      	movs	r3, #1
 80074bc:	4631      	mov	r1, r6
 80074be:	4628      	mov	r0, r5
 80074c0:	47b8      	blx	r7
 80074c2:	3001      	adds	r0, #1
 80074c4:	f43f af19 	beq.w	80072fa <_printf_float+0xbe>
 80074c8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80074cc:	4313      	orrs	r3, r2
 80074ce:	d102      	bne.n	80074d6 <_printf_float+0x29a>
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	07d9      	lsls	r1, r3, #31
 80074d4:	d5d8      	bpl.n	8007488 <_printf_float+0x24c>
 80074d6:	ee18 3a10 	vmov	r3, s16
 80074da:	4652      	mov	r2, sl
 80074dc:	4631      	mov	r1, r6
 80074de:	4628      	mov	r0, r5
 80074e0:	47b8      	blx	r7
 80074e2:	3001      	adds	r0, #1
 80074e4:	f43f af09 	beq.w	80072fa <_printf_float+0xbe>
 80074e8:	f04f 0900 	mov.w	r9, #0
 80074ec:	f104 0a1a 	add.w	sl, r4, #26
 80074f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074f2:	425b      	negs	r3, r3
 80074f4:	454b      	cmp	r3, r9
 80074f6:	dc01      	bgt.n	80074fc <_printf_float+0x2c0>
 80074f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074fa:	e792      	b.n	8007422 <_printf_float+0x1e6>
 80074fc:	2301      	movs	r3, #1
 80074fe:	4652      	mov	r2, sl
 8007500:	4631      	mov	r1, r6
 8007502:	4628      	mov	r0, r5
 8007504:	47b8      	blx	r7
 8007506:	3001      	adds	r0, #1
 8007508:	f43f aef7 	beq.w	80072fa <_printf_float+0xbe>
 800750c:	f109 0901 	add.w	r9, r9, #1
 8007510:	e7ee      	b.n	80074f0 <_printf_float+0x2b4>
 8007512:	bf00      	nop
 8007514:	7fefffff 	.word	0x7fefffff
 8007518:	0800b908 	.word	0x0800b908
 800751c:	0800b90c 	.word	0x0800b90c
 8007520:	0800b910 	.word	0x0800b910
 8007524:	0800b914 	.word	0x0800b914
 8007528:	0800b918 	.word	0x0800b918
 800752c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800752e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007530:	429a      	cmp	r2, r3
 8007532:	bfa8      	it	ge
 8007534:	461a      	movge	r2, r3
 8007536:	2a00      	cmp	r2, #0
 8007538:	4691      	mov	r9, r2
 800753a:	dc37      	bgt.n	80075ac <_printf_float+0x370>
 800753c:	f04f 0b00 	mov.w	fp, #0
 8007540:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007544:	f104 021a 	add.w	r2, r4, #26
 8007548:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800754a:	9305      	str	r3, [sp, #20]
 800754c:	eba3 0309 	sub.w	r3, r3, r9
 8007550:	455b      	cmp	r3, fp
 8007552:	dc33      	bgt.n	80075bc <_printf_float+0x380>
 8007554:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007558:	429a      	cmp	r2, r3
 800755a:	db3b      	blt.n	80075d4 <_printf_float+0x398>
 800755c:	6823      	ldr	r3, [r4, #0]
 800755e:	07da      	lsls	r2, r3, #31
 8007560:	d438      	bmi.n	80075d4 <_printf_float+0x398>
 8007562:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007566:	eba2 0903 	sub.w	r9, r2, r3
 800756a:	9b05      	ldr	r3, [sp, #20]
 800756c:	1ad2      	subs	r2, r2, r3
 800756e:	4591      	cmp	r9, r2
 8007570:	bfa8      	it	ge
 8007572:	4691      	movge	r9, r2
 8007574:	f1b9 0f00 	cmp.w	r9, #0
 8007578:	dc35      	bgt.n	80075e6 <_printf_float+0x3aa>
 800757a:	f04f 0800 	mov.w	r8, #0
 800757e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007582:	f104 0a1a 	add.w	sl, r4, #26
 8007586:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800758a:	1a9b      	subs	r3, r3, r2
 800758c:	eba3 0309 	sub.w	r3, r3, r9
 8007590:	4543      	cmp	r3, r8
 8007592:	f77f af79 	ble.w	8007488 <_printf_float+0x24c>
 8007596:	2301      	movs	r3, #1
 8007598:	4652      	mov	r2, sl
 800759a:	4631      	mov	r1, r6
 800759c:	4628      	mov	r0, r5
 800759e:	47b8      	blx	r7
 80075a0:	3001      	adds	r0, #1
 80075a2:	f43f aeaa 	beq.w	80072fa <_printf_float+0xbe>
 80075a6:	f108 0801 	add.w	r8, r8, #1
 80075aa:	e7ec      	b.n	8007586 <_printf_float+0x34a>
 80075ac:	4613      	mov	r3, r2
 80075ae:	4631      	mov	r1, r6
 80075b0:	4642      	mov	r2, r8
 80075b2:	4628      	mov	r0, r5
 80075b4:	47b8      	blx	r7
 80075b6:	3001      	adds	r0, #1
 80075b8:	d1c0      	bne.n	800753c <_printf_float+0x300>
 80075ba:	e69e      	b.n	80072fa <_printf_float+0xbe>
 80075bc:	2301      	movs	r3, #1
 80075be:	4631      	mov	r1, r6
 80075c0:	4628      	mov	r0, r5
 80075c2:	9205      	str	r2, [sp, #20]
 80075c4:	47b8      	blx	r7
 80075c6:	3001      	adds	r0, #1
 80075c8:	f43f ae97 	beq.w	80072fa <_printf_float+0xbe>
 80075cc:	9a05      	ldr	r2, [sp, #20]
 80075ce:	f10b 0b01 	add.w	fp, fp, #1
 80075d2:	e7b9      	b.n	8007548 <_printf_float+0x30c>
 80075d4:	ee18 3a10 	vmov	r3, s16
 80075d8:	4652      	mov	r2, sl
 80075da:	4631      	mov	r1, r6
 80075dc:	4628      	mov	r0, r5
 80075de:	47b8      	blx	r7
 80075e0:	3001      	adds	r0, #1
 80075e2:	d1be      	bne.n	8007562 <_printf_float+0x326>
 80075e4:	e689      	b.n	80072fa <_printf_float+0xbe>
 80075e6:	9a05      	ldr	r2, [sp, #20]
 80075e8:	464b      	mov	r3, r9
 80075ea:	4442      	add	r2, r8
 80075ec:	4631      	mov	r1, r6
 80075ee:	4628      	mov	r0, r5
 80075f0:	47b8      	blx	r7
 80075f2:	3001      	adds	r0, #1
 80075f4:	d1c1      	bne.n	800757a <_printf_float+0x33e>
 80075f6:	e680      	b.n	80072fa <_printf_float+0xbe>
 80075f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075fa:	2a01      	cmp	r2, #1
 80075fc:	dc01      	bgt.n	8007602 <_printf_float+0x3c6>
 80075fe:	07db      	lsls	r3, r3, #31
 8007600:	d53a      	bpl.n	8007678 <_printf_float+0x43c>
 8007602:	2301      	movs	r3, #1
 8007604:	4642      	mov	r2, r8
 8007606:	4631      	mov	r1, r6
 8007608:	4628      	mov	r0, r5
 800760a:	47b8      	blx	r7
 800760c:	3001      	adds	r0, #1
 800760e:	f43f ae74 	beq.w	80072fa <_printf_float+0xbe>
 8007612:	ee18 3a10 	vmov	r3, s16
 8007616:	4652      	mov	r2, sl
 8007618:	4631      	mov	r1, r6
 800761a:	4628      	mov	r0, r5
 800761c:	47b8      	blx	r7
 800761e:	3001      	adds	r0, #1
 8007620:	f43f ae6b 	beq.w	80072fa <_printf_float+0xbe>
 8007624:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007628:	2200      	movs	r2, #0
 800762a:	2300      	movs	r3, #0
 800762c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007630:	f7f9 fa62 	bl	8000af8 <__aeabi_dcmpeq>
 8007634:	b9d8      	cbnz	r0, 800766e <_printf_float+0x432>
 8007636:	f10a 33ff 	add.w	r3, sl, #4294967295
 800763a:	f108 0201 	add.w	r2, r8, #1
 800763e:	4631      	mov	r1, r6
 8007640:	4628      	mov	r0, r5
 8007642:	47b8      	blx	r7
 8007644:	3001      	adds	r0, #1
 8007646:	d10e      	bne.n	8007666 <_printf_float+0x42a>
 8007648:	e657      	b.n	80072fa <_printf_float+0xbe>
 800764a:	2301      	movs	r3, #1
 800764c:	4652      	mov	r2, sl
 800764e:	4631      	mov	r1, r6
 8007650:	4628      	mov	r0, r5
 8007652:	47b8      	blx	r7
 8007654:	3001      	adds	r0, #1
 8007656:	f43f ae50 	beq.w	80072fa <_printf_float+0xbe>
 800765a:	f108 0801 	add.w	r8, r8, #1
 800765e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007660:	3b01      	subs	r3, #1
 8007662:	4543      	cmp	r3, r8
 8007664:	dcf1      	bgt.n	800764a <_printf_float+0x40e>
 8007666:	464b      	mov	r3, r9
 8007668:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800766c:	e6da      	b.n	8007424 <_printf_float+0x1e8>
 800766e:	f04f 0800 	mov.w	r8, #0
 8007672:	f104 0a1a 	add.w	sl, r4, #26
 8007676:	e7f2      	b.n	800765e <_printf_float+0x422>
 8007678:	2301      	movs	r3, #1
 800767a:	4642      	mov	r2, r8
 800767c:	e7df      	b.n	800763e <_printf_float+0x402>
 800767e:	2301      	movs	r3, #1
 8007680:	464a      	mov	r2, r9
 8007682:	4631      	mov	r1, r6
 8007684:	4628      	mov	r0, r5
 8007686:	47b8      	blx	r7
 8007688:	3001      	adds	r0, #1
 800768a:	f43f ae36 	beq.w	80072fa <_printf_float+0xbe>
 800768e:	f108 0801 	add.w	r8, r8, #1
 8007692:	68e3      	ldr	r3, [r4, #12]
 8007694:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007696:	1a5b      	subs	r3, r3, r1
 8007698:	4543      	cmp	r3, r8
 800769a:	dcf0      	bgt.n	800767e <_printf_float+0x442>
 800769c:	e6f8      	b.n	8007490 <_printf_float+0x254>
 800769e:	f04f 0800 	mov.w	r8, #0
 80076a2:	f104 0919 	add.w	r9, r4, #25
 80076a6:	e7f4      	b.n	8007692 <_printf_float+0x456>

080076a8 <_printf_common>:
 80076a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ac:	4616      	mov	r6, r2
 80076ae:	4699      	mov	r9, r3
 80076b0:	688a      	ldr	r2, [r1, #8]
 80076b2:	690b      	ldr	r3, [r1, #16]
 80076b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076b8:	4293      	cmp	r3, r2
 80076ba:	bfb8      	it	lt
 80076bc:	4613      	movlt	r3, r2
 80076be:	6033      	str	r3, [r6, #0]
 80076c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076c4:	4607      	mov	r7, r0
 80076c6:	460c      	mov	r4, r1
 80076c8:	b10a      	cbz	r2, 80076ce <_printf_common+0x26>
 80076ca:	3301      	adds	r3, #1
 80076cc:	6033      	str	r3, [r6, #0]
 80076ce:	6823      	ldr	r3, [r4, #0]
 80076d0:	0699      	lsls	r1, r3, #26
 80076d2:	bf42      	ittt	mi
 80076d4:	6833      	ldrmi	r3, [r6, #0]
 80076d6:	3302      	addmi	r3, #2
 80076d8:	6033      	strmi	r3, [r6, #0]
 80076da:	6825      	ldr	r5, [r4, #0]
 80076dc:	f015 0506 	ands.w	r5, r5, #6
 80076e0:	d106      	bne.n	80076f0 <_printf_common+0x48>
 80076e2:	f104 0a19 	add.w	sl, r4, #25
 80076e6:	68e3      	ldr	r3, [r4, #12]
 80076e8:	6832      	ldr	r2, [r6, #0]
 80076ea:	1a9b      	subs	r3, r3, r2
 80076ec:	42ab      	cmp	r3, r5
 80076ee:	dc26      	bgt.n	800773e <_printf_common+0x96>
 80076f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076f4:	1e13      	subs	r3, r2, #0
 80076f6:	6822      	ldr	r2, [r4, #0]
 80076f8:	bf18      	it	ne
 80076fa:	2301      	movne	r3, #1
 80076fc:	0692      	lsls	r2, r2, #26
 80076fe:	d42b      	bmi.n	8007758 <_printf_common+0xb0>
 8007700:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007704:	4649      	mov	r1, r9
 8007706:	4638      	mov	r0, r7
 8007708:	47c0      	blx	r8
 800770a:	3001      	adds	r0, #1
 800770c:	d01e      	beq.n	800774c <_printf_common+0xa4>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	6922      	ldr	r2, [r4, #16]
 8007712:	f003 0306 	and.w	r3, r3, #6
 8007716:	2b04      	cmp	r3, #4
 8007718:	bf02      	ittt	eq
 800771a:	68e5      	ldreq	r5, [r4, #12]
 800771c:	6833      	ldreq	r3, [r6, #0]
 800771e:	1aed      	subeq	r5, r5, r3
 8007720:	68a3      	ldr	r3, [r4, #8]
 8007722:	bf0c      	ite	eq
 8007724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007728:	2500      	movne	r5, #0
 800772a:	4293      	cmp	r3, r2
 800772c:	bfc4      	itt	gt
 800772e:	1a9b      	subgt	r3, r3, r2
 8007730:	18ed      	addgt	r5, r5, r3
 8007732:	2600      	movs	r6, #0
 8007734:	341a      	adds	r4, #26
 8007736:	42b5      	cmp	r5, r6
 8007738:	d11a      	bne.n	8007770 <_printf_common+0xc8>
 800773a:	2000      	movs	r0, #0
 800773c:	e008      	b.n	8007750 <_printf_common+0xa8>
 800773e:	2301      	movs	r3, #1
 8007740:	4652      	mov	r2, sl
 8007742:	4649      	mov	r1, r9
 8007744:	4638      	mov	r0, r7
 8007746:	47c0      	blx	r8
 8007748:	3001      	adds	r0, #1
 800774a:	d103      	bne.n	8007754 <_printf_common+0xac>
 800774c:	f04f 30ff 	mov.w	r0, #4294967295
 8007750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007754:	3501      	adds	r5, #1
 8007756:	e7c6      	b.n	80076e6 <_printf_common+0x3e>
 8007758:	18e1      	adds	r1, r4, r3
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	2030      	movs	r0, #48	; 0x30
 800775e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007762:	4422      	add	r2, r4
 8007764:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007768:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800776c:	3302      	adds	r3, #2
 800776e:	e7c7      	b.n	8007700 <_printf_common+0x58>
 8007770:	2301      	movs	r3, #1
 8007772:	4622      	mov	r2, r4
 8007774:	4649      	mov	r1, r9
 8007776:	4638      	mov	r0, r7
 8007778:	47c0      	blx	r8
 800777a:	3001      	adds	r0, #1
 800777c:	d0e6      	beq.n	800774c <_printf_common+0xa4>
 800777e:	3601      	adds	r6, #1
 8007780:	e7d9      	b.n	8007736 <_printf_common+0x8e>
	...

08007784 <_printf_i>:
 8007784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007788:	7e0f      	ldrb	r7, [r1, #24]
 800778a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800778c:	2f78      	cmp	r7, #120	; 0x78
 800778e:	4691      	mov	r9, r2
 8007790:	4680      	mov	r8, r0
 8007792:	460c      	mov	r4, r1
 8007794:	469a      	mov	sl, r3
 8007796:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800779a:	d807      	bhi.n	80077ac <_printf_i+0x28>
 800779c:	2f62      	cmp	r7, #98	; 0x62
 800779e:	d80a      	bhi.n	80077b6 <_printf_i+0x32>
 80077a0:	2f00      	cmp	r7, #0
 80077a2:	f000 80d4 	beq.w	800794e <_printf_i+0x1ca>
 80077a6:	2f58      	cmp	r7, #88	; 0x58
 80077a8:	f000 80c0 	beq.w	800792c <_printf_i+0x1a8>
 80077ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077b4:	e03a      	b.n	800782c <_printf_i+0xa8>
 80077b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077ba:	2b15      	cmp	r3, #21
 80077bc:	d8f6      	bhi.n	80077ac <_printf_i+0x28>
 80077be:	a101      	add	r1, pc, #4	; (adr r1, 80077c4 <_printf_i+0x40>)
 80077c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077c4:	0800781d 	.word	0x0800781d
 80077c8:	08007831 	.word	0x08007831
 80077cc:	080077ad 	.word	0x080077ad
 80077d0:	080077ad 	.word	0x080077ad
 80077d4:	080077ad 	.word	0x080077ad
 80077d8:	080077ad 	.word	0x080077ad
 80077dc:	08007831 	.word	0x08007831
 80077e0:	080077ad 	.word	0x080077ad
 80077e4:	080077ad 	.word	0x080077ad
 80077e8:	080077ad 	.word	0x080077ad
 80077ec:	080077ad 	.word	0x080077ad
 80077f0:	08007935 	.word	0x08007935
 80077f4:	0800785d 	.word	0x0800785d
 80077f8:	080078ef 	.word	0x080078ef
 80077fc:	080077ad 	.word	0x080077ad
 8007800:	080077ad 	.word	0x080077ad
 8007804:	08007957 	.word	0x08007957
 8007808:	080077ad 	.word	0x080077ad
 800780c:	0800785d 	.word	0x0800785d
 8007810:	080077ad 	.word	0x080077ad
 8007814:	080077ad 	.word	0x080077ad
 8007818:	080078f7 	.word	0x080078f7
 800781c:	682b      	ldr	r3, [r5, #0]
 800781e:	1d1a      	adds	r2, r3, #4
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	602a      	str	r2, [r5, #0]
 8007824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007828:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800782c:	2301      	movs	r3, #1
 800782e:	e09f      	b.n	8007970 <_printf_i+0x1ec>
 8007830:	6820      	ldr	r0, [r4, #0]
 8007832:	682b      	ldr	r3, [r5, #0]
 8007834:	0607      	lsls	r7, r0, #24
 8007836:	f103 0104 	add.w	r1, r3, #4
 800783a:	6029      	str	r1, [r5, #0]
 800783c:	d501      	bpl.n	8007842 <_printf_i+0xbe>
 800783e:	681e      	ldr	r6, [r3, #0]
 8007840:	e003      	b.n	800784a <_printf_i+0xc6>
 8007842:	0646      	lsls	r6, r0, #25
 8007844:	d5fb      	bpl.n	800783e <_printf_i+0xba>
 8007846:	f9b3 6000 	ldrsh.w	r6, [r3]
 800784a:	2e00      	cmp	r6, #0
 800784c:	da03      	bge.n	8007856 <_printf_i+0xd2>
 800784e:	232d      	movs	r3, #45	; 0x2d
 8007850:	4276      	negs	r6, r6
 8007852:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007856:	485a      	ldr	r0, [pc, #360]	; (80079c0 <_printf_i+0x23c>)
 8007858:	230a      	movs	r3, #10
 800785a:	e012      	b.n	8007882 <_printf_i+0xfe>
 800785c:	682b      	ldr	r3, [r5, #0]
 800785e:	6820      	ldr	r0, [r4, #0]
 8007860:	1d19      	adds	r1, r3, #4
 8007862:	6029      	str	r1, [r5, #0]
 8007864:	0605      	lsls	r5, r0, #24
 8007866:	d501      	bpl.n	800786c <_printf_i+0xe8>
 8007868:	681e      	ldr	r6, [r3, #0]
 800786a:	e002      	b.n	8007872 <_printf_i+0xee>
 800786c:	0641      	lsls	r1, r0, #25
 800786e:	d5fb      	bpl.n	8007868 <_printf_i+0xe4>
 8007870:	881e      	ldrh	r6, [r3, #0]
 8007872:	4853      	ldr	r0, [pc, #332]	; (80079c0 <_printf_i+0x23c>)
 8007874:	2f6f      	cmp	r7, #111	; 0x6f
 8007876:	bf0c      	ite	eq
 8007878:	2308      	moveq	r3, #8
 800787a:	230a      	movne	r3, #10
 800787c:	2100      	movs	r1, #0
 800787e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007882:	6865      	ldr	r5, [r4, #4]
 8007884:	60a5      	str	r5, [r4, #8]
 8007886:	2d00      	cmp	r5, #0
 8007888:	bfa2      	ittt	ge
 800788a:	6821      	ldrge	r1, [r4, #0]
 800788c:	f021 0104 	bicge.w	r1, r1, #4
 8007890:	6021      	strge	r1, [r4, #0]
 8007892:	b90e      	cbnz	r6, 8007898 <_printf_i+0x114>
 8007894:	2d00      	cmp	r5, #0
 8007896:	d04b      	beq.n	8007930 <_printf_i+0x1ac>
 8007898:	4615      	mov	r5, r2
 800789a:	fbb6 f1f3 	udiv	r1, r6, r3
 800789e:	fb03 6711 	mls	r7, r3, r1, r6
 80078a2:	5dc7      	ldrb	r7, [r0, r7]
 80078a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80078a8:	4637      	mov	r7, r6
 80078aa:	42bb      	cmp	r3, r7
 80078ac:	460e      	mov	r6, r1
 80078ae:	d9f4      	bls.n	800789a <_printf_i+0x116>
 80078b0:	2b08      	cmp	r3, #8
 80078b2:	d10b      	bne.n	80078cc <_printf_i+0x148>
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	07de      	lsls	r6, r3, #31
 80078b8:	d508      	bpl.n	80078cc <_printf_i+0x148>
 80078ba:	6923      	ldr	r3, [r4, #16]
 80078bc:	6861      	ldr	r1, [r4, #4]
 80078be:	4299      	cmp	r1, r3
 80078c0:	bfde      	ittt	le
 80078c2:	2330      	movle	r3, #48	; 0x30
 80078c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078cc:	1b52      	subs	r2, r2, r5
 80078ce:	6122      	str	r2, [r4, #16]
 80078d0:	f8cd a000 	str.w	sl, [sp]
 80078d4:	464b      	mov	r3, r9
 80078d6:	aa03      	add	r2, sp, #12
 80078d8:	4621      	mov	r1, r4
 80078da:	4640      	mov	r0, r8
 80078dc:	f7ff fee4 	bl	80076a8 <_printf_common>
 80078e0:	3001      	adds	r0, #1
 80078e2:	d14a      	bne.n	800797a <_printf_i+0x1f6>
 80078e4:	f04f 30ff 	mov.w	r0, #4294967295
 80078e8:	b004      	add	sp, #16
 80078ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ee:	6823      	ldr	r3, [r4, #0]
 80078f0:	f043 0320 	orr.w	r3, r3, #32
 80078f4:	6023      	str	r3, [r4, #0]
 80078f6:	4833      	ldr	r0, [pc, #204]	; (80079c4 <_printf_i+0x240>)
 80078f8:	2778      	movs	r7, #120	; 0x78
 80078fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	6829      	ldr	r1, [r5, #0]
 8007902:	061f      	lsls	r7, r3, #24
 8007904:	f851 6b04 	ldr.w	r6, [r1], #4
 8007908:	d402      	bmi.n	8007910 <_printf_i+0x18c>
 800790a:	065f      	lsls	r7, r3, #25
 800790c:	bf48      	it	mi
 800790e:	b2b6      	uxthmi	r6, r6
 8007910:	07df      	lsls	r7, r3, #31
 8007912:	bf48      	it	mi
 8007914:	f043 0320 	orrmi.w	r3, r3, #32
 8007918:	6029      	str	r1, [r5, #0]
 800791a:	bf48      	it	mi
 800791c:	6023      	strmi	r3, [r4, #0]
 800791e:	b91e      	cbnz	r6, 8007928 <_printf_i+0x1a4>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	f023 0320 	bic.w	r3, r3, #32
 8007926:	6023      	str	r3, [r4, #0]
 8007928:	2310      	movs	r3, #16
 800792a:	e7a7      	b.n	800787c <_printf_i+0xf8>
 800792c:	4824      	ldr	r0, [pc, #144]	; (80079c0 <_printf_i+0x23c>)
 800792e:	e7e4      	b.n	80078fa <_printf_i+0x176>
 8007930:	4615      	mov	r5, r2
 8007932:	e7bd      	b.n	80078b0 <_printf_i+0x12c>
 8007934:	682b      	ldr	r3, [r5, #0]
 8007936:	6826      	ldr	r6, [r4, #0]
 8007938:	6961      	ldr	r1, [r4, #20]
 800793a:	1d18      	adds	r0, r3, #4
 800793c:	6028      	str	r0, [r5, #0]
 800793e:	0635      	lsls	r5, r6, #24
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	d501      	bpl.n	8007948 <_printf_i+0x1c4>
 8007944:	6019      	str	r1, [r3, #0]
 8007946:	e002      	b.n	800794e <_printf_i+0x1ca>
 8007948:	0670      	lsls	r0, r6, #25
 800794a:	d5fb      	bpl.n	8007944 <_printf_i+0x1c0>
 800794c:	8019      	strh	r1, [r3, #0]
 800794e:	2300      	movs	r3, #0
 8007950:	6123      	str	r3, [r4, #16]
 8007952:	4615      	mov	r5, r2
 8007954:	e7bc      	b.n	80078d0 <_printf_i+0x14c>
 8007956:	682b      	ldr	r3, [r5, #0]
 8007958:	1d1a      	adds	r2, r3, #4
 800795a:	602a      	str	r2, [r5, #0]
 800795c:	681d      	ldr	r5, [r3, #0]
 800795e:	6862      	ldr	r2, [r4, #4]
 8007960:	2100      	movs	r1, #0
 8007962:	4628      	mov	r0, r5
 8007964:	f7f8 fc4c 	bl	8000200 <memchr>
 8007968:	b108      	cbz	r0, 800796e <_printf_i+0x1ea>
 800796a:	1b40      	subs	r0, r0, r5
 800796c:	6060      	str	r0, [r4, #4]
 800796e:	6863      	ldr	r3, [r4, #4]
 8007970:	6123      	str	r3, [r4, #16]
 8007972:	2300      	movs	r3, #0
 8007974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007978:	e7aa      	b.n	80078d0 <_printf_i+0x14c>
 800797a:	6923      	ldr	r3, [r4, #16]
 800797c:	462a      	mov	r2, r5
 800797e:	4649      	mov	r1, r9
 8007980:	4640      	mov	r0, r8
 8007982:	47d0      	blx	sl
 8007984:	3001      	adds	r0, #1
 8007986:	d0ad      	beq.n	80078e4 <_printf_i+0x160>
 8007988:	6823      	ldr	r3, [r4, #0]
 800798a:	079b      	lsls	r3, r3, #30
 800798c:	d413      	bmi.n	80079b6 <_printf_i+0x232>
 800798e:	68e0      	ldr	r0, [r4, #12]
 8007990:	9b03      	ldr	r3, [sp, #12]
 8007992:	4298      	cmp	r0, r3
 8007994:	bfb8      	it	lt
 8007996:	4618      	movlt	r0, r3
 8007998:	e7a6      	b.n	80078e8 <_printf_i+0x164>
 800799a:	2301      	movs	r3, #1
 800799c:	4632      	mov	r2, r6
 800799e:	4649      	mov	r1, r9
 80079a0:	4640      	mov	r0, r8
 80079a2:	47d0      	blx	sl
 80079a4:	3001      	adds	r0, #1
 80079a6:	d09d      	beq.n	80078e4 <_printf_i+0x160>
 80079a8:	3501      	adds	r5, #1
 80079aa:	68e3      	ldr	r3, [r4, #12]
 80079ac:	9903      	ldr	r1, [sp, #12]
 80079ae:	1a5b      	subs	r3, r3, r1
 80079b0:	42ab      	cmp	r3, r5
 80079b2:	dcf2      	bgt.n	800799a <_printf_i+0x216>
 80079b4:	e7eb      	b.n	800798e <_printf_i+0x20a>
 80079b6:	2500      	movs	r5, #0
 80079b8:	f104 0619 	add.w	r6, r4, #25
 80079bc:	e7f5      	b.n	80079aa <_printf_i+0x226>
 80079be:	bf00      	nop
 80079c0:	0800b91a 	.word	0x0800b91a
 80079c4:	0800b92b 	.word	0x0800b92b

080079c8 <_scanf_float>:
 80079c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079cc:	b087      	sub	sp, #28
 80079ce:	4617      	mov	r7, r2
 80079d0:	9303      	str	r3, [sp, #12]
 80079d2:	688b      	ldr	r3, [r1, #8]
 80079d4:	1e5a      	subs	r2, r3, #1
 80079d6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80079da:	bf83      	ittte	hi
 80079dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80079e0:	195b      	addhi	r3, r3, r5
 80079e2:	9302      	strhi	r3, [sp, #8]
 80079e4:	2300      	movls	r3, #0
 80079e6:	bf86      	itte	hi
 80079e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80079ec:	608b      	strhi	r3, [r1, #8]
 80079ee:	9302      	strls	r3, [sp, #8]
 80079f0:	680b      	ldr	r3, [r1, #0]
 80079f2:	468b      	mov	fp, r1
 80079f4:	2500      	movs	r5, #0
 80079f6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80079fa:	f84b 3b1c 	str.w	r3, [fp], #28
 80079fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007a02:	4680      	mov	r8, r0
 8007a04:	460c      	mov	r4, r1
 8007a06:	465e      	mov	r6, fp
 8007a08:	46aa      	mov	sl, r5
 8007a0a:	46a9      	mov	r9, r5
 8007a0c:	9501      	str	r5, [sp, #4]
 8007a0e:	68a2      	ldr	r2, [r4, #8]
 8007a10:	b152      	cbz	r2, 8007a28 <_scanf_float+0x60>
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	2b4e      	cmp	r3, #78	; 0x4e
 8007a18:	d864      	bhi.n	8007ae4 <_scanf_float+0x11c>
 8007a1a:	2b40      	cmp	r3, #64	; 0x40
 8007a1c:	d83c      	bhi.n	8007a98 <_scanf_float+0xd0>
 8007a1e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007a22:	b2c8      	uxtb	r0, r1
 8007a24:	280e      	cmp	r0, #14
 8007a26:	d93a      	bls.n	8007a9e <_scanf_float+0xd6>
 8007a28:	f1b9 0f00 	cmp.w	r9, #0
 8007a2c:	d003      	beq.n	8007a36 <_scanf_float+0x6e>
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a34:	6023      	str	r3, [r4, #0]
 8007a36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a3a:	f1ba 0f01 	cmp.w	sl, #1
 8007a3e:	f200 8113 	bhi.w	8007c68 <_scanf_float+0x2a0>
 8007a42:	455e      	cmp	r6, fp
 8007a44:	f200 8105 	bhi.w	8007c52 <_scanf_float+0x28a>
 8007a48:	2501      	movs	r5, #1
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	b007      	add	sp, #28
 8007a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a52:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007a56:	2a0d      	cmp	r2, #13
 8007a58:	d8e6      	bhi.n	8007a28 <_scanf_float+0x60>
 8007a5a:	a101      	add	r1, pc, #4	; (adr r1, 8007a60 <_scanf_float+0x98>)
 8007a5c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007a60:	08007b9f 	.word	0x08007b9f
 8007a64:	08007a29 	.word	0x08007a29
 8007a68:	08007a29 	.word	0x08007a29
 8007a6c:	08007a29 	.word	0x08007a29
 8007a70:	08007bff 	.word	0x08007bff
 8007a74:	08007bd7 	.word	0x08007bd7
 8007a78:	08007a29 	.word	0x08007a29
 8007a7c:	08007a29 	.word	0x08007a29
 8007a80:	08007bad 	.word	0x08007bad
 8007a84:	08007a29 	.word	0x08007a29
 8007a88:	08007a29 	.word	0x08007a29
 8007a8c:	08007a29 	.word	0x08007a29
 8007a90:	08007a29 	.word	0x08007a29
 8007a94:	08007b65 	.word	0x08007b65
 8007a98:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007a9c:	e7db      	b.n	8007a56 <_scanf_float+0x8e>
 8007a9e:	290e      	cmp	r1, #14
 8007aa0:	d8c2      	bhi.n	8007a28 <_scanf_float+0x60>
 8007aa2:	a001      	add	r0, pc, #4	; (adr r0, 8007aa8 <_scanf_float+0xe0>)
 8007aa4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007aa8:	08007b57 	.word	0x08007b57
 8007aac:	08007a29 	.word	0x08007a29
 8007ab0:	08007b57 	.word	0x08007b57
 8007ab4:	08007beb 	.word	0x08007beb
 8007ab8:	08007a29 	.word	0x08007a29
 8007abc:	08007b05 	.word	0x08007b05
 8007ac0:	08007b41 	.word	0x08007b41
 8007ac4:	08007b41 	.word	0x08007b41
 8007ac8:	08007b41 	.word	0x08007b41
 8007acc:	08007b41 	.word	0x08007b41
 8007ad0:	08007b41 	.word	0x08007b41
 8007ad4:	08007b41 	.word	0x08007b41
 8007ad8:	08007b41 	.word	0x08007b41
 8007adc:	08007b41 	.word	0x08007b41
 8007ae0:	08007b41 	.word	0x08007b41
 8007ae4:	2b6e      	cmp	r3, #110	; 0x6e
 8007ae6:	d809      	bhi.n	8007afc <_scanf_float+0x134>
 8007ae8:	2b60      	cmp	r3, #96	; 0x60
 8007aea:	d8b2      	bhi.n	8007a52 <_scanf_float+0x8a>
 8007aec:	2b54      	cmp	r3, #84	; 0x54
 8007aee:	d077      	beq.n	8007be0 <_scanf_float+0x218>
 8007af0:	2b59      	cmp	r3, #89	; 0x59
 8007af2:	d199      	bne.n	8007a28 <_scanf_float+0x60>
 8007af4:	2d07      	cmp	r5, #7
 8007af6:	d197      	bne.n	8007a28 <_scanf_float+0x60>
 8007af8:	2508      	movs	r5, #8
 8007afa:	e029      	b.n	8007b50 <_scanf_float+0x188>
 8007afc:	2b74      	cmp	r3, #116	; 0x74
 8007afe:	d06f      	beq.n	8007be0 <_scanf_float+0x218>
 8007b00:	2b79      	cmp	r3, #121	; 0x79
 8007b02:	e7f6      	b.n	8007af2 <_scanf_float+0x12a>
 8007b04:	6821      	ldr	r1, [r4, #0]
 8007b06:	05c8      	lsls	r0, r1, #23
 8007b08:	d51a      	bpl.n	8007b40 <_scanf_float+0x178>
 8007b0a:	9b02      	ldr	r3, [sp, #8]
 8007b0c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007b10:	6021      	str	r1, [r4, #0]
 8007b12:	f109 0901 	add.w	r9, r9, #1
 8007b16:	b11b      	cbz	r3, 8007b20 <_scanf_float+0x158>
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	3201      	adds	r2, #1
 8007b1c:	9302      	str	r3, [sp, #8]
 8007b1e:	60a2      	str	r2, [r4, #8]
 8007b20:	68a3      	ldr	r3, [r4, #8]
 8007b22:	3b01      	subs	r3, #1
 8007b24:	60a3      	str	r3, [r4, #8]
 8007b26:	6923      	ldr	r3, [r4, #16]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	6123      	str	r3, [r4, #16]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	607b      	str	r3, [r7, #4]
 8007b34:	f340 8084 	ble.w	8007c40 <_scanf_float+0x278>
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	603b      	str	r3, [r7, #0]
 8007b3e:	e766      	b.n	8007a0e <_scanf_float+0x46>
 8007b40:	eb1a 0f05 	cmn.w	sl, r5
 8007b44:	f47f af70 	bne.w	8007a28 <_scanf_float+0x60>
 8007b48:	6822      	ldr	r2, [r4, #0]
 8007b4a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007b4e:	6022      	str	r2, [r4, #0]
 8007b50:	f806 3b01 	strb.w	r3, [r6], #1
 8007b54:	e7e4      	b.n	8007b20 <_scanf_float+0x158>
 8007b56:	6822      	ldr	r2, [r4, #0]
 8007b58:	0610      	lsls	r0, r2, #24
 8007b5a:	f57f af65 	bpl.w	8007a28 <_scanf_float+0x60>
 8007b5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b62:	e7f4      	b.n	8007b4e <_scanf_float+0x186>
 8007b64:	f1ba 0f00 	cmp.w	sl, #0
 8007b68:	d10e      	bne.n	8007b88 <_scanf_float+0x1c0>
 8007b6a:	f1b9 0f00 	cmp.w	r9, #0
 8007b6e:	d10e      	bne.n	8007b8e <_scanf_float+0x1c6>
 8007b70:	6822      	ldr	r2, [r4, #0]
 8007b72:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007b76:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007b7a:	d108      	bne.n	8007b8e <_scanf_float+0x1c6>
 8007b7c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007b80:	6022      	str	r2, [r4, #0]
 8007b82:	f04f 0a01 	mov.w	sl, #1
 8007b86:	e7e3      	b.n	8007b50 <_scanf_float+0x188>
 8007b88:	f1ba 0f02 	cmp.w	sl, #2
 8007b8c:	d055      	beq.n	8007c3a <_scanf_float+0x272>
 8007b8e:	2d01      	cmp	r5, #1
 8007b90:	d002      	beq.n	8007b98 <_scanf_float+0x1d0>
 8007b92:	2d04      	cmp	r5, #4
 8007b94:	f47f af48 	bne.w	8007a28 <_scanf_float+0x60>
 8007b98:	3501      	adds	r5, #1
 8007b9a:	b2ed      	uxtb	r5, r5
 8007b9c:	e7d8      	b.n	8007b50 <_scanf_float+0x188>
 8007b9e:	f1ba 0f01 	cmp.w	sl, #1
 8007ba2:	f47f af41 	bne.w	8007a28 <_scanf_float+0x60>
 8007ba6:	f04f 0a02 	mov.w	sl, #2
 8007baa:	e7d1      	b.n	8007b50 <_scanf_float+0x188>
 8007bac:	b97d      	cbnz	r5, 8007bce <_scanf_float+0x206>
 8007bae:	f1b9 0f00 	cmp.w	r9, #0
 8007bb2:	f47f af3c 	bne.w	8007a2e <_scanf_float+0x66>
 8007bb6:	6822      	ldr	r2, [r4, #0]
 8007bb8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007bbc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007bc0:	f47f af39 	bne.w	8007a36 <_scanf_float+0x6e>
 8007bc4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007bc8:	6022      	str	r2, [r4, #0]
 8007bca:	2501      	movs	r5, #1
 8007bcc:	e7c0      	b.n	8007b50 <_scanf_float+0x188>
 8007bce:	2d03      	cmp	r5, #3
 8007bd0:	d0e2      	beq.n	8007b98 <_scanf_float+0x1d0>
 8007bd2:	2d05      	cmp	r5, #5
 8007bd4:	e7de      	b.n	8007b94 <_scanf_float+0x1cc>
 8007bd6:	2d02      	cmp	r5, #2
 8007bd8:	f47f af26 	bne.w	8007a28 <_scanf_float+0x60>
 8007bdc:	2503      	movs	r5, #3
 8007bde:	e7b7      	b.n	8007b50 <_scanf_float+0x188>
 8007be0:	2d06      	cmp	r5, #6
 8007be2:	f47f af21 	bne.w	8007a28 <_scanf_float+0x60>
 8007be6:	2507      	movs	r5, #7
 8007be8:	e7b2      	b.n	8007b50 <_scanf_float+0x188>
 8007bea:	6822      	ldr	r2, [r4, #0]
 8007bec:	0591      	lsls	r1, r2, #22
 8007bee:	f57f af1b 	bpl.w	8007a28 <_scanf_float+0x60>
 8007bf2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007bf6:	6022      	str	r2, [r4, #0]
 8007bf8:	f8cd 9004 	str.w	r9, [sp, #4]
 8007bfc:	e7a8      	b.n	8007b50 <_scanf_float+0x188>
 8007bfe:	6822      	ldr	r2, [r4, #0]
 8007c00:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007c04:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007c08:	d006      	beq.n	8007c18 <_scanf_float+0x250>
 8007c0a:	0550      	lsls	r0, r2, #21
 8007c0c:	f57f af0c 	bpl.w	8007a28 <_scanf_float+0x60>
 8007c10:	f1b9 0f00 	cmp.w	r9, #0
 8007c14:	f43f af0f 	beq.w	8007a36 <_scanf_float+0x6e>
 8007c18:	0591      	lsls	r1, r2, #22
 8007c1a:	bf58      	it	pl
 8007c1c:	9901      	ldrpl	r1, [sp, #4]
 8007c1e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007c22:	bf58      	it	pl
 8007c24:	eba9 0101 	subpl.w	r1, r9, r1
 8007c28:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007c2c:	bf58      	it	pl
 8007c2e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007c32:	6022      	str	r2, [r4, #0]
 8007c34:	f04f 0900 	mov.w	r9, #0
 8007c38:	e78a      	b.n	8007b50 <_scanf_float+0x188>
 8007c3a:	f04f 0a03 	mov.w	sl, #3
 8007c3e:	e787      	b.n	8007b50 <_scanf_float+0x188>
 8007c40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007c44:	4639      	mov	r1, r7
 8007c46:	4640      	mov	r0, r8
 8007c48:	4798      	blx	r3
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	f43f aedf 	beq.w	8007a0e <_scanf_float+0x46>
 8007c50:	e6ea      	b.n	8007a28 <_scanf_float+0x60>
 8007c52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c5a:	463a      	mov	r2, r7
 8007c5c:	4640      	mov	r0, r8
 8007c5e:	4798      	blx	r3
 8007c60:	6923      	ldr	r3, [r4, #16]
 8007c62:	3b01      	subs	r3, #1
 8007c64:	6123      	str	r3, [r4, #16]
 8007c66:	e6ec      	b.n	8007a42 <_scanf_float+0x7a>
 8007c68:	1e6b      	subs	r3, r5, #1
 8007c6a:	2b06      	cmp	r3, #6
 8007c6c:	d825      	bhi.n	8007cba <_scanf_float+0x2f2>
 8007c6e:	2d02      	cmp	r5, #2
 8007c70:	d836      	bhi.n	8007ce0 <_scanf_float+0x318>
 8007c72:	455e      	cmp	r6, fp
 8007c74:	f67f aee8 	bls.w	8007a48 <_scanf_float+0x80>
 8007c78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c7c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c80:	463a      	mov	r2, r7
 8007c82:	4640      	mov	r0, r8
 8007c84:	4798      	blx	r3
 8007c86:	6923      	ldr	r3, [r4, #16]
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	6123      	str	r3, [r4, #16]
 8007c8c:	e7f1      	b.n	8007c72 <_scanf_float+0x2aa>
 8007c8e:	9802      	ldr	r0, [sp, #8]
 8007c90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c94:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007c98:	9002      	str	r0, [sp, #8]
 8007c9a:	463a      	mov	r2, r7
 8007c9c:	4640      	mov	r0, r8
 8007c9e:	4798      	blx	r3
 8007ca0:	6923      	ldr	r3, [r4, #16]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	6123      	str	r3, [r4, #16]
 8007ca6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007caa:	fa5f fa8a 	uxtb.w	sl, sl
 8007cae:	f1ba 0f02 	cmp.w	sl, #2
 8007cb2:	d1ec      	bne.n	8007c8e <_scanf_float+0x2c6>
 8007cb4:	3d03      	subs	r5, #3
 8007cb6:	b2ed      	uxtb	r5, r5
 8007cb8:	1b76      	subs	r6, r6, r5
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	05da      	lsls	r2, r3, #23
 8007cbe:	d52f      	bpl.n	8007d20 <_scanf_float+0x358>
 8007cc0:	055b      	lsls	r3, r3, #21
 8007cc2:	d510      	bpl.n	8007ce6 <_scanf_float+0x31e>
 8007cc4:	455e      	cmp	r6, fp
 8007cc6:	f67f aebf 	bls.w	8007a48 <_scanf_float+0x80>
 8007cca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007cce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007cd2:	463a      	mov	r2, r7
 8007cd4:	4640      	mov	r0, r8
 8007cd6:	4798      	blx	r3
 8007cd8:	6923      	ldr	r3, [r4, #16]
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	6123      	str	r3, [r4, #16]
 8007cde:	e7f1      	b.n	8007cc4 <_scanf_float+0x2fc>
 8007ce0:	46aa      	mov	sl, r5
 8007ce2:	9602      	str	r6, [sp, #8]
 8007ce4:	e7df      	b.n	8007ca6 <_scanf_float+0x2de>
 8007ce6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007cea:	6923      	ldr	r3, [r4, #16]
 8007cec:	2965      	cmp	r1, #101	; 0x65
 8007cee:	f103 33ff 	add.w	r3, r3, #4294967295
 8007cf2:	f106 35ff 	add.w	r5, r6, #4294967295
 8007cf6:	6123      	str	r3, [r4, #16]
 8007cf8:	d00c      	beq.n	8007d14 <_scanf_float+0x34c>
 8007cfa:	2945      	cmp	r1, #69	; 0x45
 8007cfc:	d00a      	beq.n	8007d14 <_scanf_float+0x34c>
 8007cfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d02:	463a      	mov	r2, r7
 8007d04:	4640      	mov	r0, r8
 8007d06:	4798      	blx	r3
 8007d08:	6923      	ldr	r3, [r4, #16]
 8007d0a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	1eb5      	subs	r5, r6, #2
 8007d12:	6123      	str	r3, [r4, #16]
 8007d14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d18:	463a      	mov	r2, r7
 8007d1a:	4640      	mov	r0, r8
 8007d1c:	4798      	blx	r3
 8007d1e:	462e      	mov	r6, r5
 8007d20:	6825      	ldr	r5, [r4, #0]
 8007d22:	f015 0510 	ands.w	r5, r5, #16
 8007d26:	d158      	bne.n	8007dda <_scanf_float+0x412>
 8007d28:	7035      	strb	r5, [r6, #0]
 8007d2a:	6823      	ldr	r3, [r4, #0]
 8007d2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d34:	d11c      	bne.n	8007d70 <_scanf_float+0x3a8>
 8007d36:	9b01      	ldr	r3, [sp, #4]
 8007d38:	454b      	cmp	r3, r9
 8007d3a:	eba3 0209 	sub.w	r2, r3, r9
 8007d3e:	d124      	bne.n	8007d8a <_scanf_float+0x3c2>
 8007d40:	2200      	movs	r2, #0
 8007d42:	4659      	mov	r1, fp
 8007d44:	4640      	mov	r0, r8
 8007d46:	f002 fc2f 	bl	800a5a8 <_strtod_r>
 8007d4a:	9b03      	ldr	r3, [sp, #12]
 8007d4c:	6821      	ldr	r1, [r4, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f011 0f02 	tst.w	r1, #2
 8007d54:	ec57 6b10 	vmov	r6, r7, d0
 8007d58:	f103 0204 	add.w	r2, r3, #4
 8007d5c:	d020      	beq.n	8007da0 <_scanf_float+0x3d8>
 8007d5e:	9903      	ldr	r1, [sp, #12]
 8007d60:	600a      	str	r2, [r1, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	e9c3 6700 	strd	r6, r7, [r3]
 8007d68:	68e3      	ldr	r3, [r4, #12]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	60e3      	str	r3, [r4, #12]
 8007d6e:	e66c      	b.n	8007a4a <_scanf_float+0x82>
 8007d70:	9b04      	ldr	r3, [sp, #16]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d0e4      	beq.n	8007d40 <_scanf_float+0x378>
 8007d76:	9905      	ldr	r1, [sp, #20]
 8007d78:	230a      	movs	r3, #10
 8007d7a:	462a      	mov	r2, r5
 8007d7c:	3101      	adds	r1, #1
 8007d7e:	4640      	mov	r0, r8
 8007d80:	f002 fc9a 	bl	800a6b8 <_strtol_r>
 8007d84:	9b04      	ldr	r3, [sp, #16]
 8007d86:	9e05      	ldr	r6, [sp, #20]
 8007d88:	1ac2      	subs	r2, r0, r3
 8007d8a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007d8e:	429e      	cmp	r6, r3
 8007d90:	bf28      	it	cs
 8007d92:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007d96:	4912      	ldr	r1, [pc, #72]	; (8007de0 <_scanf_float+0x418>)
 8007d98:	4630      	mov	r0, r6
 8007d9a:	f000 f8e7 	bl	8007f6c <siprintf>
 8007d9e:	e7cf      	b.n	8007d40 <_scanf_float+0x378>
 8007da0:	f011 0f04 	tst.w	r1, #4
 8007da4:	9903      	ldr	r1, [sp, #12]
 8007da6:	600a      	str	r2, [r1, #0]
 8007da8:	d1db      	bne.n	8007d62 <_scanf_float+0x39a>
 8007daa:	f8d3 8000 	ldr.w	r8, [r3]
 8007dae:	ee10 2a10 	vmov	r2, s0
 8007db2:	ee10 0a10 	vmov	r0, s0
 8007db6:	463b      	mov	r3, r7
 8007db8:	4639      	mov	r1, r7
 8007dba:	f7f8 fecf 	bl	8000b5c <__aeabi_dcmpun>
 8007dbe:	b128      	cbz	r0, 8007dcc <_scanf_float+0x404>
 8007dc0:	4808      	ldr	r0, [pc, #32]	; (8007de4 <_scanf_float+0x41c>)
 8007dc2:	f000 f9b7 	bl	8008134 <nanf>
 8007dc6:	ed88 0a00 	vstr	s0, [r8]
 8007dca:	e7cd      	b.n	8007d68 <_scanf_float+0x3a0>
 8007dcc:	4630      	mov	r0, r6
 8007dce:	4639      	mov	r1, r7
 8007dd0:	f7f8 ff22 	bl	8000c18 <__aeabi_d2f>
 8007dd4:	f8c8 0000 	str.w	r0, [r8]
 8007dd8:	e7c6      	b.n	8007d68 <_scanf_float+0x3a0>
 8007dda:	2500      	movs	r5, #0
 8007ddc:	e635      	b.n	8007a4a <_scanf_float+0x82>
 8007dde:	bf00      	nop
 8007de0:	0800b93c 	.word	0x0800b93c
 8007de4:	0800bccd 	.word	0x0800bccd

08007de8 <std>:
 8007de8:	2300      	movs	r3, #0
 8007dea:	b510      	push	{r4, lr}
 8007dec:	4604      	mov	r4, r0
 8007dee:	e9c0 3300 	strd	r3, r3, [r0]
 8007df2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007df6:	6083      	str	r3, [r0, #8]
 8007df8:	8181      	strh	r1, [r0, #12]
 8007dfa:	6643      	str	r3, [r0, #100]	; 0x64
 8007dfc:	81c2      	strh	r2, [r0, #14]
 8007dfe:	6183      	str	r3, [r0, #24]
 8007e00:	4619      	mov	r1, r3
 8007e02:	2208      	movs	r2, #8
 8007e04:	305c      	adds	r0, #92	; 0x5c
 8007e06:	f000 f914 	bl	8008032 <memset>
 8007e0a:	4b0d      	ldr	r3, [pc, #52]	; (8007e40 <std+0x58>)
 8007e0c:	6263      	str	r3, [r4, #36]	; 0x24
 8007e0e:	4b0d      	ldr	r3, [pc, #52]	; (8007e44 <std+0x5c>)
 8007e10:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e12:	4b0d      	ldr	r3, [pc, #52]	; (8007e48 <std+0x60>)
 8007e14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e16:	4b0d      	ldr	r3, [pc, #52]	; (8007e4c <std+0x64>)
 8007e18:	6323      	str	r3, [r4, #48]	; 0x30
 8007e1a:	4b0d      	ldr	r3, [pc, #52]	; (8007e50 <std+0x68>)
 8007e1c:	6224      	str	r4, [r4, #32]
 8007e1e:	429c      	cmp	r4, r3
 8007e20:	d006      	beq.n	8007e30 <std+0x48>
 8007e22:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007e26:	4294      	cmp	r4, r2
 8007e28:	d002      	beq.n	8007e30 <std+0x48>
 8007e2a:	33d0      	adds	r3, #208	; 0xd0
 8007e2c:	429c      	cmp	r4, r3
 8007e2e:	d105      	bne.n	8007e3c <std+0x54>
 8007e30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e38:	f000 b978 	b.w	800812c <__retarget_lock_init_recursive>
 8007e3c:	bd10      	pop	{r4, pc}
 8007e3e:	bf00      	nop
 8007e40:	08007fad 	.word	0x08007fad
 8007e44:	08007fcf 	.word	0x08007fcf
 8007e48:	08008007 	.word	0x08008007
 8007e4c:	0800802b 	.word	0x0800802b
 8007e50:	200003fc 	.word	0x200003fc

08007e54 <stdio_exit_handler>:
 8007e54:	4a02      	ldr	r2, [pc, #8]	; (8007e60 <stdio_exit_handler+0xc>)
 8007e56:	4903      	ldr	r1, [pc, #12]	; (8007e64 <stdio_exit_handler+0x10>)
 8007e58:	4803      	ldr	r0, [pc, #12]	; (8007e68 <stdio_exit_handler+0x14>)
 8007e5a:	f000 b869 	b.w	8007f30 <_fwalk_sglue>
 8007e5e:	bf00      	nop
 8007e60:	2000000c 	.word	0x2000000c
 8007e64:	0800aa79 	.word	0x0800aa79
 8007e68:	20000018 	.word	0x20000018

08007e6c <cleanup_stdio>:
 8007e6c:	6841      	ldr	r1, [r0, #4]
 8007e6e:	4b0c      	ldr	r3, [pc, #48]	; (8007ea0 <cleanup_stdio+0x34>)
 8007e70:	4299      	cmp	r1, r3
 8007e72:	b510      	push	{r4, lr}
 8007e74:	4604      	mov	r4, r0
 8007e76:	d001      	beq.n	8007e7c <cleanup_stdio+0x10>
 8007e78:	f002 fdfe 	bl	800aa78 <_fflush_r>
 8007e7c:	68a1      	ldr	r1, [r4, #8]
 8007e7e:	4b09      	ldr	r3, [pc, #36]	; (8007ea4 <cleanup_stdio+0x38>)
 8007e80:	4299      	cmp	r1, r3
 8007e82:	d002      	beq.n	8007e8a <cleanup_stdio+0x1e>
 8007e84:	4620      	mov	r0, r4
 8007e86:	f002 fdf7 	bl	800aa78 <_fflush_r>
 8007e8a:	68e1      	ldr	r1, [r4, #12]
 8007e8c:	4b06      	ldr	r3, [pc, #24]	; (8007ea8 <cleanup_stdio+0x3c>)
 8007e8e:	4299      	cmp	r1, r3
 8007e90:	d004      	beq.n	8007e9c <cleanup_stdio+0x30>
 8007e92:	4620      	mov	r0, r4
 8007e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e98:	f002 bdee 	b.w	800aa78 <_fflush_r>
 8007e9c:	bd10      	pop	{r4, pc}
 8007e9e:	bf00      	nop
 8007ea0:	200003fc 	.word	0x200003fc
 8007ea4:	20000464 	.word	0x20000464
 8007ea8:	200004cc 	.word	0x200004cc

08007eac <global_stdio_init.part.0>:
 8007eac:	b510      	push	{r4, lr}
 8007eae:	4b0b      	ldr	r3, [pc, #44]	; (8007edc <global_stdio_init.part.0+0x30>)
 8007eb0:	4c0b      	ldr	r4, [pc, #44]	; (8007ee0 <global_stdio_init.part.0+0x34>)
 8007eb2:	4a0c      	ldr	r2, [pc, #48]	; (8007ee4 <global_stdio_init.part.0+0x38>)
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2104      	movs	r1, #4
 8007ebc:	f7ff ff94 	bl	8007de8 <std>
 8007ec0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	2109      	movs	r1, #9
 8007ec8:	f7ff ff8e 	bl	8007de8 <std>
 8007ecc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ed6:	2112      	movs	r1, #18
 8007ed8:	f7ff bf86 	b.w	8007de8 <std>
 8007edc:	20000534 	.word	0x20000534
 8007ee0:	200003fc 	.word	0x200003fc
 8007ee4:	08007e55 	.word	0x08007e55

08007ee8 <__sfp_lock_acquire>:
 8007ee8:	4801      	ldr	r0, [pc, #4]	; (8007ef0 <__sfp_lock_acquire+0x8>)
 8007eea:	f000 b920 	b.w	800812e <__retarget_lock_acquire_recursive>
 8007eee:	bf00      	nop
 8007ef0:	2000053d 	.word	0x2000053d

08007ef4 <__sfp_lock_release>:
 8007ef4:	4801      	ldr	r0, [pc, #4]	; (8007efc <__sfp_lock_release+0x8>)
 8007ef6:	f000 b91b 	b.w	8008130 <__retarget_lock_release_recursive>
 8007efa:	bf00      	nop
 8007efc:	2000053d 	.word	0x2000053d

08007f00 <__sinit>:
 8007f00:	b510      	push	{r4, lr}
 8007f02:	4604      	mov	r4, r0
 8007f04:	f7ff fff0 	bl	8007ee8 <__sfp_lock_acquire>
 8007f08:	6a23      	ldr	r3, [r4, #32]
 8007f0a:	b11b      	cbz	r3, 8007f14 <__sinit+0x14>
 8007f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f10:	f7ff bff0 	b.w	8007ef4 <__sfp_lock_release>
 8007f14:	4b04      	ldr	r3, [pc, #16]	; (8007f28 <__sinit+0x28>)
 8007f16:	6223      	str	r3, [r4, #32]
 8007f18:	4b04      	ldr	r3, [pc, #16]	; (8007f2c <__sinit+0x2c>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1f5      	bne.n	8007f0c <__sinit+0xc>
 8007f20:	f7ff ffc4 	bl	8007eac <global_stdio_init.part.0>
 8007f24:	e7f2      	b.n	8007f0c <__sinit+0xc>
 8007f26:	bf00      	nop
 8007f28:	08007e6d 	.word	0x08007e6d
 8007f2c:	20000534 	.word	0x20000534

08007f30 <_fwalk_sglue>:
 8007f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f34:	4607      	mov	r7, r0
 8007f36:	4688      	mov	r8, r1
 8007f38:	4614      	mov	r4, r2
 8007f3a:	2600      	movs	r6, #0
 8007f3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f40:	f1b9 0901 	subs.w	r9, r9, #1
 8007f44:	d505      	bpl.n	8007f52 <_fwalk_sglue+0x22>
 8007f46:	6824      	ldr	r4, [r4, #0]
 8007f48:	2c00      	cmp	r4, #0
 8007f4a:	d1f7      	bne.n	8007f3c <_fwalk_sglue+0xc>
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f52:	89ab      	ldrh	r3, [r5, #12]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d907      	bls.n	8007f68 <_fwalk_sglue+0x38>
 8007f58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	d003      	beq.n	8007f68 <_fwalk_sglue+0x38>
 8007f60:	4629      	mov	r1, r5
 8007f62:	4638      	mov	r0, r7
 8007f64:	47c0      	blx	r8
 8007f66:	4306      	orrs	r6, r0
 8007f68:	3568      	adds	r5, #104	; 0x68
 8007f6a:	e7e9      	b.n	8007f40 <_fwalk_sglue+0x10>

08007f6c <siprintf>:
 8007f6c:	b40e      	push	{r1, r2, r3}
 8007f6e:	b500      	push	{lr}
 8007f70:	b09c      	sub	sp, #112	; 0x70
 8007f72:	ab1d      	add	r3, sp, #116	; 0x74
 8007f74:	9002      	str	r0, [sp, #8]
 8007f76:	9006      	str	r0, [sp, #24]
 8007f78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f7c:	4809      	ldr	r0, [pc, #36]	; (8007fa4 <siprintf+0x38>)
 8007f7e:	9107      	str	r1, [sp, #28]
 8007f80:	9104      	str	r1, [sp, #16]
 8007f82:	4909      	ldr	r1, [pc, #36]	; (8007fa8 <siprintf+0x3c>)
 8007f84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f88:	9105      	str	r1, [sp, #20]
 8007f8a:	6800      	ldr	r0, [r0, #0]
 8007f8c:	9301      	str	r3, [sp, #4]
 8007f8e:	a902      	add	r1, sp, #8
 8007f90:	f002 fbee 	bl	800a770 <_svfiprintf_r>
 8007f94:	9b02      	ldr	r3, [sp, #8]
 8007f96:	2200      	movs	r2, #0
 8007f98:	701a      	strb	r2, [r3, #0]
 8007f9a:	b01c      	add	sp, #112	; 0x70
 8007f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fa0:	b003      	add	sp, #12
 8007fa2:	4770      	bx	lr
 8007fa4:	20000064 	.word	0x20000064
 8007fa8:	ffff0208 	.word	0xffff0208

08007fac <__sread>:
 8007fac:	b510      	push	{r4, lr}
 8007fae:	460c      	mov	r4, r1
 8007fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb4:	f000 f86c 	bl	8008090 <_read_r>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	bfab      	itete	ge
 8007fbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fbe:	89a3      	ldrhlt	r3, [r4, #12]
 8007fc0:	181b      	addge	r3, r3, r0
 8007fc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007fc6:	bfac      	ite	ge
 8007fc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007fca:	81a3      	strhlt	r3, [r4, #12]
 8007fcc:	bd10      	pop	{r4, pc}

08007fce <__swrite>:
 8007fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd2:	461f      	mov	r7, r3
 8007fd4:	898b      	ldrh	r3, [r1, #12]
 8007fd6:	05db      	lsls	r3, r3, #23
 8007fd8:	4605      	mov	r5, r0
 8007fda:	460c      	mov	r4, r1
 8007fdc:	4616      	mov	r6, r2
 8007fde:	d505      	bpl.n	8007fec <__swrite+0x1e>
 8007fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f000 f840 	bl	800806c <_lseek_r>
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ff2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ff6:	81a3      	strh	r3, [r4, #12]
 8007ff8:	4632      	mov	r2, r6
 8007ffa:	463b      	mov	r3, r7
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008002:	f000 b857 	b.w	80080b4 <_write_r>

08008006 <__sseek>:
 8008006:	b510      	push	{r4, lr}
 8008008:	460c      	mov	r4, r1
 800800a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800800e:	f000 f82d 	bl	800806c <_lseek_r>
 8008012:	1c43      	adds	r3, r0, #1
 8008014:	89a3      	ldrh	r3, [r4, #12]
 8008016:	bf15      	itete	ne
 8008018:	6560      	strne	r0, [r4, #84]	; 0x54
 800801a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800801e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008022:	81a3      	strheq	r3, [r4, #12]
 8008024:	bf18      	it	ne
 8008026:	81a3      	strhne	r3, [r4, #12]
 8008028:	bd10      	pop	{r4, pc}

0800802a <__sclose>:
 800802a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800802e:	f000 b80d 	b.w	800804c <_close_r>

08008032 <memset>:
 8008032:	4402      	add	r2, r0
 8008034:	4603      	mov	r3, r0
 8008036:	4293      	cmp	r3, r2
 8008038:	d100      	bne.n	800803c <memset+0xa>
 800803a:	4770      	bx	lr
 800803c:	f803 1b01 	strb.w	r1, [r3], #1
 8008040:	e7f9      	b.n	8008036 <memset+0x4>
	...

08008044 <_localeconv_r>:
 8008044:	4800      	ldr	r0, [pc, #0]	; (8008048 <_localeconv_r+0x4>)
 8008046:	4770      	bx	lr
 8008048:	20000158 	.word	0x20000158

0800804c <_close_r>:
 800804c:	b538      	push	{r3, r4, r5, lr}
 800804e:	4d06      	ldr	r5, [pc, #24]	; (8008068 <_close_r+0x1c>)
 8008050:	2300      	movs	r3, #0
 8008052:	4604      	mov	r4, r0
 8008054:	4608      	mov	r0, r1
 8008056:	602b      	str	r3, [r5, #0]
 8008058:	f7f9 feab 	bl	8001db2 <_close>
 800805c:	1c43      	adds	r3, r0, #1
 800805e:	d102      	bne.n	8008066 <_close_r+0x1a>
 8008060:	682b      	ldr	r3, [r5, #0]
 8008062:	b103      	cbz	r3, 8008066 <_close_r+0x1a>
 8008064:	6023      	str	r3, [r4, #0]
 8008066:	bd38      	pop	{r3, r4, r5, pc}
 8008068:	20000538 	.word	0x20000538

0800806c <_lseek_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4d07      	ldr	r5, [pc, #28]	; (800808c <_lseek_r+0x20>)
 8008070:	4604      	mov	r4, r0
 8008072:	4608      	mov	r0, r1
 8008074:	4611      	mov	r1, r2
 8008076:	2200      	movs	r2, #0
 8008078:	602a      	str	r2, [r5, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	f7f9 fec0 	bl	8001e00 <_lseek>
 8008080:	1c43      	adds	r3, r0, #1
 8008082:	d102      	bne.n	800808a <_lseek_r+0x1e>
 8008084:	682b      	ldr	r3, [r5, #0]
 8008086:	b103      	cbz	r3, 800808a <_lseek_r+0x1e>
 8008088:	6023      	str	r3, [r4, #0]
 800808a:	bd38      	pop	{r3, r4, r5, pc}
 800808c:	20000538 	.word	0x20000538

08008090 <_read_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4d07      	ldr	r5, [pc, #28]	; (80080b0 <_read_r+0x20>)
 8008094:	4604      	mov	r4, r0
 8008096:	4608      	mov	r0, r1
 8008098:	4611      	mov	r1, r2
 800809a:	2200      	movs	r2, #0
 800809c:	602a      	str	r2, [r5, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	f7f9 fe4e 	bl	8001d40 <_read>
 80080a4:	1c43      	adds	r3, r0, #1
 80080a6:	d102      	bne.n	80080ae <_read_r+0x1e>
 80080a8:	682b      	ldr	r3, [r5, #0]
 80080aa:	b103      	cbz	r3, 80080ae <_read_r+0x1e>
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	bd38      	pop	{r3, r4, r5, pc}
 80080b0:	20000538 	.word	0x20000538

080080b4 <_write_r>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	4d07      	ldr	r5, [pc, #28]	; (80080d4 <_write_r+0x20>)
 80080b8:	4604      	mov	r4, r0
 80080ba:	4608      	mov	r0, r1
 80080bc:	4611      	mov	r1, r2
 80080be:	2200      	movs	r2, #0
 80080c0:	602a      	str	r2, [r5, #0]
 80080c2:	461a      	mov	r2, r3
 80080c4:	f7f9 fe59 	bl	8001d7a <_write>
 80080c8:	1c43      	adds	r3, r0, #1
 80080ca:	d102      	bne.n	80080d2 <_write_r+0x1e>
 80080cc:	682b      	ldr	r3, [r5, #0]
 80080ce:	b103      	cbz	r3, 80080d2 <_write_r+0x1e>
 80080d0:	6023      	str	r3, [r4, #0]
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
 80080d4:	20000538 	.word	0x20000538

080080d8 <__errno>:
 80080d8:	4b01      	ldr	r3, [pc, #4]	; (80080e0 <__errno+0x8>)
 80080da:	6818      	ldr	r0, [r3, #0]
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	20000064 	.word	0x20000064

080080e4 <__libc_init_array>:
 80080e4:	b570      	push	{r4, r5, r6, lr}
 80080e6:	4d0d      	ldr	r5, [pc, #52]	; (800811c <__libc_init_array+0x38>)
 80080e8:	4c0d      	ldr	r4, [pc, #52]	; (8008120 <__libc_init_array+0x3c>)
 80080ea:	1b64      	subs	r4, r4, r5
 80080ec:	10a4      	asrs	r4, r4, #2
 80080ee:	2600      	movs	r6, #0
 80080f0:	42a6      	cmp	r6, r4
 80080f2:	d109      	bne.n	8008108 <__libc_init_array+0x24>
 80080f4:	4d0b      	ldr	r5, [pc, #44]	; (8008124 <__libc_init_array+0x40>)
 80080f6:	4c0c      	ldr	r4, [pc, #48]	; (8008128 <__libc_init_array+0x44>)
 80080f8:	f003 fbd6 	bl	800b8a8 <_init>
 80080fc:	1b64      	subs	r4, r4, r5
 80080fe:	10a4      	asrs	r4, r4, #2
 8008100:	2600      	movs	r6, #0
 8008102:	42a6      	cmp	r6, r4
 8008104:	d105      	bne.n	8008112 <__libc_init_array+0x2e>
 8008106:	bd70      	pop	{r4, r5, r6, pc}
 8008108:	f855 3b04 	ldr.w	r3, [r5], #4
 800810c:	4798      	blx	r3
 800810e:	3601      	adds	r6, #1
 8008110:	e7ee      	b.n	80080f0 <__libc_init_array+0xc>
 8008112:	f855 3b04 	ldr.w	r3, [r5], #4
 8008116:	4798      	blx	r3
 8008118:	3601      	adds	r6, #1
 800811a:	e7f2      	b.n	8008102 <__libc_init_array+0x1e>
 800811c:	0800bd38 	.word	0x0800bd38
 8008120:	0800bd38 	.word	0x0800bd38
 8008124:	0800bd38 	.word	0x0800bd38
 8008128:	0800bd3c 	.word	0x0800bd3c

0800812c <__retarget_lock_init_recursive>:
 800812c:	4770      	bx	lr

0800812e <__retarget_lock_acquire_recursive>:
 800812e:	4770      	bx	lr

08008130 <__retarget_lock_release_recursive>:
 8008130:	4770      	bx	lr
	...

08008134 <nanf>:
 8008134:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800813c <nanf+0x8>
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	7fc00000 	.word	0x7fc00000

08008140 <quorem>:
 8008140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008144:	6903      	ldr	r3, [r0, #16]
 8008146:	690c      	ldr	r4, [r1, #16]
 8008148:	42a3      	cmp	r3, r4
 800814a:	4607      	mov	r7, r0
 800814c:	db7e      	blt.n	800824c <quorem+0x10c>
 800814e:	3c01      	subs	r4, #1
 8008150:	f101 0814 	add.w	r8, r1, #20
 8008154:	f100 0514 	add.w	r5, r0, #20
 8008158:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008162:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008166:	3301      	adds	r3, #1
 8008168:	429a      	cmp	r2, r3
 800816a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800816e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008172:	fbb2 f6f3 	udiv	r6, r2, r3
 8008176:	d331      	bcc.n	80081dc <quorem+0x9c>
 8008178:	f04f 0e00 	mov.w	lr, #0
 800817c:	4640      	mov	r0, r8
 800817e:	46ac      	mov	ip, r5
 8008180:	46f2      	mov	sl, lr
 8008182:	f850 2b04 	ldr.w	r2, [r0], #4
 8008186:	b293      	uxth	r3, r2
 8008188:	fb06 e303 	mla	r3, r6, r3, lr
 800818c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008190:	0c1a      	lsrs	r2, r3, #16
 8008192:	b29b      	uxth	r3, r3
 8008194:	ebaa 0303 	sub.w	r3, sl, r3
 8008198:	f8dc a000 	ldr.w	sl, [ip]
 800819c:	fa13 f38a 	uxtah	r3, r3, sl
 80081a0:	fb06 220e 	mla	r2, r6, lr, r2
 80081a4:	9300      	str	r3, [sp, #0]
 80081a6:	9b00      	ldr	r3, [sp, #0]
 80081a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80081ac:	b292      	uxth	r2, r2
 80081ae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80081b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081b6:	f8bd 3000 	ldrh.w	r3, [sp]
 80081ba:	4581      	cmp	r9, r0
 80081bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081c0:	f84c 3b04 	str.w	r3, [ip], #4
 80081c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80081c8:	d2db      	bcs.n	8008182 <quorem+0x42>
 80081ca:	f855 300b 	ldr.w	r3, [r5, fp]
 80081ce:	b92b      	cbnz	r3, 80081dc <quorem+0x9c>
 80081d0:	9b01      	ldr	r3, [sp, #4]
 80081d2:	3b04      	subs	r3, #4
 80081d4:	429d      	cmp	r5, r3
 80081d6:	461a      	mov	r2, r3
 80081d8:	d32c      	bcc.n	8008234 <quorem+0xf4>
 80081da:	613c      	str	r4, [r7, #16]
 80081dc:	4638      	mov	r0, r7
 80081de:	f001 f9ef 	bl	80095c0 <__mcmp>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	db22      	blt.n	800822c <quorem+0xec>
 80081e6:	3601      	adds	r6, #1
 80081e8:	4629      	mov	r1, r5
 80081ea:	2000      	movs	r0, #0
 80081ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80081f0:	f8d1 c000 	ldr.w	ip, [r1]
 80081f4:	b293      	uxth	r3, r2
 80081f6:	1ac3      	subs	r3, r0, r3
 80081f8:	0c12      	lsrs	r2, r2, #16
 80081fa:	fa13 f38c 	uxtah	r3, r3, ip
 80081fe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008202:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008206:	b29b      	uxth	r3, r3
 8008208:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800820c:	45c1      	cmp	r9, r8
 800820e:	f841 3b04 	str.w	r3, [r1], #4
 8008212:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008216:	d2e9      	bcs.n	80081ec <quorem+0xac>
 8008218:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800821c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008220:	b922      	cbnz	r2, 800822c <quorem+0xec>
 8008222:	3b04      	subs	r3, #4
 8008224:	429d      	cmp	r5, r3
 8008226:	461a      	mov	r2, r3
 8008228:	d30a      	bcc.n	8008240 <quorem+0x100>
 800822a:	613c      	str	r4, [r7, #16]
 800822c:	4630      	mov	r0, r6
 800822e:	b003      	add	sp, #12
 8008230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008234:	6812      	ldr	r2, [r2, #0]
 8008236:	3b04      	subs	r3, #4
 8008238:	2a00      	cmp	r2, #0
 800823a:	d1ce      	bne.n	80081da <quorem+0x9a>
 800823c:	3c01      	subs	r4, #1
 800823e:	e7c9      	b.n	80081d4 <quorem+0x94>
 8008240:	6812      	ldr	r2, [r2, #0]
 8008242:	3b04      	subs	r3, #4
 8008244:	2a00      	cmp	r2, #0
 8008246:	d1f0      	bne.n	800822a <quorem+0xea>
 8008248:	3c01      	subs	r4, #1
 800824a:	e7eb      	b.n	8008224 <quorem+0xe4>
 800824c:	2000      	movs	r0, #0
 800824e:	e7ee      	b.n	800822e <quorem+0xee>

08008250 <_dtoa_r>:
 8008250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008254:	ed2d 8b04 	vpush	{d8-d9}
 8008258:	69c5      	ldr	r5, [r0, #28]
 800825a:	b093      	sub	sp, #76	; 0x4c
 800825c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008260:	ec57 6b10 	vmov	r6, r7, d0
 8008264:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008268:	9107      	str	r1, [sp, #28]
 800826a:	4604      	mov	r4, r0
 800826c:	920a      	str	r2, [sp, #40]	; 0x28
 800826e:	930d      	str	r3, [sp, #52]	; 0x34
 8008270:	b975      	cbnz	r5, 8008290 <_dtoa_r+0x40>
 8008272:	2010      	movs	r0, #16
 8008274:	f000 fe2a 	bl	8008ecc <malloc>
 8008278:	4602      	mov	r2, r0
 800827a:	61e0      	str	r0, [r4, #28]
 800827c:	b920      	cbnz	r0, 8008288 <_dtoa_r+0x38>
 800827e:	4bae      	ldr	r3, [pc, #696]	; (8008538 <_dtoa_r+0x2e8>)
 8008280:	21ef      	movs	r1, #239	; 0xef
 8008282:	48ae      	ldr	r0, [pc, #696]	; (800853c <_dtoa_r+0x2ec>)
 8008284:	f002 fc74 	bl	800ab70 <__assert_func>
 8008288:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800828c:	6005      	str	r5, [r0, #0]
 800828e:	60c5      	str	r5, [r0, #12]
 8008290:	69e3      	ldr	r3, [r4, #28]
 8008292:	6819      	ldr	r1, [r3, #0]
 8008294:	b151      	cbz	r1, 80082ac <_dtoa_r+0x5c>
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	604a      	str	r2, [r1, #4]
 800829a:	2301      	movs	r3, #1
 800829c:	4093      	lsls	r3, r2
 800829e:	608b      	str	r3, [r1, #8]
 80082a0:	4620      	mov	r0, r4
 80082a2:	f000 ff07 	bl	80090b4 <_Bfree>
 80082a6:	69e3      	ldr	r3, [r4, #28]
 80082a8:	2200      	movs	r2, #0
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	1e3b      	subs	r3, r7, #0
 80082ae:	bfbb      	ittet	lt
 80082b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80082b4:	9303      	strlt	r3, [sp, #12]
 80082b6:	2300      	movge	r3, #0
 80082b8:	2201      	movlt	r2, #1
 80082ba:	bfac      	ite	ge
 80082bc:	f8c8 3000 	strge.w	r3, [r8]
 80082c0:	f8c8 2000 	strlt.w	r2, [r8]
 80082c4:	4b9e      	ldr	r3, [pc, #632]	; (8008540 <_dtoa_r+0x2f0>)
 80082c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80082ca:	ea33 0308 	bics.w	r3, r3, r8
 80082ce:	d11b      	bne.n	8008308 <_dtoa_r+0xb8>
 80082d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80082d6:	6013      	str	r3, [r2, #0]
 80082d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80082dc:	4333      	orrs	r3, r6
 80082de:	f000 8593 	beq.w	8008e08 <_dtoa_r+0xbb8>
 80082e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082e4:	b963      	cbnz	r3, 8008300 <_dtoa_r+0xb0>
 80082e6:	4b97      	ldr	r3, [pc, #604]	; (8008544 <_dtoa_r+0x2f4>)
 80082e8:	e027      	b.n	800833a <_dtoa_r+0xea>
 80082ea:	4b97      	ldr	r3, [pc, #604]	; (8008548 <_dtoa_r+0x2f8>)
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	3308      	adds	r3, #8
 80082f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082f2:	6013      	str	r3, [r2, #0]
 80082f4:	9800      	ldr	r0, [sp, #0]
 80082f6:	b013      	add	sp, #76	; 0x4c
 80082f8:	ecbd 8b04 	vpop	{d8-d9}
 80082fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008300:	4b90      	ldr	r3, [pc, #576]	; (8008544 <_dtoa_r+0x2f4>)
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	3303      	adds	r3, #3
 8008306:	e7f3      	b.n	80082f0 <_dtoa_r+0xa0>
 8008308:	ed9d 7b02 	vldr	d7, [sp, #8]
 800830c:	2200      	movs	r2, #0
 800830e:	ec51 0b17 	vmov	r0, r1, d7
 8008312:	eeb0 8a47 	vmov.f32	s16, s14
 8008316:	eef0 8a67 	vmov.f32	s17, s15
 800831a:	2300      	movs	r3, #0
 800831c:	f7f8 fbec 	bl	8000af8 <__aeabi_dcmpeq>
 8008320:	4681      	mov	r9, r0
 8008322:	b160      	cbz	r0, 800833e <_dtoa_r+0xee>
 8008324:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008326:	2301      	movs	r3, #1
 8008328:	6013      	str	r3, [r2, #0]
 800832a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800832c:	2b00      	cmp	r3, #0
 800832e:	f000 8568 	beq.w	8008e02 <_dtoa_r+0xbb2>
 8008332:	4b86      	ldr	r3, [pc, #536]	; (800854c <_dtoa_r+0x2fc>)
 8008334:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008336:	6013      	str	r3, [r2, #0]
 8008338:	3b01      	subs	r3, #1
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	e7da      	b.n	80082f4 <_dtoa_r+0xa4>
 800833e:	aa10      	add	r2, sp, #64	; 0x40
 8008340:	a911      	add	r1, sp, #68	; 0x44
 8008342:	4620      	mov	r0, r4
 8008344:	eeb0 0a48 	vmov.f32	s0, s16
 8008348:	eef0 0a68 	vmov.f32	s1, s17
 800834c:	f001 fa4e 	bl	80097ec <__d2b>
 8008350:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008354:	4682      	mov	sl, r0
 8008356:	2d00      	cmp	r5, #0
 8008358:	d07f      	beq.n	800845a <_dtoa_r+0x20a>
 800835a:	ee18 3a90 	vmov	r3, s17
 800835e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008362:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008366:	ec51 0b18 	vmov	r0, r1, d8
 800836a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800836e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008372:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008376:	4619      	mov	r1, r3
 8008378:	2200      	movs	r2, #0
 800837a:	4b75      	ldr	r3, [pc, #468]	; (8008550 <_dtoa_r+0x300>)
 800837c:	f7f7 ff9c 	bl	80002b8 <__aeabi_dsub>
 8008380:	a367      	add	r3, pc, #412	; (adr r3, 8008520 <_dtoa_r+0x2d0>)
 8008382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008386:	f7f8 f94f 	bl	8000628 <__aeabi_dmul>
 800838a:	a367      	add	r3, pc, #412	; (adr r3, 8008528 <_dtoa_r+0x2d8>)
 800838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008390:	f7f7 ff94 	bl	80002bc <__adddf3>
 8008394:	4606      	mov	r6, r0
 8008396:	4628      	mov	r0, r5
 8008398:	460f      	mov	r7, r1
 800839a:	f7f8 f8db 	bl	8000554 <__aeabi_i2d>
 800839e:	a364      	add	r3, pc, #400	; (adr r3, 8008530 <_dtoa_r+0x2e0>)
 80083a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a4:	f7f8 f940 	bl	8000628 <__aeabi_dmul>
 80083a8:	4602      	mov	r2, r0
 80083aa:	460b      	mov	r3, r1
 80083ac:	4630      	mov	r0, r6
 80083ae:	4639      	mov	r1, r7
 80083b0:	f7f7 ff84 	bl	80002bc <__adddf3>
 80083b4:	4606      	mov	r6, r0
 80083b6:	460f      	mov	r7, r1
 80083b8:	f7f8 fbe6 	bl	8000b88 <__aeabi_d2iz>
 80083bc:	2200      	movs	r2, #0
 80083be:	4683      	mov	fp, r0
 80083c0:	2300      	movs	r3, #0
 80083c2:	4630      	mov	r0, r6
 80083c4:	4639      	mov	r1, r7
 80083c6:	f7f8 fba1 	bl	8000b0c <__aeabi_dcmplt>
 80083ca:	b148      	cbz	r0, 80083e0 <_dtoa_r+0x190>
 80083cc:	4658      	mov	r0, fp
 80083ce:	f7f8 f8c1 	bl	8000554 <__aeabi_i2d>
 80083d2:	4632      	mov	r2, r6
 80083d4:	463b      	mov	r3, r7
 80083d6:	f7f8 fb8f 	bl	8000af8 <__aeabi_dcmpeq>
 80083da:	b908      	cbnz	r0, 80083e0 <_dtoa_r+0x190>
 80083dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083e0:	f1bb 0f16 	cmp.w	fp, #22
 80083e4:	d857      	bhi.n	8008496 <_dtoa_r+0x246>
 80083e6:	4b5b      	ldr	r3, [pc, #364]	; (8008554 <_dtoa_r+0x304>)
 80083e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80083ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f0:	ec51 0b18 	vmov	r0, r1, d8
 80083f4:	f7f8 fb8a 	bl	8000b0c <__aeabi_dcmplt>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	d04e      	beq.n	800849a <_dtoa_r+0x24a>
 80083fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008400:	2300      	movs	r3, #0
 8008402:	930c      	str	r3, [sp, #48]	; 0x30
 8008404:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008406:	1b5b      	subs	r3, r3, r5
 8008408:	1e5a      	subs	r2, r3, #1
 800840a:	bf45      	ittet	mi
 800840c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008410:	9305      	strmi	r3, [sp, #20]
 8008412:	2300      	movpl	r3, #0
 8008414:	2300      	movmi	r3, #0
 8008416:	9206      	str	r2, [sp, #24]
 8008418:	bf54      	ite	pl
 800841a:	9305      	strpl	r3, [sp, #20]
 800841c:	9306      	strmi	r3, [sp, #24]
 800841e:	f1bb 0f00 	cmp.w	fp, #0
 8008422:	db3c      	blt.n	800849e <_dtoa_r+0x24e>
 8008424:	9b06      	ldr	r3, [sp, #24]
 8008426:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800842a:	445b      	add	r3, fp
 800842c:	9306      	str	r3, [sp, #24]
 800842e:	2300      	movs	r3, #0
 8008430:	9308      	str	r3, [sp, #32]
 8008432:	9b07      	ldr	r3, [sp, #28]
 8008434:	2b09      	cmp	r3, #9
 8008436:	d868      	bhi.n	800850a <_dtoa_r+0x2ba>
 8008438:	2b05      	cmp	r3, #5
 800843a:	bfc4      	itt	gt
 800843c:	3b04      	subgt	r3, #4
 800843e:	9307      	strgt	r3, [sp, #28]
 8008440:	9b07      	ldr	r3, [sp, #28]
 8008442:	f1a3 0302 	sub.w	r3, r3, #2
 8008446:	bfcc      	ite	gt
 8008448:	2500      	movgt	r5, #0
 800844a:	2501      	movle	r5, #1
 800844c:	2b03      	cmp	r3, #3
 800844e:	f200 8085 	bhi.w	800855c <_dtoa_r+0x30c>
 8008452:	e8df f003 	tbb	[pc, r3]
 8008456:	3b2e      	.short	0x3b2e
 8008458:	5839      	.short	0x5839
 800845a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800845e:	441d      	add	r5, r3
 8008460:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008464:	2b20      	cmp	r3, #32
 8008466:	bfc1      	itttt	gt
 8008468:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800846c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008470:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008474:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008478:	bfd6      	itet	le
 800847a:	f1c3 0320 	rsble	r3, r3, #32
 800847e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008482:	fa06 f003 	lslle.w	r0, r6, r3
 8008486:	f7f8 f855 	bl	8000534 <__aeabi_ui2d>
 800848a:	2201      	movs	r2, #1
 800848c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008490:	3d01      	subs	r5, #1
 8008492:	920e      	str	r2, [sp, #56]	; 0x38
 8008494:	e76f      	b.n	8008376 <_dtoa_r+0x126>
 8008496:	2301      	movs	r3, #1
 8008498:	e7b3      	b.n	8008402 <_dtoa_r+0x1b2>
 800849a:	900c      	str	r0, [sp, #48]	; 0x30
 800849c:	e7b2      	b.n	8008404 <_dtoa_r+0x1b4>
 800849e:	9b05      	ldr	r3, [sp, #20]
 80084a0:	eba3 030b 	sub.w	r3, r3, fp
 80084a4:	9305      	str	r3, [sp, #20]
 80084a6:	f1cb 0300 	rsb	r3, fp, #0
 80084aa:	9308      	str	r3, [sp, #32]
 80084ac:	2300      	movs	r3, #0
 80084ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80084b0:	e7bf      	b.n	8008432 <_dtoa_r+0x1e2>
 80084b2:	2300      	movs	r3, #0
 80084b4:	9309      	str	r3, [sp, #36]	; 0x24
 80084b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	dc52      	bgt.n	8008562 <_dtoa_r+0x312>
 80084bc:	2301      	movs	r3, #1
 80084be:	9301      	str	r3, [sp, #4]
 80084c0:	9304      	str	r3, [sp, #16]
 80084c2:	461a      	mov	r2, r3
 80084c4:	920a      	str	r2, [sp, #40]	; 0x28
 80084c6:	e00b      	b.n	80084e0 <_dtoa_r+0x290>
 80084c8:	2301      	movs	r3, #1
 80084ca:	e7f3      	b.n	80084b4 <_dtoa_r+0x264>
 80084cc:	2300      	movs	r3, #0
 80084ce:	9309      	str	r3, [sp, #36]	; 0x24
 80084d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084d2:	445b      	add	r3, fp
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	3301      	adds	r3, #1
 80084d8:	2b01      	cmp	r3, #1
 80084da:	9304      	str	r3, [sp, #16]
 80084dc:	bfb8      	it	lt
 80084de:	2301      	movlt	r3, #1
 80084e0:	69e0      	ldr	r0, [r4, #28]
 80084e2:	2100      	movs	r1, #0
 80084e4:	2204      	movs	r2, #4
 80084e6:	f102 0614 	add.w	r6, r2, #20
 80084ea:	429e      	cmp	r6, r3
 80084ec:	d93d      	bls.n	800856a <_dtoa_r+0x31a>
 80084ee:	6041      	str	r1, [r0, #4]
 80084f0:	4620      	mov	r0, r4
 80084f2:	f000 fd9f 	bl	8009034 <_Balloc>
 80084f6:	9000      	str	r0, [sp, #0]
 80084f8:	2800      	cmp	r0, #0
 80084fa:	d139      	bne.n	8008570 <_dtoa_r+0x320>
 80084fc:	4b16      	ldr	r3, [pc, #88]	; (8008558 <_dtoa_r+0x308>)
 80084fe:	4602      	mov	r2, r0
 8008500:	f240 11af 	movw	r1, #431	; 0x1af
 8008504:	e6bd      	b.n	8008282 <_dtoa_r+0x32>
 8008506:	2301      	movs	r3, #1
 8008508:	e7e1      	b.n	80084ce <_dtoa_r+0x27e>
 800850a:	2501      	movs	r5, #1
 800850c:	2300      	movs	r3, #0
 800850e:	9307      	str	r3, [sp, #28]
 8008510:	9509      	str	r5, [sp, #36]	; 0x24
 8008512:	f04f 33ff 	mov.w	r3, #4294967295
 8008516:	9301      	str	r3, [sp, #4]
 8008518:	9304      	str	r3, [sp, #16]
 800851a:	2200      	movs	r2, #0
 800851c:	2312      	movs	r3, #18
 800851e:	e7d1      	b.n	80084c4 <_dtoa_r+0x274>
 8008520:	636f4361 	.word	0x636f4361
 8008524:	3fd287a7 	.word	0x3fd287a7
 8008528:	8b60c8b3 	.word	0x8b60c8b3
 800852c:	3fc68a28 	.word	0x3fc68a28
 8008530:	509f79fb 	.word	0x509f79fb
 8008534:	3fd34413 	.word	0x3fd34413
 8008538:	0800b94e 	.word	0x0800b94e
 800853c:	0800b965 	.word	0x0800b965
 8008540:	7ff00000 	.word	0x7ff00000
 8008544:	0800b94a 	.word	0x0800b94a
 8008548:	0800b941 	.word	0x0800b941
 800854c:	0800b919 	.word	0x0800b919
 8008550:	3ff80000 	.word	0x3ff80000
 8008554:	0800ba50 	.word	0x0800ba50
 8008558:	0800b9bd 	.word	0x0800b9bd
 800855c:	2301      	movs	r3, #1
 800855e:	9309      	str	r3, [sp, #36]	; 0x24
 8008560:	e7d7      	b.n	8008512 <_dtoa_r+0x2c2>
 8008562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008564:	9301      	str	r3, [sp, #4]
 8008566:	9304      	str	r3, [sp, #16]
 8008568:	e7ba      	b.n	80084e0 <_dtoa_r+0x290>
 800856a:	3101      	adds	r1, #1
 800856c:	0052      	lsls	r2, r2, #1
 800856e:	e7ba      	b.n	80084e6 <_dtoa_r+0x296>
 8008570:	69e3      	ldr	r3, [r4, #28]
 8008572:	9a00      	ldr	r2, [sp, #0]
 8008574:	601a      	str	r2, [r3, #0]
 8008576:	9b04      	ldr	r3, [sp, #16]
 8008578:	2b0e      	cmp	r3, #14
 800857a:	f200 80a8 	bhi.w	80086ce <_dtoa_r+0x47e>
 800857e:	2d00      	cmp	r5, #0
 8008580:	f000 80a5 	beq.w	80086ce <_dtoa_r+0x47e>
 8008584:	f1bb 0f00 	cmp.w	fp, #0
 8008588:	dd38      	ble.n	80085fc <_dtoa_r+0x3ac>
 800858a:	4bc0      	ldr	r3, [pc, #768]	; (800888c <_dtoa_r+0x63c>)
 800858c:	f00b 020f 	and.w	r2, fp, #15
 8008590:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008594:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008598:	e9d3 6700 	ldrd	r6, r7, [r3]
 800859c:	ea4f 182b 	mov.w	r8, fp, asr #4
 80085a0:	d019      	beq.n	80085d6 <_dtoa_r+0x386>
 80085a2:	4bbb      	ldr	r3, [pc, #748]	; (8008890 <_dtoa_r+0x640>)
 80085a4:	ec51 0b18 	vmov	r0, r1, d8
 80085a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085ac:	f7f8 f966 	bl	800087c <__aeabi_ddiv>
 80085b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085b4:	f008 080f 	and.w	r8, r8, #15
 80085b8:	2503      	movs	r5, #3
 80085ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008890 <_dtoa_r+0x640>
 80085be:	f1b8 0f00 	cmp.w	r8, #0
 80085c2:	d10a      	bne.n	80085da <_dtoa_r+0x38a>
 80085c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085c8:	4632      	mov	r2, r6
 80085ca:	463b      	mov	r3, r7
 80085cc:	f7f8 f956 	bl	800087c <__aeabi_ddiv>
 80085d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085d4:	e02b      	b.n	800862e <_dtoa_r+0x3de>
 80085d6:	2502      	movs	r5, #2
 80085d8:	e7ef      	b.n	80085ba <_dtoa_r+0x36a>
 80085da:	f018 0f01 	tst.w	r8, #1
 80085de:	d008      	beq.n	80085f2 <_dtoa_r+0x3a2>
 80085e0:	4630      	mov	r0, r6
 80085e2:	4639      	mov	r1, r7
 80085e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80085e8:	f7f8 f81e 	bl	8000628 <__aeabi_dmul>
 80085ec:	3501      	adds	r5, #1
 80085ee:	4606      	mov	r6, r0
 80085f0:	460f      	mov	r7, r1
 80085f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80085f6:	f109 0908 	add.w	r9, r9, #8
 80085fa:	e7e0      	b.n	80085be <_dtoa_r+0x36e>
 80085fc:	f000 809f 	beq.w	800873e <_dtoa_r+0x4ee>
 8008600:	f1cb 0600 	rsb	r6, fp, #0
 8008604:	4ba1      	ldr	r3, [pc, #644]	; (800888c <_dtoa_r+0x63c>)
 8008606:	4fa2      	ldr	r7, [pc, #648]	; (8008890 <_dtoa_r+0x640>)
 8008608:	f006 020f 	and.w	r2, r6, #15
 800860c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008614:	ec51 0b18 	vmov	r0, r1, d8
 8008618:	f7f8 f806 	bl	8000628 <__aeabi_dmul>
 800861c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008620:	1136      	asrs	r6, r6, #4
 8008622:	2300      	movs	r3, #0
 8008624:	2502      	movs	r5, #2
 8008626:	2e00      	cmp	r6, #0
 8008628:	d17e      	bne.n	8008728 <_dtoa_r+0x4d8>
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1d0      	bne.n	80085d0 <_dtoa_r+0x380>
 800862e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008630:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008634:	2b00      	cmp	r3, #0
 8008636:	f000 8084 	beq.w	8008742 <_dtoa_r+0x4f2>
 800863a:	4b96      	ldr	r3, [pc, #600]	; (8008894 <_dtoa_r+0x644>)
 800863c:	2200      	movs	r2, #0
 800863e:	4640      	mov	r0, r8
 8008640:	4649      	mov	r1, r9
 8008642:	f7f8 fa63 	bl	8000b0c <__aeabi_dcmplt>
 8008646:	2800      	cmp	r0, #0
 8008648:	d07b      	beq.n	8008742 <_dtoa_r+0x4f2>
 800864a:	9b04      	ldr	r3, [sp, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d078      	beq.n	8008742 <_dtoa_r+0x4f2>
 8008650:	9b01      	ldr	r3, [sp, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	dd39      	ble.n	80086ca <_dtoa_r+0x47a>
 8008656:	4b90      	ldr	r3, [pc, #576]	; (8008898 <_dtoa_r+0x648>)
 8008658:	2200      	movs	r2, #0
 800865a:	4640      	mov	r0, r8
 800865c:	4649      	mov	r1, r9
 800865e:	f7f7 ffe3 	bl	8000628 <__aeabi_dmul>
 8008662:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008666:	9e01      	ldr	r6, [sp, #4]
 8008668:	f10b 37ff 	add.w	r7, fp, #4294967295
 800866c:	3501      	adds	r5, #1
 800866e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008672:	4628      	mov	r0, r5
 8008674:	f7f7 ff6e 	bl	8000554 <__aeabi_i2d>
 8008678:	4642      	mov	r2, r8
 800867a:	464b      	mov	r3, r9
 800867c:	f7f7 ffd4 	bl	8000628 <__aeabi_dmul>
 8008680:	4b86      	ldr	r3, [pc, #536]	; (800889c <_dtoa_r+0x64c>)
 8008682:	2200      	movs	r2, #0
 8008684:	f7f7 fe1a 	bl	80002bc <__adddf3>
 8008688:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800868c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008690:	9303      	str	r3, [sp, #12]
 8008692:	2e00      	cmp	r6, #0
 8008694:	d158      	bne.n	8008748 <_dtoa_r+0x4f8>
 8008696:	4b82      	ldr	r3, [pc, #520]	; (80088a0 <_dtoa_r+0x650>)
 8008698:	2200      	movs	r2, #0
 800869a:	4640      	mov	r0, r8
 800869c:	4649      	mov	r1, r9
 800869e:	f7f7 fe0b 	bl	80002b8 <__aeabi_dsub>
 80086a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086a6:	4680      	mov	r8, r0
 80086a8:	4689      	mov	r9, r1
 80086aa:	f7f8 fa4d 	bl	8000b48 <__aeabi_dcmpgt>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	f040 8296 	bne.w	8008be0 <_dtoa_r+0x990>
 80086b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80086b8:	4640      	mov	r0, r8
 80086ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086be:	4649      	mov	r1, r9
 80086c0:	f7f8 fa24 	bl	8000b0c <__aeabi_dcmplt>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	f040 8289 	bne.w	8008bdc <_dtoa_r+0x98c>
 80086ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80086ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f2c0 814e 	blt.w	8008972 <_dtoa_r+0x722>
 80086d6:	f1bb 0f0e 	cmp.w	fp, #14
 80086da:	f300 814a 	bgt.w	8008972 <_dtoa_r+0x722>
 80086de:	4b6b      	ldr	r3, [pc, #428]	; (800888c <_dtoa_r+0x63c>)
 80086e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80086e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f280 80dc 	bge.w	80088a8 <_dtoa_r+0x658>
 80086f0:	9b04      	ldr	r3, [sp, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f300 80d8 	bgt.w	80088a8 <_dtoa_r+0x658>
 80086f8:	f040 826f 	bne.w	8008bda <_dtoa_r+0x98a>
 80086fc:	4b68      	ldr	r3, [pc, #416]	; (80088a0 <_dtoa_r+0x650>)
 80086fe:	2200      	movs	r2, #0
 8008700:	4640      	mov	r0, r8
 8008702:	4649      	mov	r1, r9
 8008704:	f7f7 ff90 	bl	8000628 <__aeabi_dmul>
 8008708:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800870c:	f7f8 fa12 	bl	8000b34 <__aeabi_dcmpge>
 8008710:	9e04      	ldr	r6, [sp, #16]
 8008712:	4637      	mov	r7, r6
 8008714:	2800      	cmp	r0, #0
 8008716:	f040 8245 	bne.w	8008ba4 <_dtoa_r+0x954>
 800871a:	9d00      	ldr	r5, [sp, #0]
 800871c:	2331      	movs	r3, #49	; 0x31
 800871e:	f805 3b01 	strb.w	r3, [r5], #1
 8008722:	f10b 0b01 	add.w	fp, fp, #1
 8008726:	e241      	b.n	8008bac <_dtoa_r+0x95c>
 8008728:	07f2      	lsls	r2, r6, #31
 800872a:	d505      	bpl.n	8008738 <_dtoa_r+0x4e8>
 800872c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008730:	f7f7 ff7a 	bl	8000628 <__aeabi_dmul>
 8008734:	3501      	adds	r5, #1
 8008736:	2301      	movs	r3, #1
 8008738:	1076      	asrs	r6, r6, #1
 800873a:	3708      	adds	r7, #8
 800873c:	e773      	b.n	8008626 <_dtoa_r+0x3d6>
 800873e:	2502      	movs	r5, #2
 8008740:	e775      	b.n	800862e <_dtoa_r+0x3de>
 8008742:	9e04      	ldr	r6, [sp, #16]
 8008744:	465f      	mov	r7, fp
 8008746:	e792      	b.n	800866e <_dtoa_r+0x41e>
 8008748:	9900      	ldr	r1, [sp, #0]
 800874a:	4b50      	ldr	r3, [pc, #320]	; (800888c <_dtoa_r+0x63c>)
 800874c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008750:	4431      	add	r1, r6
 8008752:	9102      	str	r1, [sp, #8]
 8008754:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008756:	eeb0 9a47 	vmov.f32	s18, s14
 800875a:	eef0 9a67 	vmov.f32	s19, s15
 800875e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008762:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008766:	2900      	cmp	r1, #0
 8008768:	d044      	beq.n	80087f4 <_dtoa_r+0x5a4>
 800876a:	494e      	ldr	r1, [pc, #312]	; (80088a4 <_dtoa_r+0x654>)
 800876c:	2000      	movs	r0, #0
 800876e:	f7f8 f885 	bl	800087c <__aeabi_ddiv>
 8008772:	ec53 2b19 	vmov	r2, r3, d9
 8008776:	f7f7 fd9f 	bl	80002b8 <__aeabi_dsub>
 800877a:	9d00      	ldr	r5, [sp, #0]
 800877c:	ec41 0b19 	vmov	d9, r0, r1
 8008780:	4649      	mov	r1, r9
 8008782:	4640      	mov	r0, r8
 8008784:	f7f8 fa00 	bl	8000b88 <__aeabi_d2iz>
 8008788:	4606      	mov	r6, r0
 800878a:	f7f7 fee3 	bl	8000554 <__aeabi_i2d>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	4640      	mov	r0, r8
 8008794:	4649      	mov	r1, r9
 8008796:	f7f7 fd8f 	bl	80002b8 <__aeabi_dsub>
 800879a:	3630      	adds	r6, #48	; 0x30
 800879c:	f805 6b01 	strb.w	r6, [r5], #1
 80087a0:	ec53 2b19 	vmov	r2, r3, d9
 80087a4:	4680      	mov	r8, r0
 80087a6:	4689      	mov	r9, r1
 80087a8:	f7f8 f9b0 	bl	8000b0c <__aeabi_dcmplt>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d164      	bne.n	800887a <_dtoa_r+0x62a>
 80087b0:	4642      	mov	r2, r8
 80087b2:	464b      	mov	r3, r9
 80087b4:	4937      	ldr	r1, [pc, #220]	; (8008894 <_dtoa_r+0x644>)
 80087b6:	2000      	movs	r0, #0
 80087b8:	f7f7 fd7e 	bl	80002b8 <__aeabi_dsub>
 80087bc:	ec53 2b19 	vmov	r2, r3, d9
 80087c0:	f7f8 f9a4 	bl	8000b0c <__aeabi_dcmplt>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	f040 80b6 	bne.w	8008936 <_dtoa_r+0x6e6>
 80087ca:	9b02      	ldr	r3, [sp, #8]
 80087cc:	429d      	cmp	r5, r3
 80087ce:	f43f af7c 	beq.w	80086ca <_dtoa_r+0x47a>
 80087d2:	4b31      	ldr	r3, [pc, #196]	; (8008898 <_dtoa_r+0x648>)
 80087d4:	ec51 0b19 	vmov	r0, r1, d9
 80087d8:	2200      	movs	r2, #0
 80087da:	f7f7 ff25 	bl	8000628 <__aeabi_dmul>
 80087de:	4b2e      	ldr	r3, [pc, #184]	; (8008898 <_dtoa_r+0x648>)
 80087e0:	ec41 0b19 	vmov	d9, r0, r1
 80087e4:	2200      	movs	r2, #0
 80087e6:	4640      	mov	r0, r8
 80087e8:	4649      	mov	r1, r9
 80087ea:	f7f7 ff1d 	bl	8000628 <__aeabi_dmul>
 80087ee:	4680      	mov	r8, r0
 80087f0:	4689      	mov	r9, r1
 80087f2:	e7c5      	b.n	8008780 <_dtoa_r+0x530>
 80087f4:	ec51 0b17 	vmov	r0, r1, d7
 80087f8:	f7f7 ff16 	bl	8000628 <__aeabi_dmul>
 80087fc:	9b02      	ldr	r3, [sp, #8]
 80087fe:	9d00      	ldr	r5, [sp, #0]
 8008800:	930f      	str	r3, [sp, #60]	; 0x3c
 8008802:	ec41 0b19 	vmov	d9, r0, r1
 8008806:	4649      	mov	r1, r9
 8008808:	4640      	mov	r0, r8
 800880a:	f7f8 f9bd 	bl	8000b88 <__aeabi_d2iz>
 800880e:	4606      	mov	r6, r0
 8008810:	f7f7 fea0 	bl	8000554 <__aeabi_i2d>
 8008814:	3630      	adds	r6, #48	; 0x30
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	4640      	mov	r0, r8
 800881c:	4649      	mov	r1, r9
 800881e:	f7f7 fd4b 	bl	80002b8 <__aeabi_dsub>
 8008822:	f805 6b01 	strb.w	r6, [r5], #1
 8008826:	9b02      	ldr	r3, [sp, #8]
 8008828:	429d      	cmp	r5, r3
 800882a:	4680      	mov	r8, r0
 800882c:	4689      	mov	r9, r1
 800882e:	f04f 0200 	mov.w	r2, #0
 8008832:	d124      	bne.n	800887e <_dtoa_r+0x62e>
 8008834:	4b1b      	ldr	r3, [pc, #108]	; (80088a4 <_dtoa_r+0x654>)
 8008836:	ec51 0b19 	vmov	r0, r1, d9
 800883a:	f7f7 fd3f 	bl	80002bc <__adddf3>
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	4640      	mov	r0, r8
 8008844:	4649      	mov	r1, r9
 8008846:	f7f8 f97f 	bl	8000b48 <__aeabi_dcmpgt>
 800884a:	2800      	cmp	r0, #0
 800884c:	d173      	bne.n	8008936 <_dtoa_r+0x6e6>
 800884e:	ec53 2b19 	vmov	r2, r3, d9
 8008852:	4914      	ldr	r1, [pc, #80]	; (80088a4 <_dtoa_r+0x654>)
 8008854:	2000      	movs	r0, #0
 8008856:	f7f7 fd2f 	bl	80002b8 <__aeabi_dsub>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	4640      	mov	r0, r8
 8008860:	4649      	mov	r1, r9
 8008862:	f7f8 f953 	bl	8000b0c <__aeabi_dcmplt>
 8008866:	2800      	cmp	r0, #0
 8008868:	f43f af2f 	beq.w	80086ca <_dtoa_r+0x47a>
 800886c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800886e:	1e6b      	subs	r3, r5, #1
 8008870:	930f      	str	r3, [sp, #60]	; 0x3c
 8008872:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008876:	2b30      	cmp	r3, #48	; 0x30
 8008878:	d0f8      	beq.n	800886c <_dtoa_r+0x61c>
 800887a:	46bb      	mov	fp, r7
 800887c:	e04a      	b.n	8008914 <_dtoa_r+0x6c4>
 800887e:	4b06      	ldr	r3, [pc, #24]	; (8008898 <_dtoa_r+0x648>)
 8008880:	f7f7 fed2 	bl	8000628 <__aeabi_dmul>
 8008884:	4680      	mov	r8, r0
 8008886:	4689      	mov	r9, r1
 8008888:	e7bd      	b.n	8008806 <_dtoa_r+0x5b6>
 800888a:	bf00      	nop
 800888c:	0800ba50 	.word	0x0800ba50
 8008890:	0800ba28 	.word	0x0800ba28
 8008894:	3ff00000 	.word	0x3ff00000
 8008898:	40240000 	.word	0x40240000
 800889c:	401c0000 	.word	0x401c0000
 80088a0:	40140000 	.word	0x40140000
 80088a4:	3fe00000 	.word	0x3fe00000
 80088a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80088ac:	9d00      	ldr	r5, [sp, #0]
 80088ae:	4642      	mov	r2, r8
 80088b0:	464b      	mov	r3, r9
 80088b2:	4630      	mov	r0, r6
 80088b4:	4639      	mov	r1, r7
 80088b6:	f7f7 ffe1 	bl	800087c <__aeabi_ddiv>
 80088ba:	f7f8 f965 	bl	8000b88 <__aeabi_d2iz>
 80088be:	9001      	str	r0, [sp, #4]
 80088c0:	f7f7 fe48 	bl	8000554 <__aeabi_i2d>
 80088c4:	4642      	mov	r2, r8
 80088c6:	464b      	mov	r3, r9
 80088c8:	f7f7 feae 	bl	8000628 <__aeabi_dmul>
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	4630      	mov	r0, r6
 80088d2:	4639      	mov	r1, r7
 80088d4:	f7f7 fcf0 	bl	80002b8 <__aeabi_dsub>
 80088d8:	9e01      	ldr	r6, [sp, #4]
 80088da:	9f04      	ldr	r7, [sp, #16]
 80088dc:	3630      	adds	r6, #48	; 0x30
 80088de:	f805 6b01 	strb.w	r6, [r5], #1
 80088e2:	9e00      	ldr	r6, [sp, #0]
 80088e4:	1bae      	subs	r6, r5, r6
 80088e6:	42b7      	cmp	r7, r6
 80088e8:	4602      	mov	r2, r0
 80088ea:	460b      	mov	r3, r1
 80088ec:	d134      	bne.n	8008958 <_dtoa_r+0x708>
 80088ee:	f7f7 fce5 	bl	80002bc <__adddf3>
 80088f2:	4642      	mov	r2, r8
 80088f4:	464b      	mov	r3, r9
 80088f6:	4606      	mov	r6, r0
 80088f8:	460f      	mov	r7, r1
 80088fa:	f7f8 f925 	bl	8000b48 <__aeabi_dcmpgt>
 80088fe:	b9c8      	cbnz	r0, 8008934 <_dtoa_r+0x6e4>
 8008900:	4642      	mov	r2, r8
 8008902:	464b      	mov	r3, r9
 8008904:	4630      	mov	r0, r6
 8008906:	4639      	mov	r1, r7
 8008908:	f7f8 f8f6 	bl	8000af8 <__aeabi_dcmpeq>
 800890c:	b110      	cbz	r0, 8008914 <_dtoa_r+0x6c4>
 800890e:	9b01      	ldr	r3, [sp, #4]
 8008910:	07db      	lsls	r3, r3, #31
 8008912:	d40f      	bmi.n	8008934 <_dtoa_r+0x6e4>
 8008914:	4651      	mov	r1, sl
 8008916:	4620      	mov	r0, r4
 8008918:	f000 fbcc 	bl	80090b4 <_Bfree>
 800891c:	2300      	movs	r3, #0
 800891e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008920:	702b      	strb	r3, [r5, #0]
 8008922:	f10b 0301 	add.w	r3, fp, #1
 8008926:	6013      	str	r3, [r2, #0]
 8008928:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800892a:	2b00      	cmp	r3, #0
 800892c:	f43f ace2 	beq.w	80082f4 <_dtoa_r+0xa4>
 8008930:	601d      	str	r5, [r3, #0]
 8008932:	e4df      	b.n	80082f4 <_dtoa_r+0xa4>
 8008934:	465f      	mov	r7, fp
 8008936:	462b      	mov	r3, r5
 8008938:	461d      	mov	r5, r3
 800893a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800893e:	2a39      	cmp	r2, #57	; 0x39
 8008940:	d106      	bne.n	8008950 <_dtoa_r+0x700>
 8008942:	9a00      	ldr	r2, [sp, #0]
 8008944:	429a      	cmp	r2, r3
 8008946:	d1f7      	bne.n	8008938 <_dtoa_r+0x6e8>
 8008948:	9900      	ldr	r1, [sp, #0]
 800894a:	2230      	movs	r2, #48	; 0x30
 800894c:	3701      	adds	r7, #1
 800894e:	700a      	strb	r2, [r1, #0]
 8008950:	781a      	ldrb	r2, [r3, #0]
 8008952:	3201      	adds	r2, #1
 8008954:	701a      	strb	r2, [r3, #0]
 8008956:	e790      	b.n	800887a <_dtoa_r+0x62a>
 8008958:	4ba3      	ldr	r3, [pc, #652]	; (8008be8 <_dtoa_r+0x998>)
 800895a:	2200      	movs	r2, #0
 800895c:	f7f7 fe64 	bl	8000628 <__aeabi_dmul>
 8008960:	2200      	movs	r2, #0
 8008962:	2300      	movs	r3, #0
 8008964:	4606      	mov	r6, r0
 8008966:	460f      	mov	r7, r1
 8008968:	f7f8 f8c6 	bl	8000af8 <__aeabi_dcmpeq>
 800896c:	2800      	cmp	r0, #0
 800896e:	d09e      	beq.n	80088ae <_dtoa_r+0x65e>
 8008970:	e7d0      	b.n	8008914 <_dtoa_r+0x6c4>
 8008972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008974:	2a00      	cmp	r2, #0
 8008976:	f000 80ca 	beq.w	8008b0e <_dtoa_r+0x8be>
 800897a:	9a07      	ldr	r2, [sp, #28]
 800897c:	2a01      	cmp	r2, #1
 800897e:	f300 80ad 	bgt.w	8008adc <_dtoa_r+0x88c>
 8008982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008984:	2a00      	cmp	r2, #0
 8008986:	f000 80a5 	beq.w	8008ad4 <_dtoa_r+0x884>
 800898a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800898e:	9e08      	ldr	r6, [sp, #32]
 8008990:	9d05      	ldr	r5, [sp, #20]
 8008992:	9a05      	ldr	r2, [sp, #20]
 8008994:	441a      	add	r2, r3
 8008996:	9205      	str	r2, [sp, #20]
 8008998:	9a06      	ldr	r2, [sp, #24]
 800899a:	2101      	movs	r1, #1
 800899c:	441a      	add	r2, r3
 800899e:	4620      	mov	r0, r4
 80089a0:	9206      	str	r2, [sp, #24]
 80089a2:	f000 fc87 	bl	80092b4 <__i2b>
 80089a6:	4607      	mov	r7, r0
 80089a8:	b165      	cbz	r5, 80089c4 <_dtoa_r+0x774>
 80089aa:	9b06      	ldr	r3, [sp, #24]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	dd09      	ble.n	80089c4 <_dtoa_r+0x774>
 80089b0:	42ab      	cmp	r3, r5
 80089b2:	9a05      	ldr	r2, [sp, #20]
 80089b4:	bfa8      	it	ge
 80089b6:	462b      	movge	r3, r5
 80089b8:	1ad2      	subs	r2, r2, r3
 80089ba:	9205      	str	r2, [sp, #20]
 80089bc:	9a06      	ldr	r2, [sp, #24]
 80089be:	1aed      	subs	r5, r5, r3
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	9306      	str	r3, [sp, #24]
 80089c4:	9b08      	ldr	r3, [sp, #32]
 80089c6:	b1f3      	cbz	r3, 8008a06 <_dtoa_r+0x7b6>
 80089c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 80a3 	beq.w	8008b16 <_dtoa_r+0x8c6>
 80089d0:	2e00      	cmp	r6, #0
 80089d2:	dd10      	ble.n	80089f6 <_dtoa_r+0x7a6>
 80089d4:	4639      	mov	r1, r7
 80089d6:	4632      	mov	r2, r6
 80089d8:	4620      	mov	r0, r4
 80089da:	f000 fd2b 	bl	8009434 <__pow5mult>
 80089de:	4652      	mov	r2, sl
 80089e0:	4601      	mov	r1, r0
 80089e2:	4607      	mov	r7, r0
 80089e4:	4620      	mov	r0, r4
 80089e6:	f000 fc7b 	bl	80092e0 <__multiply>
 80089ea:	4651      	mov	r1, sl
 80089ec:	4680      	mov	r8, r0
 80089ee:	4620      	mov	r0, r4
 80089f0:	f000 fb60 	bl	80090b4 <_Bfree>
 80089f4:	46c2      	mov	sl, r8
 80089f6:	9b08      	ldr	r3, [sp, #32]
 80089f8:	1b9a      	subs	r2, r3, r6
 80089fa:	d004      	beq.n	8008a06 <_dtoa_r+0x7b6>
 80089fc:	4651      	mov	r1, sl
 80089fe:	4620      	mov	r0, r4
 8008a00:	f000 fd18 	bl	8009434 <__pow5mult>
 8008a04:	4682      	mov	sl, r0
 8008a06:	2101      	movs	r1, #1
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f000 fc53 	bl	80092b4 <__i2b>
 8008a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	4606      	mov	r6, r0
 8008a14:	f340 8081 	ble.w	8008b1a <_dtoa_r+0x8ca>
 8008a18:	461a      	mov	r2, r3
 8008a1a:	4601      	mov	r1, r0
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f000 fd09 	bl	8009434 <__pow5mult>
 8008a22:	9b07      	ldr	r3, [sp, #28]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	4606      	mov	r6, r0
 8008a28:	dd7a      	ble.n	8008b20 <_dtoa_r+0x8d0>
 8008a2a:	f04f 0800 	mov.w	r8, #0
 8008a2e:	6933      	ldr	r3, [r6, #16]
 8008a30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008a34:	6918      	ldr	r0, [r3, #16]
 8008a36:	f000 fbef 	bl	8009218 <__hi0bits>
 8008a3a:	f1c0 0020 	rsb	r0, r0, #32
 8008a3e:	9b06      	ldr	r3, [sp, #24]
 8008a40:	4418      	add	r0, r3
 8008a42:	f010 001f 	ands.w	r0, r0, #31
 8008a46:	f000 8094 	beq.w	8008b72 <_dtoa_r+0x922>
 8008a4a:	f1c0 0320 	rsb	r3, r0, #32
 8008a4e:	2b04      	cmp	r3, #4
 8008a50:	f340 8085 	ble.w	8008b5e <_dtoa_r+0x90e>
 8008a54:	9b05      	ldr	r3, [sp, #20]
 8008a56:	f1c0 001c 	rsb	r0, r0, #28
 8008a5a:	4403      	add	r3, r0
 8008a5c:	9305      	str	r3, [sp, #20]
 8008a5e:	9b06      	ldr	r3, [sp, #24]
 8008a60:	4403      	add	r3, r0
 8008a62:	4405      	add	r5, r0
 8008a64:	9306      	str	r3, [sp, #24]
 8008a66:	9b05      	ldr	r3, [sp, #20]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	dd05      	ble.n	8008a78 <_dtoa_r+0x828>
 8008a6c:	4651      	mov	r1, sl
 8008a6e:	461a      	mov	r2, r3
 8008a70:	4620      	mov	r0, r4
 8008a72:	f000 fd39 	bl	80094e8 <__lshift>
 8008a76:	4682      	mov	sl, r0
 8008a78:	9b06      	ldr	r3, [sp, #24]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	dd05      	ble.n	8008a8a <_dtoa_r+0x83a>
 8008a7e:	4631      	mov	r1, r6
 8008a80:	461a      	mov	r2, r3
 8008a82:	4620      	mov	r0, r4
 8008a84:	f000 fd30 	bl	80094e8 <__lshift>
 8008a88:	4606      	mov	r6, r0
 8008a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d072      	beq.n	8008b76 <_dtoa_r+0x926>
 8008a90:	4631      	mov	r1, r6
 8008a92:	4650      	mov	r0, sl
 8008a94:	f000 fd94 	bl	80095c0 <__mcmp>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	da6c      	bge.n	8008b76 <_dtoa_r+0x926>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	4651      	mov	r1, sl
 8008aa0:	220a      	movs	r2, #10
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f000 fb28 	bl	80090f8 <__multadd>
 8008aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aaa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008aae:	4682      	mov	sl, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f000 81b0 	beq.w	8008e16 <_dtoa_r+0xbc6>
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	4639      	mov	r1, r7
 8008aba:	220a      	movs	r2, #10
 8008abc:	4620      	mov	r0, r4
 8008abe:	f000 fb1b 	bl	80090f8 <__multadd>
 8008ac2:	9b01      	ldr	r3, [sp, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	4607      	mov	r7, r0
 8008ac8:	f300 8096 	bgt.w	8008bf8 <_dtoa_r+0x9a8>
 8008acc:	9b07      	ldr	r3, [sp, #28]
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	dc59      	bgt.n	8008b86 <_dtoa_r+0x936>
 8008ad2:	e091      	b.n	8008bf8 <_dtoa_r+0x9a8>
 8008ad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ad6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ada:	e758      	b.n	800898e <_dtoa_r+0x73e>
 8008adc:	9b04      	ldr	r3, [sp, #16]
 8008ade:	1e5e      	subs	r6, r3, #1
 8008ae0:	9b08      	ldr	r3, [sp, #32]
 8008ae2:	42b3      	cmp	r3, r6
 8008ae4:	bfbf      	itttt	lt
 8008ae6:	9b08      	ldrlt	r3, [sp, #32]
 8008ae8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008aea:	9608      	strlt	r6, [sp, #32]
 8008aec:	1af3      	sublt	r3, r6, r3
 8008aee:	bfb4      	ite	lt
 8008af0:	18d2      	addlt	r2, r2, r3
 8008af2:	1b9e      	subge	r6, r3, r6
 8008af4:	9b04      	ldr	r3, [sp, #16]
 8008af6:	bfbc      	itt	lt
 8008af8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008afa:	2600      	movlt	r6, #0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	bfb7      	itett	lt
 8008b00:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008b04:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008b08:	1a9d      	sublt	r5, r3, r2
 8008b0a:	2300      	movlt	r3, #0
 8008b0c:	e741      	b.n	8008992 <_dtoa_r+0x742>
 8008b0e:	9e08      	ldr	r6, [sp, #32]
 8008b10:	9d05      	ldr	r5, [sp, #20]
 8008b12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008b14:	e748      	b.n	80089a8 <_dtoa_r+0x758>
 8008b16:	9a08      	ldr	r2, [sp, #32]
 8008b18:	e770      	b.n	80089fc <_dtoa_r+0x7ac>
 8008b1a:	9b07      	ldr	r3, [sp, #28]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	dc19      	bgt.n	8008b54 <_dtoa_r+0x904>
 8008b20:	9b02      	ldr	r3, [sp, #8]
 8008b22:	b9bb      	cbnz	r3, 8008b54 <_dtoa_r+0x904>
 8008b24:	9b03      	ldr	r3, [sp, #12]
 8008b26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b2a:	b99b      	cbnz	r3, 8008b54 <_dtoa_r+0x904>
 8008b2c:	9b03      	ldr	r3, [sp, #12]
 8008b2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b32:	0d1b      	lsrs	r3, r3, #20
 8008b34:	051b      	lsls	r3, r3, #20
 8008b36:	b183      	cbz	r3, 8008b5a <_dtoa_r+0x90a>
 8008b38:	9b05      	ldr	r3, [sp, #20]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	9305      	str	r3, [sp, #20]
 8008b3e:	9b06      	ldr	r3, [sp, #24]
 8008b40:	3301      	adds	r3, #1
 8008b42:	9306      	str	r3, [sp, #24]
 8008b44:	f04f 0801 	mov.w	r8, #1
 8008b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f47f af6f 	bne.w	8008a2e <_dtoa_r+0x7de>
 8008b50:	2001      	movs	r0, #1
 8008b52:	e774      	b.n	8008a3e <_dtoa_r+0x7ee>
 8008b54:	f04f 0800 	mov.w	r8, #0
 8008b58:	e7f6      	b.n	8008b48 <_dtoa_r+0x8f8>
 8008b5a:	4698      	mov	r8, r3
 8008b5c:	e7f4      	b.n	8008b48 <_dtoa_r+0x8f8>
 8008b5e:	d082      	beq.n	8008a66 <_dtoa_r+0x816>
 8008b60:	9a05      	ldr	r2, [sp, #20]
 8008b62:	331c      	adds	r3, #28
 8008b64:	441a      	add	r2, r3
 8008b66:	9205      	str	r2, [sp, #20]
 8008b68:	9a06      	ldr	r2, [sp, #24]
 8008b6a:	441a      	add	r2, r3
 8008b6c:	441d      	add	r5, r3
 8008b6e:	9206      	str	r2, [sp, #24]
 8008b70:	e779      	b.n	8008a66 <_dtoa_r+0x816>
 8008b72:	4603      	mov	r3, r0
 8008b74:	e7f4      	b.n	8008b60 <_dtoa_r+0x910>
 8008b76:	9b04      	ldr	r3, [sp, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	dc37      	bgt.n	8008bec <_dtoa_r+0x99c>
 8008b7c:	9b07      	ldr	r3, [sp, #28]
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	dd34      	ble.n	8008bec <_dtoa_r+0x99c>
 8008b82:	9b04      	ldr	r3, [sp, #16]
 8008b84:	9301      	str	r3, [sp, #4]
 8008b86:	9b01      	ldr	r3, [sp, #4]
 8008b88:	b963      	cbnz	r3, 8008ba4 <_dtoa_r+0x954>
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	2205      	movs	r2, #5
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f000 fab2 	bl	80090f8 <__multadd>
 8008b94:	4601      	mov	r1, r0
 8008b96:	4606      	mov	r6, r0
 8008b98:	4650      	mov	r0, sl
 8008b9a:	f000 fd11 	bl	80095c0 <__mcmp>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	f73f adbb 	bgt.w	800871a <_dtoa_r+0x4ca>
 8008ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba6:	9d00      	ldr	r5, [sp, #0]
 8008ba8:	ea6f 0b03 	mvn.w	fp, r3
 8008bac:	f04f 0800 	mov.w	r8, #0
 8008bb0:	4631      	mov	r1, r6
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f000 fa7e 	bl	80090b4 <_Bfree>
 8008bb8:	2f00      	cmp	r7, #0
 8008bba:	f43f aeab 	beq.w	8008914 <_dtoa_r+0x6c4>
 8008bbe:	f1b8 0f00 	cmp.w	r8, #0
 8008bc2:	d005      	beq.n	8008bd0 <_dtoa_r+0x980>
 8008bc4:	45b8      	cmp	r8, r7
 8008bc6:	d003      	beq.n	8008bd0 <_dtoa_r+0x980>
 8008bc8:	4641      	mov	r1, r8
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f000 fa72 	bl	80090b4 <_Bfree>
 8008bd0:	4639      	mov	r1, r7
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f000 fa6e 	bl	80090b4 <_Bfree>
 8008bd8:	e69c      	b.n	8008914 <_dtoa_r+0x6c4>
 8008bda:	2600      	movs	r6, #0
 8008bdc:	4637      	mov	r7, r6
 8008bde:	e7e1      	b.n	8008ba4 <_dtoa_r+0x954>
 8008be0:	46bb      	mov	fp, r7
 8008be2:	4637      	mov	r7, r6
 8008be4:	e599      	b.n	800871a <_dtoa_r+0x4ca>
 8008be6:	bf00      	nop
 8008be8:	40240000 	.word	0x40240000
 8008bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f000 80c8 	beq.w	8008d84 <_dtoa_r+0xb34>
 8008bf4:	9b04      	ldr	r3, [sp, #16]
 8008bf6:	9301      	str	r3, [sp, #4]
 8008bf8:	2d00      	cmp	r5, #0
 8008bfa:	dd05      	ble.n	8008c08 <_dtoa_r+0x9b8>
 8008bfc:	4639      	mov	r1, r7
 8008bfe:	462a      	mov	r2, r5
 8008c00:	4620      	mov	r0, r4
 8008c02:	f000 fc71 	bl	80094e8 <__lshift>
 8008c06:	4607      	mov	r7, r0
 8008c08:	f1b8 0f00 	cmp.w	r8, #0
 8008c0c:	d05b      	beq.n	8008cc6 <_dtoa_r+0xa76>
 8008c0e:	6879      	ldr	r1, [r7, #4]
 8008c10:	4620      	mov	r0, r4
 8008c12:	f000 fa0f 	bl	8009034 <_Balloc>
 8008c16:	4605      	mov	r5, r0
 8008c18:	b928      	cbnz	r0, 8008c26 <_dtoa_r+0x9d6>
 8008c1a:	4b83      	ldr	r3, [pc, #524]	; (8008e28 <_dtoa_r+0xbd8>)
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008c22:	f7ff bb2e 	b.w	8008282 <_dtoa_r+0x32>
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	3202      	adds	r2, #2
 8008c2a:	0092      	lsls	r2, r2, #2
 8008c2c:	f107 010c 	add.w	r1, r7, #12
 8008c30:	300c      	adds	r0, #12
 8008c32:	f001 ff85 	bl	800ab40 <memcpy>
 8008c36:	2201      	movs	r2, #1
 8008c38:	4629      	mov	r1, r5
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f000 fc54 	bl	80094e8 <__lshift>
 8008c40:	9b00      	ldr	r3, [sp, #0]
 8008c42:	3301      	adds	r3, #1
 8008c44:	9304      	str	r3, [sp, #16]
 8008c46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	9308      	str	r3, [sp, #32]
 8008c4e:	9b02      	ldr	r3, [sp, #8]
 8008c50:	f003 0301 	and.w	r3, r3, #1
 8008c54:	46b8      	mov	r8, r7
 8008c56:	9306      	str	r3, [sp, #24]
 8008c58:	4607      	mov	r7, r0
 8008c5a:	9b04      	ldr	r3, [sp, #16]
 8008c5c:	4631      	mov	r1, r6
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	4650      	mov	r0, sl
 8008c62:	9301      	str	r3, [sp, #4]
 8008c64:	f7ff fa6c 	bl	8008140 <quorem>
 8008c68:	4641      	mov	r1, r8
 8008c6a:	9002      	str	r0, [sp, #8]
 8008c6c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008c70:	4650      	mov	r0, sl
 8008c72:	f000 fca5 	bl	80095c0 <__mcmp>
 8008c76:	463a      	mov	r2, r7
 8008c78:	9005      	str	r0, [sp, #20]
 8008c7a:	4631      	mov	r1, r6
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f000 fcbb 	bl	80095f8 <__mdiff>
 8008c82:	68c2      	ldr	r2, [r0, #12]
 8008c84:	4605      	mov	r5, r0
 8008c86:	bb02      	cbnz	r2, 8008cca <_dtoa_r+0xa7a>
 8008c88:	4601      	mov	r1, r0
 8008c8a:	4650      	mov	r0, sl
 8008c8c:	f000 fc98 	bl	80095c0 <__mcmp>
 8008c90:	4602      	mov	r2, r0
 8008c92:	4629      	mov	r1, r5
 8008c94:	4620      	mov	r0, r4
 8008c96:	9209      	str	r2, [sp, #36]	; 0x24
 8008c98:	f000 fa0c 	bl	80090b4 <_Bfree>
 8008c9c:	9b07      	ldr	r3, [sp, #28]
 8008c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ca0:	9d04      	ldr	r5, [sp, #16]
 8008ca2:	ea43 0102 	orr.w	r1, r3, r2
 8008ca6:	9b06      	ldr	r3, [sp, #24]
 8008ca8:	4319      	orrs	r1, r3
 8008caa:	d110      	bne.n	8008cce <_dtoa_r+0xa7e>
 8008cac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008cb0:	d029      	beq.n	8008d06 <_dtoa_r+0xab6>
 8008cb2:	9b05      	ldr	r3, [sp, #20]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	dd02      	ble.n	8008cbe <_dtoa_r+0xa6e>
 8008cb8:	9b02      	ldr	r3, [sp, #8]
 8008cba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008cbe:	9b01      	ldr	r3, [sp, #4]
 8008cc0:	f883 9000 	strb.w	r9, [r3]
 8008cc4:	e774      	b.n	8008bb0 <_dtoa_r+0x960>
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	e7ba      	b.n	8008c40 <_dtoa_r+0x9f0>
 8008cca:	2201      	movs	r2, #1
 8008ccc:	e7e1      	b.n	8008c92 <_dtoa_r+0xa42>
 8008cce:	9b05      	ldr	r3, [sp, #20]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	db04      	blt.n	8008cde <_dtoa_r+0xa8e>
 8008cd4:	9907      	ldr	r1, [sp, #28]
 8008cd6:	430b      	orrs	r3, r1
 8008cd8:	9906      	ldr	r1, [sp, #24]
 8008cda:	430b      	orrs	r3, r1
 8008cdc:	d120      	bne.n	8008d20 <_dtoa_r+0xad0>
 8008cde:	2a00      	cmp	r2, #0
 8008ce0:	dded      	ble.n	8008cbe <_dtoa_r+0xa6e>
 8008ce2:	4651      	mov	r1, sl
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f000 fbfe 	bl	80094e8 <__lshift>
 8008cec:	4631      	mov	r1, r6
 8008cee:	4682      	mov	sl, r0
 8008cf0:	f000 fc66 	bl	80095c0 <__mcmp>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	dc03      	bgt.n	8008d00 <_dtoa_r+0xab0>
 8008cf8:	d1e1      	bne.n	8008cbe <_dtoa_r+0xa6e>
 8008cfa:	f019 0f01 	tst.w	r9, #1
 8008cfe:	d0de      	beq.n	8008cbe <_dtoa_r+0xa6e>
 8008d00:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d04:	d1d8      	bne.n	8008cb8 <_dtoa_r+0xa68>
 8008d06:	9a01      	ldr	r2, [sp, #4]
 8008d08:	2339      	movs	r3, #57	; 0x39
 8008d0a:	7013      	strb	r3, [r2, #0]
 8008d0c:	462b      	mov	r3, r5
 8008d0e:	461d      	mov	r5, r3
 8008d10:	3b01      	subs	r3, #1
 8008d12:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d16:	2a39      	cmp	r2, #57	; 0x39
 8008d18:	d06c      	beq.n	8008df4 <_dtoa_r+0xba4>
 8008d1a:	3201      	adds	r2, #1
 8008d1c:	701a      	strb	r2, [r3, #0]
 8008d1e:	e747      	b.n	8008bb0 <_dtoa_r+0x960>
 8008d20:	2a00      	cmp	r2, #0
 8008d22:	dd07      	ble.n	8008d34 <_dtoa_r+0xae4>
 8008d24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008d28:	d0ed      	beq.n	8008d06 <_dtoa_r+0xab6>
 8008d2a:	9a01      	ldr	r2, [sp, #4]
 8008d2c:	f109 0301 	add.w	r3, r9, #1
 8008d30:	7013      	strb	r3, [r2, #0]
 8008d32:	e73d      	b.n	8008bb0 <_dtoa_r+0x960>
 8008d34:	9b04      	ldr	r3, [sp, #16]
 8008d36:	9a08      	ldr	r2, [sp, #32]
 8008d38:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d043      	beq.n	8008dc8 <_dtoa_r+0xb78>
 8008d40:	4651      	mov	r1, sl
 8008d42:	2300      	movs	r3, #0
 8008d44:	220a      	movs	r2, #10
 8008d46:	4620      	mov	r0, r4
 8008d48:	f000 f9d6 	bl	80090f8 <__multadd>
 8008d4c:	45b8      	cmp	r8, r7
 8008d4e:	4682      	mov	sl, r0
 8008d50:	f04f 0300 	mov.w	r3, #0
 8008d54:	f04f 020a 	mov.w	r2, #10
 8008d58:	4641      	mov	r1, r8
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	d107      	bne.n	8008d6e <_dtoa_r+0xb1e>
 8008d5e:	f000 f9cb 	bl	80090f8 <__multadd>
 8008d62:	4680      	mov	r8, r0
 8008d64:	4607      	mov	r7, r0
 8008d66:	9b04      	ldr	r3, [sp, #16]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	9304      	str	r3, [sp, #16]
 8008d6c:	e775      	b.n	8008c5a <_dtoa_r+0xa0a>
 8008d6e:	f000 f9c3 	bl	80090f8 <__multadd>
 8008d72:	4639      	mov	r1, r7
 8008d74:	4680      	mov	r8, r0
 8008d76:	2300      	movs	r3, #0
 8008d78:	220a      	movs	r2, #10
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f000 f9bc 	bl	80090f8 <__multadd>
 8008d80:	4607      	mov	r7, r0
 8008d82:	e7f0      	b.n	8008d66 <_dtoa_r+0xb16>
 8008d84:	9b04      	ldr	r3, [sp, #16]
 8008d86:	9301      	str	r3, [sp, #4]
 8008d88:	9d00      	ldr	r5, [sp, #0]
 8008d8a:	4631      	mov	r1, r6
 8008d8c:	4650      	mov	r0, sl
 8008d8e:	f7ff f9d7 	bl	8008140 <quorem>
 8008d92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008d96:	9b00      	ldr	r3, [sp, #0]
 8008d98:	f805 9b01 	strb.w	r9, [r5], #1
 8008d9c:	1aea      	subs	r2, r5, r3
 8008d9e:	9b01      	ldr	r3, [sp, #4]
 8008da0:	4293      	cmp	r3, r2
 8008da2:	dd07      	ble.n	8008db4 <_dtoa_r+0xb64>
 8008da4:	4651      	mov	r1, sl
 8008da6:	2300      	movs	r3, #0
 8008da8:	220a      	movs	r2, #10
 8008daa:	4620      	mov	r0, r4
 8008dac:	f000 f9a4 	bl	80090f8 <__multadd>
 8008db0:	4682      	mov	sl, r0
 8008db2:	e7ea      	b.n	8008d8a <_dtoa_r+0xb3a>
 8008db4:	9b01      	ldr	r3, [sp, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	bfc8      	it	gt
 8008dba:	461d      	movgt	r5, r3
 8008dbc:	9b00      	ldr	r3, [sp, #0]
 8008dbe:	bfd8      	it	le
 8008dc0:	2501      	movle	r5, #1
 8008dc2:	441d      	add	r5, r3
 8008dc4:	f04f 0800 	mov.w	r8, #0
 8008dc8:	4651      	mov	r1, sl
 8008dca:	2201      	movs	r2, #1
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f000 fb8b 	bl	80094e8 <__lshift>
 8008dd2:	4631      	mov	r1, r6
 8008dd4:	4682      	mov	sl, r0
 8008dd6:	f000 fbf3 	bl	80095c0 <__mcmp>
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	dc96      	bgt.n	8008d0c <_dtoa_r+0xabc>
 8008dde:	d102      	bne.n	8008de6 <_dtoa_r+0xb96>
 8008de0:	f019 0f01 	tst.w	r9, #1
 8008de4:	d192      	bne.n	8008d0c <_dtoa_r+0xabc>
 8008de6:	462b      	mov	r3, r5
 8008de8:	461d      	mov	r5, r3
 8008dea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008dee:	2a30      	cmp	r2, #48	; 0x30
 8008df0:	d0fa      	beq.n	8008de8 <_dtoa_r+0xb98>
 8008df2:	e6dd      	b.n	8008bb0 <_dtoa_r+0x960>
 8008df4:	9a00      	ldr	r2, [sp, #0]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d189      	bne.n	8008d0e <_dtoa_r+0xabe>
 8008dfa:	f10b 0b01 	add.w	fp, fp, #1
 8008dfe:	2331      	movs	r3, #49	; 0x31
 8008e00:	e796      	b.n	8008d30 <_dtoa_r+0xae0>
 8008e02:	4b0a      	ldr	r3, [pc, #40]	; (8008e2c <_dtoa_r+0xbdc>)
 8008e04:	f7ff ba99 	b.w	800833a <_dtoa_r+0xea>
 8008e08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f47f aa6d 	bne.w	80082ea <_dtoa_r+0x9a>
 8008e10:	4b07      	ldr	r3, [pc, #28]	; (8008e30 <_dtoa_r+0xbe0>)
 8008e12:	f7ff ba92 	b.w	800833a <_dtoa_r+0xea>
 8008e16:	9b01      	ldr	r3, [sp, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	dcb5      	bgt.n	8008d88 <_dtoa_r+0xb38>
 8008e1c:	9b07      	ldr	r3, [sp, #28]
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	f73f aeb1 	bgt.w	8008b86 <_dtoa_r+0x936>
 8008e24:	e7b0      	b.n	8008d88 <_dtoa_r+0xb38>
 8008e26:	bf00      	nop
 8008e28:	0800b9bd 	.word	0x0800b9bd
 8008e2c:	0800b918 	.word	0x0800b918
 8008e30:	0800b941 	.word	0x0800b941

08008e34 <_free_r>:
 8008e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e36:	2900      	cmp	r1, #0
 8008e38:	d044      	beq.n	8008ec4 <_free_r+0x90>
 8008e3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e3e:	9001      	str	r0, [sp, #4]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f1a1 0404 	sub.w	r4, r1, #4
 8008e46:	bfb8      	it	lt
 8008e48:	18e4      	addlt	r4, r4, r3
 8008e4a:	f000 f8e7 	bl	800901c <__malloc_lock>
 8008e4e:	4a1e      	ldr	r2, [pc, #120]	; (8008ec8 <_free_r+0x94>)
 8008e50:	9801      	ldr	r0, [sp, #4]
 8008e52:	6813      	ldr	r3, [r2, #0]
 8008e54:	b933      	cbnz	r3, 8008e64 <_free_r+0x30>
 8008e56:	6063      	str	r3, [r4, #4]
 8008e58:	6014      	str	r4, [r2, #0]
 8008e5a:	b003      	add	sp, #12
 8008e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e60:	f000 b8e2 	b.w	8009028 <__malloc_unlock>
 8008e64:	42a3      	cmp	r3, r4
 8008e66:	d908      	bls.n	8008e7a <_free_r+0x46>
 8008e68:	6825      	ldr	r5, [r4, #0]
 8008e6a:	1961      	adds	r1, r4, r5
 8008e6c:	428b      	cmp	r3, r1
 8008e6e:	bf01      	itttt	eq
 8008e70:	6819      	ldreq	r1, [r3, #0]
 8008e72:	685b      	ldreq	r3, [r3, #4]
 8008e74:	1949      	addeq	r1, r1, r5
 8008e76:	6021      	streq	r1, [r4, #0]
 8008e78:	e7ed      	b.n	8008e56 <_free_r+0x22>
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	b10b      	cbz	r3, 8008e84 <_free_r+0x50>
 8008e80:	42a3      	cmp	r3, r4
 8008e82:	d9fa      	bls.n	8008e7a <_free_r+0x46>
 8008e84:	6811      	ldr	r1, [r2, #0]
 8008e86:	1855      	adds	r5, r2, r1
 8008e88:	42a5      	cmp	r5, r4
 8008e8a:	d10b      	bne.n	8008ea4 <_free_r+0x70>
 8008e8c:	6824      	ldr	r4, [r4, #0]
 8008e8e:	4421      	add	r1, r4
 8008e90:	1854      	adds	r4, r2, r1
 8008e92:	42a3      	cmp	r3, r4
 8008e94:	6011      	str	r1, [r2, #0]
 8008e96:	d1e0      	bne.n	8008e5a <_free_r+0x26>
 8008e98:	681c      	ldr	r4, [r3, #0]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	6053      	str	r3, [r2, #4]
 8008e9e:	440c      	add	r4, r1
 8008ea0:	6014      	str	r4, [r2, #0]
 8008ea2:	e7da      	b.n	8008e5a <_free_r+0x26>
 8008ea4:	d902      	bls.n	8008eac <_free_r+0x78>
 8008ea6:	230c      	movs	r3, #12
 8008ea8:	6003      	str	r3, [r0, #0]
 8008eaa:	e7d6      	b.n	8008e5a <_free_r+0x26>
 8008eac:	6825      	ldr	r5, [r4, #0]
 8008eae:	1961      	adds	r1, r4, r5
 8008eb0:	428b      	cmp	r3, r1
 8008eb2:	bf04      	itt	eq
 8008eb4:	6819      	ldreq	r1, [r3, #0]
 8008eb6:	685b      	ldreq	r3, [r3, #4]
 8008eb8:	6063      	str	r3, [r4, #4]
 8008eba:	bf04      	itt	eq
 8008ebc:	1949      	addeq	r1, r1, r5
 8008ebe:	6021      	streq	r1, [r4, #0]
 8008ec0:	6054      	str	r4, [r2, #4]
 8008ec2:	e7ca      	b.n	8008e5a <_free_r+0x26>
 8008ec4:	b003      	add	sp, #12
 8008ec6:	bd30      	pop	{r4, r5, pc}
 8008ec8:	20000540 	.word	0x20000540

08008ecc <malloc>:
 8008ecc:	4b02      	ldr	r3, [pc, #8]	; (8008ed8 <malloc+0xc>)
 8008ece:	4601      	mov	r1, r0
 8008ed0:	6818      	ldr	r0, [r3, #0]
 8008ed2:	f000 b823 	b.w	8008f1c <_malloc_r>
 8008ed6:	bf00      	nop
 8008ed8:	20000064 	.word	0x20000064

08008edc <sbrk_aligned>:
 8008edc:	b570      	push	{r4, r5, r6, lr}
 8008ede:	4e0e      	ldr	r6, [pc, #56]	; (8008f18 <sbrk_aligned+0x3c>)
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	6831      	ldr	r1, [r6, #0]
 8008ee4:	4605      	mov	r5, r0
 8008ee6:	b911      	cbnz	r1, 8008eee <sbrk_aligned+0x12>
 8008ee8:	f001 fe1a 	bl	800ab20 <_sbrk_r>
 8008eec:	6030      	str	r0, [r6, #0]
 8008eee:	4621      	mov	r1, r4
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	f001 fe15 	bl	800ab20 <_sbrk_r>
 8008ef6:	1c43      	adds	r3, r0, #1
 8008ef8:	d00a      	beq.n	8008f10 <sbrk_aligned+0x34>
 8008efa:	1cc4      	adds	r4, r0, #3
 8008efc:	f024 0403 	bic.w	r4, r4, #3
 8008f00:	42a0      	cmp	r0, r4
 8008f02:	d007      	beq.n	8008f14 <sbrk_aligned+0x38>
 8008f04:	1a21      	subs	r1, r4, r0
 8008f06:	4628      	mov	r0, r5
 8008f08:	f001 fe0a 	bl	800ab20 <_sbrk_r>
 8008f0c:	3001      	adds	r0, #1
 8008f0e:	d101      	bne.n	8008f14 <sbrk_aligned+0x38>
 8008f10:	f04f 34ff 	mov.w	r4, #4294967295
 8008f14:	4620      	mov	r0, r4
 8008f16:	bd70      	pop	{r4, r5, r6, pc}
 8008f18:	20000544 	.word	0x20000544

08008f1c <_malloc_r>:
 8008f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f20:	1ccd      	adds	r5, r1, #3
 8008f22:	f025 0503 	bic.w	r5, r5, #3
 8008f26:	3508      	adds	r5, #8
 8008f28:	2d0c      	cmp	r5, #12
 8008f2a:	bf38      	it	cc
 8008f2c:	250c      	movcc	r5, #12
 8008f2e:	2d00      	cmp	r5, #0
 8008f30:	4607      	mov	r7, r0
 8008f32:	db01      	blt.n	8008f38 <_malloc_r+0x1c>
 8008f34:	42a9      	cmp	r1, r5
 8008f36:	d905      	bls.n	8008f44 <_malloc_r+0x28>
 8008f38:	230c      	movs	r3, #12
 8008f3a:	603b      	str	r3, [r7, #0]
 8008f3c:	2600      	movs	r6, #0
 8008f3e:	4630      	mov	r0, r6
 8008f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009018 <_malloc_r+0xfc>
 8008f48:	f000 f868 	bl	800901c <__malloc_lock>
 8008f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8008f50:	461c      	mov	r4, r3
 8008f52:	bb5c      	cbnz	r4, 8008fac <_malloc_r+0x90>
 8008f54:	4629      	mov	r1, r5
 8008f56:	4638      	mov	r0, r7
 8008f58:	f7ff ffc0 	bl	8008edc <sbrk_aligned>
 8008f5c:	1c43      	adds	r3, r0, #1
 8008f5e:	4604      	mov	r4, r0
 8008f60:	d155      	bne.n	800900e <_malloc_r+0xf2>
 8008f62:	f8d8 4000 	ldr.w	r4, [r8]
 8008f66:	4626      	mov	r6, r4
 8008f68:	2e00      	cmp	r6, #0
 8008f6a:	d145      	bne.n	8008ff8 <_malloc_r+0xdc>
 8008f6c:	2c00      	cmp	r4, #0
 8008f6e:	d048      	beq.n	8009002 <_malloc_r+0xe6>
 8008f70:	6823      	ldr	r3, [r4, #0]
 8008f72:	4631      	mov	r1, r6
 8008f74:	4638      	mov	r0, r7
 8008f76:	eb04 0903 	add.w	r9, r4, r3
 8008f7a:	f001 fdd1 	bl	800ab20 <_sbrk_r>
 8008f7e:	4581      	cmp	r9, r0
 8008f80:	d13f      	bne.n	8009002 <_malloc_r+0xe6>
 8008f82:	6821      	ldr	r1, [r4, #0]
 8008f84:	1a6d      	subs	r5, r5, r1
 8008f86:	4629      	mov	r1, r5
 8008f88:	4638      	mov	r0, r7
 8008f8a:	f7ff ffa7 	bl	8008edc <sbrk_aligned>
 8008f8e:	3001      	adds	r0, #1
 8008f90:	d037      	beq.n	8009002 <_malloc_r+0xe6>
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	442b      	add	r3, r5
 8008f96:	6023      	str	r3, [r4, #0]
 8008f98:	f8d8 3000 	ldr.w	r3, [r8]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d038      	beq.n	8009012 <_malloc_r+0xf6>
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	42a2      	cmp	r2, r4
 8008fa4:	d12b      	bne.n	8008ffe <_malloc_r+0xe2>
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	605a      	str	r2, [r3, #4]
 8008faa:	e00f      	b.n	8008fcc <_malloc_r+0xb0>
 8008fac:	6822      	ldr	r2, [r4, #0]
 8008fae:	1b52      	subs	r2, r2, r5
 8008fb0:	d41f      	bmi.n	8008ff2 <_malloc_r+0xd6>
 8008fb2:	2a0b      	cmp	r2, #11
 8008fb4:	d917      	bls.n	8008fe6 <_malloc_r+0xca>
 8008fb6:	1961      	adds	r1, r4, r5
 8008fb8:	42a3      	cmp	r3, r4
 8008fba:	6025      	str	r5, [r4, #0]
 8008fbc:	bf18      	it	ne
 8008fbe:	6059      	strne	r1, [r3, #4]
 8008fc0:	6863      	ldr	r3, [r4, #4]
 8008fc2:	bf08      	it	eq
 8008fc4:	f8c8 1000 	streq.w	r1, [r8]
 8008fc8:	5162      	str	r2, [r4, r5]
 8008fca:	604b      	str	r3, [r1, #4]
 8008fcc:	4638      	mov	r0, r7
 8008fce:	f104 060b 	add.w	r6, r4, #11
 8008fd2:	f000 f829 	bl	8009028 <__malloc_unlock>
 8008fd6:	f026 0607 	bic.w	r6, r6, #7
 8008fda:	1d23      	adds	r3, r4, #4
 8008fdc:	1af2      	subs	r2, r6, r3
 8008fde:	d0ae      	beq.n	8008f3e <_malloc_r+0x22>
 8008fe0:	1b9b      	subs	r3, r3, r6
 8008fe2:	50a3      	str	r3, [r4, r2]
 8008fe4:	e7ab      	b.n	8008f3e <_malloc_r+0x22>
 8008fe6:	42a3      	cmp	r3, r4
 8008fe8:	6862      	ldr	r2, [r4, #4]
 8008fea:	d1dd      	bne.n	8008fa8 <_malloc_r+0x8c>
 8008fec:	f8c8 2000 	str.w	r2, [r8]
 8008ff0:	e7ec      	b.n	8008fcc <_malloc_r+0xb0>
 8008ff2:	4623      	mov	r3, r4
 8008ff4:	6864      	ldr	r4, [r4, #4]
 8008ff6:	e7ac      	b.n	8008f52 <_malloc_r+0x36>
 8008ff8:	4634      	mov	r4, r6
 8008ffa:	6876      	ldr	r6, [r6, #4]
 8008ffc:	e7b4      	b.n	8008f68 <_malloc_r+0x4c>
 8008ffe:	4613      	mov	r3, r2
 8009000:	e7cc      	b.n	8008f9c <_malloc_r+0x80>
 8009002:	230c      	movs	r3, #12
 8009004:	603b      	str	r3, [r7, #0]
 8009006:	4638      	mov	r0, r7
 8009008:	f000 f80e 	bl	8009028 <__malloc_unlock>
 800900c:	e797      	b.n	8008f3e <_malloc_r+0x22>
 800900e:	6025      	str	r5, [r4, #0]
 8009010:	e7dc      	b.n	8008fcc <_malloc_r+0xb0>
 8009012:	605b      	str	r3, [r3, #4]
 8009014:	deff      	udf	#255	; 0xff
 8009016:	bf00      	nop
 8009018:	20000540 	.word	0x20000540

0800901c <__malloc_lock>:
 800901c:	4801      	ldr	r0, [pc, #4]	; (8009024 <__malloc_lock+0x8>)
 800901e:	f7ff b886 	b.w	800812e <__retarget_lock_acquire_recursive>
 8009022:	bf00      	nop
 8009024:	2000053c 	.word	0x2000053c

08009028 <__malloc_unlock>:
 8009028:	4801      	ldr	r0, [pc, #4]	; (8009030 <__malloc_unlock+0x8>)
 800902a:	f7ff b881 	b.w	8008130 <__retarget_lock_release_recursive>
 800902e:	bf00      	nop
 8009030:	2000053c 	.word	0x2000053c

08009034 <_Balloc>:
 8009034:	b570      	push	{r4, r5, r6, lr}
 8009036:	69c6      	ldr	r6, [r0, #28]
 8009038:	4604      	mov	r4, r0
 800903a:	460d      	mov	r5, r1
 800903c:	b976      	cbnz	r6, 800905c <_Balloc+0x28>
 800903e:	2010      	movs	r0, #16
 8009040:	f7ff ff44 	bl	8008ecc <malloc>
 8009044:	4602      	mov	r2, r0
 8009046:	61e0      	str	r0, [r4, #28]
 8009048:	b920      	cbnz	r0, 8009054 <_Balloc+0x20>
 800904a:	4b18      	ldr	r3, [pc, #96]	; (80090ac <_Balloc+0x78>)
 800904c:	4818      	ldr	r0, [pc, #96]	; (80090b0 <_Balloc+0x7c>)
 800904e:	216b      	movs	r1, #107	; 0x6b
 8009050:	f001 fd8e 	bl	800ab70 <__assert_func>
 8009054:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009058:	6006      	str	r6, [r0, #0]
 800905a:	60c6      	str	r6, [r0, #12]
 800905c:	69e6      	ldr	r6, [r4, #28]
 800905e:	68f3      	ldr	r3, [r6, #12]
 8009060:	b183      	cbz	r3, 8009084 <_Balloc+0x50>
 8009062:	69e3      	ldr	r3, [r4, #28]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800906a:	b9b8      	cbnz	r0, 800909c <_Balloc+0x68>
 800906c:	2101      	movs	r1, #1
 800906e:	fa01 f605 	lsl.w	r6, r1, r5
 8009072:	1d72      	adds	r2, r6, #5
 8009074:	0092      	lsls	r2, r2, #2
 8009076:	4620      	mov	r0, r4
 8009078:	f001 fd98 	bl	800abac <_calloc_r>
 800907c:	b160      	cbz	r0, 8009098 <_Balloc+0x64>
 800907e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009082:	e00e      	b.n	80090a2 <_Balloc+0x6e>
 8009084:	2221      	movs	r2, #33	; 0x21
 8009086:	2104      	movs	r1, #4
 8009088:	4620      	mov	r0, r4
 800908a:	f001 fd8f 	bl	800abac <_calloc_r>
 800908e:	69e3      	ldr	r3, [r4, #28]
 8009090:	60f0      	str	r0, [r6, #12]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1e4      	bne.n	8009062 <_Balloc+0x2e>
 8009098:	2000      	movs	r0, #0
 800909a:	bd70      	pop	{r4, r5, r6, pc}
 800909c:	6802      	ldr	r2, [r0, #0]
 800909e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090a2:	2300      	movs	r3, #0
 80090a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090a8:	e7f7      	b.n	800909a <_Balloc+0x66>
 80090aa:	bf00      	nop
 80090ac:	0800b94e 	.word	0x0800b94e
 80090b0:	0800b9ce 	.word	0x0800b9ce

080090b4 <_Bfree>:
 80090b4:	b570      	push	{r4, r5, r6, lr}
 80090b6:	69c6      	ldr	r6, [r0, #28]
 80090b8:	4605      	mov	r5, r0
 80090ba:	460c      	mov	r4, r1
 80090bc:	b976      	cbnz	r6, 80090dc <_Bfree+0x28>
 80090be:	2010      	movs	r0, #16
 80090c0:	f7ff ff04 	bl	8008ecc <malloc>
 80090c4:	4602      	mov	r2, r0
 80090c6:	61e8      	str	r0, [r5, #28]
 80090c8:	b920      	cbnz	r0, 80090d4 <_Bfree+0x20>
 80090ca:	4b09      	ldr	r3, [pc, #36]	; (80090f0 <_Bfree+0x3c>)
 80090cc:	4809      	ldr	r0, [pc, #36]	; (80090f4 <_Bfree+0x40>)
 80090ce:	218f      	movs	r1, #143	; 0x8f
 80090d0:	f001 fd4e 	bl	800ab70 <__assert_func>
 80090d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090d8:	6006      	str	r6, [r0, #0]
 80090da:	60c6      	str	r6, [r0, #12]
 80090dc:	b13c      	cbz	r4, 80090ee <_Bfree+0x3a>
 80090de:	69eb      	ldr	r3, [r5, #28]
 80090e0:	6862      	ldr	r2, [r4, #4]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090e8:	6021      	str	r1, [r4, #0]
 80090ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80090ee:	bd70      	pop	{r4, r5, r6, pc}
 80090f0:	0800b94e 	.word	0x0800b94e
 80090f4:	0800b9ce 	.word	0x0800b9ce

080090f8 <__multadd>:
 80090f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090fc:	690d      	ldr	r5, [r1, #16]
 80090fe:	4607      	mov	r7, r0
 8009100:	460c      	mov	r4, r1
 8009102:	461e      	mov	r6, r3
 8009104:	f101 0c14 	add.w	ip, r1, #20
 8009108:	2000      	movs	r0, #0
 800910a:	f8dc 3000 	ldr.w	r3, [ip]
 800910e:	b299      	uxth	r1, r3
 8009110:	fb02 6101 	mla	r1, r2, r1, r6
 8009114:	0c1e      	lsrs	r6, r3, #16
 8009116:	0c0b      	lsrs	r3, r1, #16
 8009118:	fb02 3306 	mla	r3, r2, r6, r3
 800911c:	b289      	uxth	r1, r1
 800911e:	3001      	adds	r0, #1
 8009120:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009124:	4285      	cmp	r5, r0
 8009126:	f84c 1b04 	str.w	r1, [ip], #4
 800912a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800912e:	dcec      	bgt.n	800910a <__multadd+0x12>
 8009130:	b30e      	cbz	r6, 8009176 <__multadd+0x7e>
 8009132:	68a3      	ldr	r3, [r4, #8]
 8009134:	42ab      	cmp	r3, r5
 8009136:	dc19      	bgt.n	800916c <__multadd+0x74>
 8009138:	6861      	ldr	r1, [r4, #4]
 800913a:	4638      	mov	r0, r7
 800913c:	3101      	adds	r1, #1
 800913e:	f7ff ff79 	bl	8009034 <_Balloc>
 8009142:	4680      	mov	r8, r0
 8009144:	b928      	cbnz	r0, 8009152 <__multadd+0x5a>
 8009146:	4602      	mov	r2, r0
 8009148:	4b0c      	ldr	r3, [pc, #48]	; (800917c <__multadd+0x84>)
 800914a:	480d      	ldr	r0, [pc, #52]	; (8009180 <__multadd+0x88>)
 800914c:	21ba      	movs	r1, #186	; 0xba
 800914e:	f001 fd0f 	bl	800ab70 <__assert_func>
 8009152:	6922      	ldr	r2, [r4, #16]
 8009154:	3202      	adds	r2, #2
 8009156:	f104 010c 	add.w	r1, r4, #12
 800915a:	0092      	lsls	r2, r2, #2
 800915c:	300c      	adds	r0, #12
 800915e:	f001 fcef 	bl	800ab40 <memcpy>
 8009162:	4621      	mov	r1, r4
 8009164:	4638      	mov	r0, r7
 8009166:	f7ff ffa5 	bl	80090b4 <_Bfree>
 800916a:	4644      	mov	r4, r8
 800916c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009170:	3501      	adds	r5, #1
 8009172:	615e      	str	r6, [r3, #20]
 8009174:	6125      	str	r5, [r4, #16]
 8009176:	4620      	mov	r0, r4
 8009178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800917c:	0800b9bd 	.word	0x0800b9bd
 8009180:	0800b9ce 	.word	0x0800b9ce

08009184 <__s2b>:
 8009184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009188:	460c      	mov	r4, r1
 800918a:	4615      	mov	r5, r2
 800918c:	461f      	mov	r7, r3
 800918e:	2209      	movs	r2, #9
 8009190:	3308      	adds	r3, #8
 8009192:	4606      	mov	r6, r0
 8009194:	fb93 f3f2 	sdiv	r3, r3, r2
 8009198:	2100      	movs	r1, #0
 800919a:	2201      	movs	r2, #1
 800919c:	429a      	cmp	r2, r3
 800919e:	db09      	blt.n	80091b4 <__s2b+0x30>
 80091a0:	4630      	mov	r0, r6
 80091a2:	f7ff ff47 	bl	8009034 <_Balloc>
 80091a6:	b940      	cbnz	r0, 80091ba <__s2b+0x36>
 80091a8:	4602      	mov	r2, r0
 80091aa:	4b19      	ldr	r3, [pc, #100]	; (8009210 <__s2b+0x8c>)
 80091ac:	4819      	ldr	r0, [pc, #100]	; (8009214 <__s2b+0x90>)
 80091ae:	21d3      	movs	r1, #211	; 0xd3
 80091b0:	f001 fcde 	bl	800ab70 <__assert_func>
 80091b4:	0052      	lsls	r2, r2, #1
 80091b6:	3101      	adds	r1, #1
 80091b8:	e7f0      	b.n	800919c <__s2b+0x18>
 80091ba:	9b08      	ldr	r3, [sp, #32]
 80091bc:	6143      	str	r3, [r0, #20]
 80091be:	2d09      	cmp	r5, #9
 80091c0:	f04f 0301 	mov.w	r3, #1
 80091c4:	6103      	str	r3, [r0, #16]
 80091c6:	dd16      	ble.n	80091f6 <__s2b+0x72>
 80091c8:	f104 0909 	add.w	r9, r4, #9
 80091cc:	46c8      	mov	r8, r9
 80091ce:	442c      	add	r4, r5
 80091d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80091d4:	4601      	mov	r1, r0
 80091d6:	3b30      	subs	r3, #48	; 0x30
 80091d8:	220a      	movs	r2, #10
 80091da:	4630      	mov	r0, r6
 80091dc:	f7ff ff8c 	bl	80090f8 <__multadd>
 80091e0:	45a0      	cmp	r8, r4
 80091e2:	d1f5      	bne.n	80091d0 <__s2b+0x4c>
 80091e4:	f1a5 0408 	sub.w	r4, r5, #8
 80091e8:	444c      	add	r4, r9
 80091ea:	1b2d      	subs	r5, r5, r4
 80091ec:	1963      	adds	r3, r4, r5
 80091ee:	42bb      	cmp	r3, r7
 80091f0:	db04      	blt.n	80091fc <__s2b+0x78>
 80091f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091f6:	340a      	adds	r4, #10
 80091f8:	2509      	movs	r5, #9
 80091fa:	e7f6      	b.n	80091ea <__s2b+0x66>
 80091fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009200:	4601      	mov	r1, r0
 8009202:	3b30      	subs	r3, #48	; 0x30
 8009204:	220a      	movs	r2, #10
 8009206:	4630      	mov	r0, r6
 8009208:	f7ff ff76 	bl	80090f8 <__multadd>
 800920c:	e7ee      	b.n	80091ec <__s2b+0x68>
 800920e:	bf00      	nop
 8009210:	0800b9bd 	.word	0x0800b9bd
 8009214:	0800b9ce 	.word	0x0800b9ce

08009218 <__hi0bits>:
 8009218:	0c03      	lsrs	r3, r0, #16
 800921a:	041b      	lsls	r3, r3, #16
 800921c:	b9d3      	cbnz	r3, 8009254 <__hi0bits+0x3c>
 800921e:	0400      	lsls	r0, r0, #16
 8009220:	2310      	movs	r3, #16
 8009222:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009226:	bf04      	itt	eq
 8009228:	0200      	lsleq	r0, r0, #8
 800922a:	3308      	addeq	r3, #8
 800922c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009230:	bf04      	itt	eq
 8009232:	0100      	lsleq	r0, r0, #4
 8009234:	3304      	addeq	r3, #4
 8009236:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800923a:	bf04      	itt	eq
 800923c:	0080      	lsleq	r0, r0, #2
 800923e:	3302      	addeq	r3, #2
 8009240:	2800      	cmp	r0, #0
 8009242:	db05      	blt.n	8009250 <__hi0bits+0x38>
 8009244:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009248:	f103 0301 	add.w	r3, r3, #1
 800924c:	bf08      	it	eq
 800924e:	2320      	moveq	r3, #32
 8009250:	4618      	mov	r0, r3
 8009252:	4770      	bx	lr
 8009254:	2300      	movs	r3, #0
 8009256:	e7e4      	b.n	8009222 <__hi0bits+0xa>

08009258 <__lo0bits>:
 8009258:	6803      	ldr	r3, [r0, #0]
 800925a:	f013 0207 	ands.w	r2, r3, #7
 800925e:	d00c      	beq.n	800927a <__lo0bits+0x22>
 8009260:	07d9      	lsls	r1, r3, #31
 8009262:	d422      	bmi.n	80092aa <__lo0bits+0x52>
 8009264:	079a      	lsls	r2, r3, #30
 8009266:	bf49      	itett	mi
 8009268:	085b      	lsrmi	r3, r3, #1
 800926a:	089b      	lsrpl	r3, r3, #2
 800926c:	6003      	strmi	r3, [r0, #0]
 800926e:	2201      	movmi	r2, #1
 8009270:	bf5c      	itt	pl
 8009272:	6003      	strpl	r3, [r0, #0]
 8009274:	2202      	movpl	r2, #2
 8009276:	4610      	mov	r0, r2
 8009278:	4770      	bx	lr
 800927a:	b299      	uxth	r1, r3
 800927c:	b909      	cbnz	r1, 8009282 <__lo0bits+0x2a>
 800927e:	0c1b      	lsrs	r3, r3, #16
 8009280:	2210      	movs	r2, #16
 8009282:	b2d9      	uxtb	r1, r3
 8009284:	b909      	cbnz	r1, 800928a <__lo0bits+0x32>
 8009286:	3208      	adds	r2, #8
 8009288:	0a1b      	lsrs	r3, r3, #8
 800928a:	0719      	lsls	r1, r3, #28
 800928c:	bf04      	itt	eq
 800928e:	091b      	lsreq	r3, r3, #4
 8009290:	3204      	addeq	r2, #4
 8009292:	0799      	lsls	r1, r3, #30
 8009294:	bf04      	itt	eq
 8009296:	089b      	lsreq	r3, r3, #2
 8009298:	3202      	addeq	r2, #2
 800929a:	07d9      	lsls	r1, r3, #31
 800929c:	d403      	bmi.n	80092a6 <__lo0bits+0x4e>
 800929e:	085b      	lsrs	r3, r3, #1
 80092a0:	f102 0201 	add.w	r2, r2, #1
 80092a4:	d003      	beq.n	80092ae <__lo0bits+0x56>
 80092a6:	6003      	str	r3, [r0, #0]
 80092a8:	e7e5      	b.n	8009276 <__lo0bits+0x1e>
 80092aa:	2200      	movs	r2, #0
 80092ac:	e7e3      	b.n	8009276 <__lo0bits+0x1e>
 80092ae:	2220      	movs	r2, #32
 80092b0:	e7e1      	b.n	8009276 <__lo0bits+0x1e>
	...

080092b4 <__i2b>:
 80092b4:	b510      	push	{r4, lr}
 80092b6:	460c      	mov	r4, r1
 80092b8:	2101      	movs	r1, #1
 80092ba:	f7ff febb 	bl	8009034 <_Balloc>
 80092be:	4602      	mov	r2, r0
 80092c0:	b928      	cbnz	r0, 80092ce <__i2b+0x1a>
 80092c2:	4b05      	ldr	r3, [pc, #20]	; (80092d8 <__i2b+0x24>)
 80092c4:	4805      	ldr	r0, [pc, #20]	; (80092dc <__i2b+0x28>)
 80092c6:	f240 1145 	movw	r1, #325	; 0x145
 80092ca:	f001 fc51 	bl	800ab70 <__assert_func>
 80092ce:	2301      	movs	r3, #1
 80092d0:	6144      	str	r4, [r0, #20]
 80092d2:	6103      	str	r3, [r0, #16]
 80092d4:	bd10      	pop	{r4, pc}
 80092d6:	bf00      	nop
 80092d8:	0800b9bd 	.word	0x0800b9bd
 80092dc:	0800b9ce 	.word	0x0800b9ce

080092e0 <__multiply>:
 80092e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e4:	4691      	mov	r9, r2
 80092e6:	690a      	ldr	r2, [r1, #16]
 80092e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	bfb8      	it	lt
 80092f0:	460b      	movlt	r3, r1
 80092f2:	460c      	mov	r4, r1
 80092f4:	bfbc      	itt	lt
 80092f6:	464c      	movlt	r4, r9
 80092f8:	4699      	movlt	r9, r3
 80092fa:	6927      	ldr	r7, [r4, #16]
 80092fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009300:	68a3      	ldr	r3, [r4, #8]
 8009302:	6861      	ldr	r1, [r4, #4]
 8009304:	eb07 060a 	add.w	r6, r7, sl
 8009308:	42b3      	cmp	r3, r6
 800930a:	b085      	sub	sp, #20
 800930c:	bfb8      	it	lt
 800930e:	3101      	addlt	r1, #1
 8009310:	f7ff fe90 	bl	8009034 <_Balloc>
 8009314:	b930      	cbnz	r0, 8009324 <__multiply+0x44>
 8009316:	4602      	mov	r2, r0
 8009318:	4b44      	ldr	r3, [pc, #272]	; (800942c <__multiply+0x14c>)
 800931a:	4845      	ldr	r0, [pc, #276]	; (8009430 <__multiply+0x150>)
 800931c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009320:	f001 fc26 	bl	800ab70 <__assert_func>
 8009324:	f100 0514 	add.w	r5, r0, #20
 8009328:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800932c:	462b      	mov	r3, r5
 800932e:	2200      	movs	r2, #0
 8009330:	4543      	cmp	r3, r8
 8009332:	d321      	bcc.n	8009378 <__multiply+0x98>
 8009334:	f104 0314 	add.w	r3, r4, #20
 8009338:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800933c:	f109 0314 	add.w	r3, r9, #20
 8009340:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009344:	9202      	str	r2, [sp, #8]
 8009346:	1b3a      	subs	r2, r7, r4
 8009348:	3a15      	subs	r2, #21
 800934a:	f022 0203 	bic.w	r2, r2, #3
 800934e:	3204      	adds	r2, #4
 8009350:	f104 0115 	add.w	r1, r4, #21
 8009354:	428f      	cmp	r7, r1
 8009356:	bf38      	it	cc
 8009358:	2204      	movcc	r2, #4
 800935a:	9201      	str	r2, [sp, #4]
 800935c:	9a02      	ldr	r2, [sp, #8]
 800935e:	9303      	str	r3, [sp, #12]
 8009360:	429a      	cmp	r2, r3
 8009362:	d80c      	bhi.n	800937e <__multiply+0x9e>
 8009364:	2e00      	cmp	r6, #0
 8009366:	dd03      	ble.n	8009370 <__multiply+0x90>
 8009368:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800936c:	2b00      	cmp	r3, #0
 800936e:	d05b      	beq.n	8009428 <__multiply+0x148>
 8009370:	6106      	str	r6, [r0, #16]
 8009372:	b005      	add	sp, #20
 8009374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009378:	f843 2b04 	str.w	r2, [r3], #4
 800937c:	e7d8      	b.n	8009330 <__multiply+0x50>
 800937e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009382:	f1ba 0f00 	cmp.w	sl, #0
 8009386:	d024      	beq.n	80093d2 <__multiply+0xf2>
 8009388:	f104 0e14 	add.w	lr, r4, #20
 800938c:	46a9      	mov	r9, r5
 800938e:	f04f 0c00 	mov.w	ip, #0
 8009392:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009396:	f8d9 1000 	ldr.w	r1, [r9]
 800939a:	fa1f fb82 	uxth.w	fp, r2
 800939e:	b289      	uxth	r1, r1
 80093a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80093a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80093a8:	f8d9 2000 	ldr.w	r2, [r9]
 80093ac:	4461      	add	r1, ip
 80093ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80093b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80093ba:	b289      	uxth	r1, r1
 80093bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80093c0:	4577      	cmp	r7, lr
 80093c2:	f849 1b04 	str.w	r1, [r9], #4
 80093c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093ca:	d8e2      	bhi.n	8009392 <__multiply+0xb2>
 80093cc:	9a01      	ldr	r2, [sp, #4]
 80093ce:	f845 c002 	str.w	ip, [r5, r2]
 80093d2:	9a03      	ldr	r2, [sp, #12]
 80093d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80093d8:	3304      	adds	r3, #4
 80093da:	f1b9 0f00 	cmp.w	r9, #0
 80093de:	d021      	beq.n	8009424 <__multiply+0x144>
 80093e0:	6829      	ldr	r1, [r5, #0]
 80093e2:	f104 0c14 	add.w	ip, r4, #20
 80093e6:	46ae      	mov	lr, r5
 80093e8:	f04f 0a00 	mov.w	sl, #0
 80093ec:	f8bc b000 	ldrh.w	fp, [ip]
 80093f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80093f4:	fb09 220b 	mla	r2, r9, fp, r2
 80093f8:	4452      	add	r2, sl
 80093fa:	b289      	uxth	r1, r1
 80093fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009400:	f84e 1b04 	str.w	r1, [lr], #4
 8009404:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009408:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800940c:	f8be 1000 	ldrh.w	r1, [lr]
 8009410:	fb09 110a 	mla	r1, r9, sl, r1
 8009414:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009418:	4567      	cmp	r7, ip
 800941a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800941e:	d8e5      	bhi.n	80093ec <__multiply+0x10c>
 8009420:	9a01      	ldr	r2, [sp, #4]
 8009422:	50a9      	str	r1, [r5, r2]
 8009424:	3504      	adds	r5, #4
 8009426:	e799      	b.n	800935c <__multiply+0x7c>
 8009428:	3e01      	subs	r6, #1
 800942a:	e79b      	b.n	8009364 <__multiply+0x84>
 800942c:	0800b9bd 	.word	0x0800b9bd
 8009430:	0800b9ce 	.word	0x0800b9ce

08009434 <__pow5mult>:
 8009434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009438:	4615      	mov	r5, r2
 800943a:	f012 0203 	ands.w	r2, r2, #3
 800943e:	4606      	mov	r6, r0
 8009440:	460f      	mov	r7, r1
 8009442:	d007      	beq.n	8009454 <__pow5mult+0x20>
 8009444:	4c25      	ldr	r4, [pc, #148]	; (80094dc <__pow5mult+0xa8>)
 8009446:	3a01      	subs	r2, #1
 8009448:	2300      	movs	r3, #0
 800944a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800944e:	f7ff fe53 	bl	80090f8 <__multadd>
 8009452:	4607      	mov	r7, r0
 8009454:	10ad      	asrs	r5, r5, #2
 8009456:	d03d      	beq.n	80094d4 <__pow5mult+0xa0>
 8009458:	69f4      	ldr	r4, [r6, #28]
 800945a:	b97c      	cbnz	r4, 800947c <__pow5mult+0x48>
 800945c:	2010      	movs	r0, #16
 800945e:	f7ff fd35 	bl	8008ecc <malloc>
 8009462:	4602      	mov	r2, r0
 8009464:	61f0      	str	r0, [r6, #28]
 8009466:	b928      	cbnz	r0, 8009474 <__pow5mult+0x40>
 8009468:	4b1d      	ldr	r3, [pc, #116]	; (80094e0 <__pow5mult+0xac>)
 800946a:	481e      	ldr	r0, [pc, #120]	; (80094e4 <__pow5mult+0xb0>)
 800946c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009470:	f001 fb7e 	bl	800ab70 <__assert_func>
 8009474:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009478:	6004      	str	r4, [r0, #0]
 800947a:	60c4      	str	r4, [r0, #12]
 800947c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009480:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009484:	b94c      	cbnz	r4, 800949a <__pow5mult+0x66>
 8009486:	f240 2171 	movw	r1, #625	; 0x271
 800948a:	4630      	mov	r0, r6
 800948c:	f7ff ff12 	bl	80092b4 <__i2b>
 8009490:	2300      	movs	r3, #0
 8009492:	f8c8 0008 	str.w	r0, [r8, #8]
 8009496:	4604      	mov	r4, r0
 8009498:	6003      	str	r3, [r0, #0]
 800949a:	f04f 0900 	mov.w	r9, #0
 800949e:	07eb      	lsls	r3, r5, #31
 80094a0:	d50a      	bpl.n	80094b8 <__pow5mult+0x84>
 80094a2:	4639      	mov	r1, r7
 80094a4:	4622      	mov	r2, r4
 80094a6:	4630      	mov	r0, r6
 80094a8:	f7ff ff1a 	bl	80092e0 <__multiply>
 80094ac:	4639      	mov	r1, r7
 80094ae:	4680      	mov	r8, r0
 80094b0:	4630      	mov	r0, r6
 80094b2:	f7ff fdff 	bl	80090b4 <_Bfree>
 80094b6:	4647      	mov	r7, r8
 80094b8:	106d      	asrs	r5, r5, #1
 80094ba:	d00b      	beq.n	80094d4 <__pow5mult+0xa0>
 80094bc:	6820      	ldr	r0, [r4, #0]
 80094be:	b938      	cbnz	r0, 80094d0 <__pow5mult+0x9c>
 80094c0:	4622      	mov	r2, r4
 80094c2:	4621      	mov	r1, r4
 80094c4:	4630      	mov	r0, r6
 80094c6:	f7ff ff0b 	bl	80092e0 <__multiply>
 80094ca:	6020      	str	r0, [r4, #0]
 80094cc:	f8c0 9000 	str.w	r9, [r0]
 80094d0:	4604      	mov	r4, r0
 80094d2:	e7e4      	b.n	800949e <__pow5mult+0x6a>
 80094d4:	4638      	mov	r0, r7
 80094d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094da:	bf00      	nop
 80094dc:	0800bb18 	.word	0x0800bb18
 80094e0:	0800b94e 	.word	0x0800b94e
 80094e4:	0800b9ce 	.word	0x0800b9ce

080094e8 <__lshift>:
 80094e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094ec:	460c      	mov	r4, r1
 80094ee:	6849      	ldr	r1, [r1, #4]
 80094f0:	6923      	ldr	r3, [r4, #16]
 80094f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094f6:	68a3      	ldr	r3, [r4, #8]
 80094f8:	4607      	mov	r7, r0
 80094fa:	4691      	mov	r9, r2
 80094fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009500:	f108 0601 	add.w	r6, r8, #1
 8009504:	42b3      	cmp	r3, r6
 8009506:	db0b      	blt.n	8009520 <__lshift+0x38>
 8009508:	4638      	mov	r0, r7
 800950a:	f7ff fd93 	bl	8009034 <_Balloc>
 800950e:	4605      	mov	r5, r0
 8009510:	b948      	cbnz	r0, 8009526 <__lshift+0x3e>
 8009512:	4602      	mov	r2, r0
 8009514:	4b28      	ldr	r3, [pc, #160]	; (80095b8 <__lshift+0xd0>)
 8009516:	4829      	ldr	r0, [pc, #164]	; (80095bc <__lshift+0xd4>)
 8009518:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800951c:	f001 fb28 	bl	800ab70 <__assert_func>
 8009520:	3101      	adds	r1, #1
 8009522:	005b      	lsls	r3, r3, #1
 8009524:	e7ee      	b.n	8009504 <__lshift+0x1c>
 8009526:	2300      	movs	r3, #0
 8009528:	f100 0114 	add.w	r1, r0, #20
 800952c:	f100 0210 	add.w	r2, r0, #16
 8009530:	4618      	mov	r0, r3
 8009532:	4553      	cmp	r3, sl
 8009534:	db33      	blt.n	800959e <__lshift+0xb6>
 8009536:	6920      	ldr	r0, [r4, #16]
 8009538:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800953c:	f104 0314 	add.w	r3, r4, #20
 8009540:	f019 091f 	ands.w	r9, r9, #31
 8009544:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009548:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800954c:	d02b      	beq.n	80095a6 <__lshift+0xbe>
 800954e:	f1c9 0e20 	rsb	lr, r9, #32
 8009552:	468a      	mov	sl, r1
 8009554:	2200      	movs	r2, #0
 8009556:	6818      	ldr	r0, [r3, #0]
 8009558:	fa00 f009 	lsl.w	r0, r0, r9
 800955c:	4310      	orrs	r0, r2
 800955e:	f84a 0b04 	str.w	r0, [sl], #4
 8009562:	f853 2b04 	ldr.w	r2, [r3], #4
 8009566:	459c      	cmp	ip, r3
 8009568:	fa22 f20e 	lsr.w	r2, r2, lr
 800956c:	d8f3      	bhi.n	8009556 <__lshift+0x6e>
 800956e:	ebac 0304 	sub.w	r3, ip, r4
 8009572:	3b15      	subs	r3, #21
 8009574:	f023 0303 	bic.w	r3, r3, #3
 8009578:	3304      	adds	r3, #4
 800957a:	f104 0015 	add.w	r0, r4, #21
 800957e:	4584      	cmp	ip, r0
 8009580:	bf38      	it	cc
 8009582:	2304      	movcc	r3, #4
 8009584:	50ca      	str	r2, [r1, r3]
 8009586:	b10a      	cbz	r2, 800958c <__lshift+0xa4>
 8009588:	f108 0602 	add.w	r6, r8, #2
 800958c:	3e01      	subs	r6, #1
 800958e:	4638      	mov	r0, r7
 8009590:	612e      	str	r6, [r5, #16]
 8009592:	4621      	mov	r1, r4
 8009594:	f7ff fd8e 	bl	80090b4 <_Bfree>
 8009598:	4628      	mov	r0, r5
 800959a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800959e:	f842 0f04 	str.w	r0, [r2, #4]!
 80095a2:	3301      	adds	r3, #1
 80095a4:	e7c5      	b.n	8009532 <__lshift+0x4a>
 80095a6:	3904      	subs	r1, #4
 80095a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80095ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80095b0:	459c      	cmp	ip, r3
 80095b2:	d8f9      	bhi.n	80095a8 <__lshift+0xc0>
 80095b4:	e7ea      	b.n	800958c <__lshift+0xa4>
 80095b6:	bf00      	nop
 80095b8:	0800b9bd 	.word	0x0800b9bd
 80095bc:	0800b9ce 	.word	0x0800b9ce

080095c0 <__mcmp>:
 80095c0:	b530      	push	{r4, r5, lr}
 80095c2:	6902      	ldr	r2, [r0, #16]
 80095c4:	690c      	ldr	r4, [r1, #16]
 80095c6:	1b12      	subs	r2, r2, r4
 80095c8:	d10e      	bne.n	80095e8 <__mcmp+0x28>
 80095ca:	f100 0314 	add.w	r3, r0, #20
 80095ce:	3114      	adds	r1, #20
 80095d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80095d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80095d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80095dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80095e0:	42a5      	cmp	r5, r4
 80095e2:	d003      	beq.n	80095ec <__mcmp+0x2c>
 80095e4:	d305      	bcc.n	80095f2 <__mcmp+0x32>
 80095e6:	2201      	movs	r2, #1
 80095e8:	4610      	mov	r0, r2
 80095ea:	bd30      	pop	{r4, r5, pc}
 80095ec:	4283      	cmp	r3, r0
 80095ee:	d3f3      	bcc.n	80095d8 <__mcmp+0x18>
 80095f0:	e7fa      	b.n	80095e8 <__mcmp+0x28>
 80095f2:	f04f 32ff 	mov.w	r2, #4294967295
 80095f6:	e7f7      	b.n	80095e8 <__mcmp+0x28>

080095f8 <__mdiff>:
 80095f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fc:	460c      	mov	r4, r1
 80095fe:	4606      	mov	r6, r0
 8009600:	4611      	mov	r1, r2
 8009602:	4620      	mov	r0, r4
 8009604:	4690      	mov	r8, r2
 8009606:	f7ff ffdb 	bl	80095c0 <__mcmp>
 800960a:	1e05      	subs	r5, r0, #0
 800960c:	d110      	bne.n	8009630 <__mdiff+0x38>
 800960e:	4629      	mov	r1, r5
 8009610:	4630      	mov	r0, r6
 8009612:	f7ff fd0f 	bl	8009034 <_Balloc>
 8009616:	b930      	cbnz	r0, 8009626 <__mdiff+0x2e>
 8009618:	4b3a      	ldr	r3, [pc, #232]	; (8009704 <__mdiff+0x10c>)
 800961a:	4602      	mov	r2, r0
 800961c:	f240 2137 	movw	r1, #567	; 0x237
 8009620:	4839      	ldr	r0, [pc, #228]	; (8009708 <__mdiff+0x110>)
 8009622:	f001 faa5 	bl	800ab70 <__assert_func>
 8009626:	2301      	movs	r3, #1
 8009628:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800962c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009630:	bfa4      	itt	ge
 8009632:	4643      	movge	r3, r8
 8009634:	46a0      	movge	r8, r4
 8009636:	4630      	mov	r0, r6
 8009638:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800963c:	bfa6      	itte	ge
 800963e:	461c      	movge	r4, r3
 8009640:	2500      	movge	r5, #0
 8009642:	2501      	movlt	r5, #1
 8009644:	f7ff fcf6 	bl	8009034 <_Balloc>
 8009648:	b920      	cbnz	r0, 8009654 <__mdiff+0x5c>
 800964a:	4b2e      	ldr	r3, [pc, #184]	; (8009704 <__mdiff+0x10c>)
 800964c:	4602      	mov	r2, r0
 800964e:	f240 2145 	movw	r1, #581	; 0x245
 8009652:	e7e5      	b.n	8009620 <__mdiff+0x28>
 8009654:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009658:	6926      	ldr	r6, [r4, #16]
 800965a:	60c5      	str	r5, [r0, #12]
 800965c:	f104 0914 	add.w	r9, r4, #20
 8009660:	f108 0514 	add.w	r5, r8, #20
 8009664:	f100 0e14 	add.w	lr, r0, #20
 8009668:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800966c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009670:	f108 0210 	add.w	r2, r8, #16
 8009674:	46f2      	mov	sl, lr
 8009676:	2100      	movs	r1, #0
 8009678:	f859 3b04 	ldr.w	r3, [r9], #4
 800967c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009680:	fa11 f88b 	uxtah	r8, r1, fp
 8009684:	b299      	uxth	r1, r3
 8009686:	0c1b      	lsrs	r3, r3, #16
 8009688:	eba8 0801 	sub.w	r8, r8, r1
 800968c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009690:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009694:	fa1f f888 	uxth.w	r8, r8
 8009698:	1419      	asrs	r1, r3, #16
 800969a:	454e      	cmp	r6, r9
 800969c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80096a0:	f84a 3b04 	str.w	r3, [sl], #4
 80096a4:	d8e8      	bhi.n	8009678 <__mdiff+0x80>
 80096a6:	1b33      	subs	r3, r6, r4
 80096a8:	3b15      	subs	r3, #21
 80096aa:	f023 0303 	bic.w	r3, r3, #3
 80096ae:	3304      	adds	r3, #4
 80096b0:	3415      	adds	r4, #21
 80096b2:	42a6      	cmp	r6, r4
 80096b4:	bf38      	it	cc
 80096b6:	2304      	movcc	r3, #4
 80096b8:	441d      	add	r5, r3
 80096ba:	4473      	add	r3, lr
 80096bc:	469e      	mov	lr, r3
 80096be:	462e      	mov	r6, r5
 80096c0:	4566      	cmp	r6, ip
 80096c2:	d30e      	bcc.n	80096e2 <__mdiff+0xea>
 80096c4:	f10c 0203 	add.w	r2, ip, #3
 80096c8:	1b52      	subs	r2, r2, r5
 80096ca:	f022 0203 	bic.w	r2, r2, #3
 80096ce:	3d03      	subs	r5, #3
 80096d0:	45ac      	cmp	ip, r5
 80096d2:	bf38      	it	cc
 80096d4:	2200      	movcc	r2, #0
 80096d6:	4413      	add	r3, r2
 80096d8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80096dc:	b17a      	cbz	r2, 80096fe <__mdiff+0x106>
 80096de:	6107      	str	r7, [r0, #16]
 80096e0:	e7a4      	b.n	800962c <__mdiff+0x34>
 80096e2:	f856 8b04 	ldr.w	r8, [r6], #4
 80096e6:	fa11 f288 	uxtah	r2, r1, r8
 80096ea:	1414      	asrs	r4, r2, #16
 80096ec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80096f0:	b292      	uxth	r2, r2
 80096f2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80096f6:	f84e 2b04 	str.w	r2, [lr], #4
 80096fa:	1421      	asrs	r1, r4, #16
 80096fc:	e7e0      	b.n	80096c0 <__mdiff+0xc8>
 80096fe:	3f01      	subs	r7, #1
 8009700:	e7ea      	b.n	80096d8 <__mdiff+0xe0>
 8009702:	bf00      	nop
 8009704:	0800b9bd 	.word	0x0800b9bd
 8009708:	0800b9ce 	.word	0x0800b9ce

0800970c <__ulp>:
 800970c:	b082      	sub	sp, #8
 800970e:	ed8d 0b00 	vstr	d0, [sp]
 8009712:	9a01      	ldr	r2, [sp, #4]
 8009714:	4b0f      	ldr	r3, [pc, #60]	; (8009754 <__ulp+0x48>)
 8009716:	4013      	ands	r3, r2
 8009718:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800971c:	2b00      	cmp	r3, #0
 800971e:	dc08      	bgt.n	8009732 <__ulp+0x26>
 8009720:	425b      	negs	r3, r3
 8009722:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009726:	ea4f 5223 	mov.w	r2, r3, asr #20
 800972a:	da04      	bge.n	8009736 <__ulp+0x2a>
 800972c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009730:	4113      	asrs	r3, r2
 8009732:	2200      	movs	r2, #0
 8009734:	e008      	b.n	8009748 <__ulp+0x3c>
 8009736:	f1a2 0314 	sub.w	r3, r2, #20
 800973a:	2b1e      	cmp	r3, #30
 800973c:	bfda      	itte	le
 800973e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009742:	40da      	lsrle	r2, r3
 8009744:	2201      	movgt	r2, #1
 8009746:	2300      	movs	r3, #0
 8009748:	4619      	mov	r1, r3
 800974a:	4610      	mov	r0, r2
 800974c:	ec41 0b10 	vmov	d0, r0, r1
 8009750:	b002      	add	sp, #8
 8009752:	4770      	bx	lr
 8009754:	7ff00000 	.word	0x7ff00000

08009758 <__b2d>:
 8009758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800975c:	6906      	ldr	r6, [r0, #16]
 800975e:	f100 0814 	add.w	r8, r0, #20
 8009762:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009766:	1f37      	subs	r7, r6, #4
 8009768:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800976c:	4610      	mov	r0, r2
 800976e:	f7ff fd53 	bl	8009218 <__hi0bits>
 8009772:	f1c0 0320 	rsb	r3, r0, #32
 8009776:	280a      	cmp	r0, #10
 8009778:	600b      	str	r3, [r1, #0]
 800977a:	491b      	ldr	r1, [pc, #108]	; (80097e8 <__b2d+0x90>)
 800977c:	dc15      	bgt.n	80097aa <__b2d+0x52>
 800977e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009782:	fa22 f30c 	lsr.w	r3, r2, ip
 8009786:	45b8      	cmp	r8, r7
 8009788:	ea43 0501 	orr.w	r5, r3, r1
 800978c:	bf34      	ite	cc
 800978e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009792:	2300      	movcs	r3, #0
 8009794:	3015      	adds	r0, #21
 8009796:	fa02 f000 	lsl.w	r0, r2, r0
 800979a:	fa23 f30c 	lsr.w	r3, r3, ip
 800979e:	4303      	orrs	r3, r0
 80097a0:	461c      	mov	r4, r3
 80097a2:	ec45 4b10 	vmov	d0, r4, r5
 80097a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097aa:	45b8      	cmp	r8, r7
 80097ac:	bf3a      	itte	cc
 80097ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80097b2:	f1a6 0708 	subcc.w	r7, r6, #8
 80097b6:	2300      	movcs	r3, #0
 80097b8:	380b      	subs	r0, #11
 80097ba:	d012      	beq.n	80097e2 <__b2d+0x8a>
 80097bc:	f1c0 0120 	rsb	r1, r0, #32
 80097c0:	fa23 f401 	lsr.w	r4, r3, r1
 80097c4:	4082      	lsls	r2, r0
 80097c6:	4322      	orrs	r2, r4
 80097c8:	4547      	cmp	r7, r8
 80097ca:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80097ce:	bf8c      	ite	hi
 80097d0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80097d4:	2200      	movls	r2, #0
 80097d6:	4083      	lsls	r3, r0
 80097d8:	40ca      	lsrs	r2, r1
 80097da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80097de:	4313      	orrs	r3, r2
 80097e0:	e7de      	b.n	80097a0 <__b2d+0x48>
 80097e2:	ea42 0501 	orr.w	r5, r2, r1
 80097e6:	e7db      	b.n	80097a0 <__b2d+0x48>
 80097e8:	3ff00000 	.word	0x3ff00000

080097ec <__d2b>:
 80097ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097f0:	460f      	mov	r7, r1
 80097f2:	2101      	movs	r1, #1
 80097f4:	ec59 8b10 	vmov	r8, r9, d0
 80097f8:	4616      	mov	r6, r2
 80097fa:	f7ff fc1b 	bl	8009034 <_Balloc>
 80097fe:	4604      	mov	r4, r0
 8009800:	b930      	cbnz	r0, 8009810 <__d2b+0x24>
 8009802:	4602      	mov	r2, r0
 8009804:	4b24      	ldr	r3, [pc, #144]	; (8009898 <__d2b+0xac>)
 8009806:	4825      	ldr	r0, [pc, #148]	; (800989c <__d2b+0xb0>)
 8009808:	f240 310f 	movw	r1, #783	; 0x30f
 800980c:	f001 f9b0 	bl	800ab70 <__assert_func>
 8009810:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009814:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009818:	bb2d      	cbnz	r5, 8009866 <__d2b+0x7a>
 800981a:	9301      	str	r3, [sp, #4]
 800981c:	f1b8 0300 	subs.w	r3, r8, #0
 8009820:	d026      	beq.n	8009870 <__d2b+0x84>
 8009822:	4668      	mov	r0, sp
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	f7ff fd17 	bl	8009258 <__lo0bits>
 800982a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800982e:	b1e8      	cbz	r0, 800986c <__d2b+0x80>
 8009830:	f1c0 0320 	rsb	r3, r0, #32
 8009834:	fa02 f303 	lsl.w	r3, r2, r3
 8009838:	430b      	orrs	r3, r1
 800983a:	40c2      	lsrs	r2, r0
 800983c:	6163      	str	r3, [r4, #20]
 800983e:	9201      	str	r2, [sp, #4]
 8009840:	9b01      	ldr	r3, [sp, #4]
 8009842:	61a3      	str	r3, [r4, #24]
 8009844:	2b00      	cmp	r3, #0
 8009846:	bf14      	ite	ne
 8009848:	2202      	movne	r2, #2
 800984a:	2201      	moveq	r2, #1
 800984c:	6122      	str	r2, [r4, #16]
 800984e:	b1bd      	cbz	r5, 8009880 <__d2b+0x94>
 8009850:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009854:	4405      	add	r5, r0
 8009856:	603d      	str	r5, [r7, #0]
 8009858:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800985c:	6030      	str	r0, [r6, #0]
 800985e:	4620      	mov	r0, r4
 8009860:	b003      	add	sp, #12
 8009862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800986a:	e7d6      	b.n	800981a <__d2b+0x2e>
 800986c:	6161      	str	r1, [r4, #20]
 800986e:	e7e7      	b.n	8009840 <__d2b+0x54>
 8009870:	a801      	add	r0, sp, #4
 8009872:	f7ff fcf1 	bl	8009258 <__lo0bits>
 8009876:	9b01      	ldr	r3, [sp, #4]
 8009878:	6163      	str	r3, [r4, #20]
 800987a:	3020      	adds	r0, #32
 800987c:	2201      	movs	r2, #1
 800987e:	e7e5      	b.n	800984c <__d2b+0x60>
 8009880:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009884:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009888:	6038      	str	r0, [r7, #0]
 800988a:	6918      	ldr	r0, [r3, #16]
 800988c:	f7ff fcc4 	bl	8009218 <__hi0bits>
 8009890:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009894:	e7e2      	b.n	800985c <__d2b+0x70>
 8009896:	bf00      	nop
 8009898:	0800b9bd 	.word	0x0800b9bd
 800989c:	0800b9ce 	.word	0x0800b9ce

080098a0 <__ratio>:
 80098a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a4:	4688      	mov	r8, r1
 80098a6:	4669      	mov	r1, sp
 80098a8:	4681      	mov	r9, r0
 80098aa:	f7ff ff55 	bl	8009758 <__b2d>
 80098ae:	a901      	add	r1, sp, #4
 80098b0:	4640      	mov	r0, r8
 80098b2:	ec55 4b10 	vmov	r4, r5, d0
 80098b6:	f7ff ff4f 	bl	8009758 <__b2d>
 80098ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80098be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80098c2:	eba3 0c02 	sub.w	ip, r3, r2
 80098c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80098ca:	1a9b      	subs	r3, r3, r2
 80098cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80098d0:	ec51 0b10 	vmov	r0, r1, d0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	bfd6      	itet	le
 80098d8:	460a      	movle	r2, r1
 80098da:	462a      	movgt	r2, r5
 80098dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80098e0:	468b      	mov	fp, r1
 80098e2:	462f      	mov	r7, r5
 80098e4:	bfd4      	ite	le
 80098e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80098ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80098ee:	4620      	mov	r0, r4
 80098f0:	ee10 2a10 	vmov	r2, s0
 80098f4:	465b      	mov	r3, fp
 80098f6:	4639      	mov	r1, r7
 80098f8:	f7f6 ffc0 	bl	800087c <__aeabi_ddiv>
 80098fc:	ec41 0b10 	vmov	d0, r0, r1
 8009900:	b003      	add	sp, #12
 8009902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009906 <__copybits>:
 8009906:	3901      	subs	r1, #1
 8009908:	b570      	push	{r4, r5, r6, lr}
 800990a:	1149      	asrs	r1, r1, #5
 800990c:	6914      	ldr	r4, [r2, #16]
 800990e:	3101      	adds	r1, #1
 8009910:	f102 0314 	add.w	r3, r2, #20
 8009914:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009918:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800991c:	1f05      	subs	r5, r0, #4
 800991e:	42a3      	cmp	r3, r4
 8009920:	d30c      	bcc.n	800993c <__copybits+0x36>
 8009922:	1aa3      	subs	r3, r4, r2
 8009924:	3b11      	subs	r3, #17
 8009926:	f023 0303 	bic.w	r3, r3, #3
 800992a:	3211      	adds	r2, #17
 800992c:	42a2      	cmp	r2, r4
 800992e:	bf88      	it	hi
 8009930:	2300      	movhi	r3, #0
 8009932:	4418      	add	r0, r3
 8009934:	2300      	movs	r3, #0
 8009936:	4288      	cmp	r0, r1
 8009938:	d305      	bcc.n	8009946 <__copybits+0x40>
 800993a:	bd70      	pop	{r4, r5, r6, pc}
 800993c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009940:	f845 6f04 	str.w	r6, [r5, #4]!
 8009944:	e7eb      	b.n	800991e <__copybits+0x18>
 8009946:	f840 3b04 	str.w	r3, [r0], #4
 800994a:	e7f4      	b.n	8009936 <__copybits+0x30>

0800994c <__any_on>:
 800994c:	f100 0214 	add.w	r2, r0, #20
 8009950:	6900      	ldr	r0, [r0, #16]
 8009952:	114b      	asrs	r3, r1, #5
 8009954:	4298      	cmp	r0, r3
 8009956:	b510      	push	{r4, lr}
 8009958:	db11      	blt.n	800997e <__any_on+0x32>
 800995a:	dd0a      	ble.n	8009972 <__any_on+0x26>
 800995c:	f011 011f 	ands.w	r1, r1, #31
 8009960:	d007      	beq.n	8009972 <__any_on+0x26>
 8009962:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009966:	fa24 f001 	lsr.w	r0, r4, r1
 800996a:	fa00 f101 	lsl.w	r1, r0, r1
 800996e:	428c      	cmp	r4, r1
 8009970:	d10b      	bne.n	800998a <__any_on+0x3e>
 8009972:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009976:	4293      	cmp	r3, r2
 8009978:	d803      	bhi.n	8009982 <__any_on+0x36>
 800997a:	2000      	movs	r0, #0
 800997c:	bd10      	pop	{r4, pc}
 800997e:	4603      	mov	r3, r0
 8009980:	e7f7      	b.n	8009972 <__any_on+0x26>
 8009982:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009986:	2900      	cmp	r1, #0
 8009988:	d0f5      	beq.n	8009976 <__any_on+0x2a>
 800998a:	2001      	movs	r0, #1
 800998c:	e7f6      	b.n	800997c <__any_on+0x30>

0800998e <sulp>:
 800998e:	b570      	push	{r4, r5, r6, lr}
 8009990:	4604      	mov	r4, r0
 8009992:	460d      	mov	r5, r1
 8009994:	ec45 4b10 	vmov	d0, r4, r5
 8009998:	4616      	mov	r6, r2
 800999a:	f7ff feb7 	bl	800970c <__ulp>
 800999e:	ec51 0b10 	vmov	r0, r1, d0
 80099a2:	b17e      	cbz	r6, 80099c4 <sulp+0x36>
 80099a4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80099a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	dd09      	ble.n	80099c4 <sulp+0x36>
 80099b0:	051b      	lsls	r3, r3, #20
 80099b2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80099b6:	2400      	movs	r4, #0
 80099b8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80099bc:	4622      	mov	r2, r4
 80099be:	462b      	mov	r3, r5
 80099c0:	f7f6 fe32 	bl	8000628 <__aeabi_dmul>
 80099c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080099c8 <_strtod_l>:
 80099c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099cc:	ed2d 8b02 	vpush	{d8}
 80099d0:	b09b      	sub	sp, #108	; 0x6c
 80099d2:	4604      	mov	r4, r0
 80099d4:	9213      	str	r2, [sp, #76]	; 0x4c
 80099d6:	2200      	movs	r2, #0
 80099d8:	9216      	str	r2, [sp, #88]	; 0x58
 80099da:	460d      	mov	r5, r1
 80099dc:	f04f 0800 	mov.w	r8, #0
 80099e0:	f04f 0900 	mov.w	r9, #0
 80099e4:	460a      	mov	r2, r1
 80099e6:	9215      	str	r2, [sp, #84]	; 0x54
 80099e8:	7811      	ldrb	r1, [r2, #0]
 80099ea:	292b      	cmp	r1, #43	; 0x2b
 80099ec:	d04c      	beq.n	8009a88 <_strtod_l+0xc0>
 80099ee:	d83a      	bhi.n	8009a66 <_strtod_l+0x9e>
 80099f0:	290d      	cmp	r1, #13
 80099f2:	d834      	bhi.n	8009a5e <_strtod_l+0x96>
 80099f4:	2908      	cmp	r1, #8
 80099f6:	d834      	bhi.n	8009a62 <_strtod_l+0x9a>
 80099f8:	2900      	cmp	r1, #0
 80099fa:	d03d      	beq.n	8009a78 <_strtod_l+0xb0>
 80099fc:	2200      	movs	r2, #0
 80099fe:	920a      	str	r2, [sp, #40]	; 0x28
 8009a00:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009a02:	7832      	ldrb	r2, [r6, #0]
 8009a04:	2a30      	cmp	r2, #48	; 0x30
 8009a06:	f040 80b4 	bne.w	8009b72 <_strtod_l+0x1aa>
 8009a0a:	7872      	ldrb	r2, [r6, #1]
 8009a0c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009a10:	2a58      	cmp	r2, #88	; 0x58
 8009a12:	d170      	bne.n	8009af6 <_strtod_l+0x12e>
 8009a14:	9302      	str	r3, [sp, #8]
 8009a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a18:	9301      	str	r3, [sp, #4]
 8009a1a:	ab16      	add	r3, sp, #88	; 0x58
 8009a1c:	9300      	str	r3, [sp, #0]
 8009a1e:	4a8e      	ldr	r2, [pc, #568]	; (8009c58 <_strtod_l+0x290>)
 8009a20:	ab17      	add	r3, sp, #92	; 0x5c
 8009a22:	a915      	add	r1, sp, #84	; 0x54
 8009a24:	4620      	mov	r0, r4
 8009a26:	f001 f93f 	bl	800aca8 <__gethex>
 8009a2a:	f010 070f 	ands.w	r7, r0, #15
 8009a2e:	4605      	mov	r5, r0
 8009a30:	d005      	beq.n	8009a3e <_strtod_l+0x76>
 8009a32:	2f06      	cmp	r7, #6
 8009a34:	d12a      	bne.n	8009a8c <_strtod_l+0xc4>
 8009a36:	3601      	adds	r6, #1
 8009a38:	2300      	movs	r3, #0
 8009a3a:	9615      	str	r6, [sp, #84]	; 0x54
 8009a3c:	930a      	str	r3, [sp, #40]	; 0x28
 8009a3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f040 857f 	bne.w	800a544 <_strtod_l+0xb7c>
 8009a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a48:	b1db      	cbz	r3, 8009a82 <_strtod_l+0xba>
 8009a4a:	4642      	mov	r2, r8
 8009a4c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009a50:	ec43 2b10 	vmov	d0, r2, r3
 8009a54:	b01b      	add	sp, #108	; 0x6c
 8009a56:	ecbd 8b02 	vpop	{d8}
 8009a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a5e:	2920      	cmp	r1, #32
 8009a60:	d1cc      	bne.n	80099fc <_strtod_l+0x34>
 8009a62:	3201      	adds	r2, #1
 8009a64:	e7bf      	b.n	80099e6 <_strtod_l+0x1e>
 8009a66:	292d      	cmp	r1, #45	; 0x2d
 8009a68:	d1c8      	bne.n	80099fc <_strtod_l+0x34>
 8009a6a:	2101      	movs	r1, #1
 8009a6c:	910a      	str	r1, [sp, #40]	; 0x28
 8009a6e:	1c51      	adds	r1, r2, #1
 8009a70:	9115      	str	r1, [sp, #84]	; 0x54
 8009a72:	7852      	ldrb	r2, [r2, #1]
 8009a74:	2a00      	cmp	r2, #0
 8009a76:	d1c3      	bne.n	8009a00 <_strtod_l+0x38>
 8009a78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a7a:	9515      	str	r5, [sp, #84]	; 0x54
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f040 855f 	bne.w	800a540 <_strtod_l+0xb78>
 8009a82:	4642      	mov	r2, r8
 8009a84:	464b      	mov	r3, r9
 8009a86:	e7e3      	b.n	8009a50 <_strtod_l+0x88>
 8009a88:	2100      	movs	r1, #0
 8009a8a:	e7ef      	b.n	8009a6c <_strtod_l+0xa4>
 8009a8c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009a8e:	b13a      	cbz	r2, 8009aa0 <_strtod_l+0xd8>
 8009a90:	2135      	movs	r1, #53	; 0x35
 8009a92:	a818      	add	r0, sp, #96	; 0x60
 8009a94:	f7ff ff37 	bl	8009906 <__copybits>
 8009a98:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f7ff fb0a 	bl	80090b4 <_Bfree>
 8009aa0:	3f01      	subs	r7, #1
 8009aa2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009aa4:	2f04      	cmp	r7, #4
 8009aa6:	d806      	bhi.n	8009ab6 <_strtod_l+0xee>
 8009aa8:	e8df f007 	tbb	[pc, r7]
 8009aac:	201d0314 	.word	0x201d0314
 8009ab0:	14          	.byte	0x14
 8009ab1:	00          	.byte	0x00
 8009ab2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8009ab6:	05e9      	lsls	r1, r5, #23
 8009ab8:	bf48      	it	mi
 8009aba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009abe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ac2:	0d1b      	lsrs	r3, r3, #20
 8009ac4:	051b      	lsls	r3, r3, #20
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1b9      	bne.n	8009a3e <_strtod_l+0x76>
 8009aca:	f7fe fb05 	bl	80080d8 <__errno>
 8009ace:	2322      	movs	r3, #34	; 0x22
 8009ad0:	6003      	str	r3, [r0, #0]
 8009ad2:	e7b4      	b.n	8009a3e <_strtod_l+0x76>
 8009ad4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009ad8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009adc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009ae0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009ae4:	e7e7      	b.n	8009ab6 <_strtod_l+0xee>
 8009ae6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009c60 <_strtod_l+0x298>
 8009aea:	e7e4      	b.n	8009ab6 <_strtod_l+0xee>
 8009aec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009af0:	f04f 38ff 	mov.w	r8, #4294967295
 8009af4:	e7df      	b.n	8009ab6 <_strtod_l+0xee>
 8009af6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009af8:	1c5a      	adds	r2, r3, #1
 8009afa:	9215      	str	r2, [sp, #84]	; 0x54
 8009afc:	785b      	ldrb	r3, [r3, #1]
 8009afe:	2b30      	cmp	r3, #48	; 0x30
 8009b00:	d0f9      	beq.n	8009af6 <_strtod_l+0x12e>
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d09b      	beq.n	8009a3e <_strtod_l+0x76>
 8009b06:	2301      	movs	r3, #1
 8009b08:	f04f 0a00 	mov.w	sl, #0
 8009b0c:	9304      	str	r3, [sp, #16]
 8009b0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b10:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b12:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009b16:	46d3      	mov	fp, sl
 8009b18:	220a      	movs	r2, #10
 8009b1a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009b1c:	7806      	ldrb	r6, [r0, #0]
 8009b1e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009b22:	b2d9      	uxtb	r1, r3
 8009b24:	2909      	cmp	r1, #9
 8009b26:	d926      	bls.n	8009b76 <_strtod_l+0x1ae>
 8009b28:	494c      	ldr	r1, [pc, #304]	; (8009c5c <_strtod_l+0x294>)
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f000 ffe6 	bl	800aafc <strncmp>
 8009b30:	2800      	cmp	r0, #0
 8009b32:	d030      	beq.n	8009b96 <_strtod_l+0x1ce>
 8009b34:	2000      	movs	r0, #0
 8009b36:	4632      	mov	r2, r6
 8009b38:	9005      	str	r0, [sp, #20]
 8009b3a:	465e      	mov	r6, fp
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2a65      	cmp	r2, #101	; 0x65
 8009b40:	d001      	beq.n	8009b46 <_strtod_l+0x17e>
 8009b42:	2a45      	cmp	r2, #69	; 0x45
 8009b44:	d113      	bne.n	8009b6e <_strtod_l+0x1a6>
 8009b46:	b91e      	cbnz	r6, 8009b50 <_strtod_l+0x188>
 8009b48:	9a04      	ldr	r2, [sp, #16]
 8009b4a:	4302      	orrs	r2, r0
 8009b4c:	d094      	beq.n	8009a78 <_strtod_l+0xb0>
 8009b4e:	2600      	movs	r6, #0
 8009b50:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009b52:	1c6a      	adds	r2, r5, #1
 8009b54:	9215      	str	r2, [sp, #84]	; 0x54
 8009b56:	786a      	ldrb	r2, [r5, #1]
 8009b58:	2a2b      	cmp	r2, #43	; 0x2b
 8009b5a:	d074      	beq.n	8009c46 <_strtod_l+0x27e>
 8009b5c:	2a2d      	cmp	r2, #45	; 0x2d
 8009b5e:	d078      	beq.n	8009c52 <_strtod_l+0x28a>
 8009b60:	f04f 0c00 	mov.w	ip, #0
 8009b64:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009b68:	2909      	cmp	r1, #9
 8009b6a:	d97f      	bls.n	8009c6c <_strtod_l+0x2a4>
 8009b6c:	9515      	str	r5, [sp, #84]	; 0x54
 8009b6e:	2700      	movs	r7, #0
 8009b70:	e09e      	b.n	8009cb0 <_strtod_l+0x2e8>
 8009b72:	2300      	movs	r3, #0
 8009b74:	e7c8      	b.n	8009b08 <_strtod_l+0x140>
 8009b76:	f1bb 0f08 	cmp.w	fp, #8
 8009b7a:	bfd8      	it	le
 8009b7c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009b7e:	f100 0001 	add.w	r0, r0, #1
 8009b82:	bfda      	itte	le
 8009b84:	fb02 3301 	mlale	r3, r2, r1, r3
 8009b88:	9309      	strle	r3, [sp, #36]	; 0x24
 8009b8a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009b8e:	f10b 0b01 	add.w	fp, fp, #1
 8009b92:	9015      	str	r0, [sp, #84]	; 0x54
 8009b94:	e7c1      	b.n	8009b1a <_strtod_l+0x152>
 8009b96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b98:	1c5a      	adds	r2, r3, #1
 8009b9a:	9215      	str	r2, [sp, #84]	; 0x54
 8009b9c:	785a      	ldrb	r2, [r3, #1]
 8009b9e:	f1bb 0f00 	cmp.w	fp, #0
 8009ba2:	d037      	beq.n	8009c14 <_strtod_l+0x24c>
 8009ba4:	9005      	str	r0, [sp, #20]
 8009ba6:	465e      	mov	r6, fp
 8009ba8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009bac:	2b09      	cmp	r3, #9
 8009bae:	d912      	bls.n	8009bd6 <_strtod_l+0x20e>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e7c4      	b.n	8009b3e <_strtod_l+0x176>
 8009bb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bb6:	1c5a      	adds	r2, r3, #1
 8009bb8:	9215      	str	r2, [sp, #84]	; 0x54
 8009bba:	785a      	ldrb	r2, [r3, #1]
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	2a30      	cmp	r2, #48	; 0x30
 8009bc0:	d0f8      	beq.n	8009bb4 <_strtod_l+0x1ec>
 8009bc2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009bc6:	2b08      	cmp	r3, #8
 8009bc8:	f200 84c1 	bhi.w	800a54e <_strtod_l+0xb86>
 8009bcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bce:	9005      	str	r0, [sp, #20]
 8009bd0:	2000      	movs	r0, #0
 8009bd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	3a30      	subs	r2, #48	; 0x30
 8009bd8:	f100 0301 	add.w	r3, r0, #1
 8009bdc:	d014      	beq.n	8009c08 <_strtod_l+0x240>
 8009bde:	9905      	ldr	r1, [sp, #20]
 8009be0:	4419      	add	r1, r3
 8009be2:	9105      	str	r1, [sp, #20]
 8009be4:	4633      	mov	r3, r6
 8009be6:	eb00 0c06 	add.w	ip, r0, r6
 8009bea:	210a      	movs	r1, #10
 8009bec:	4563      	cmp	r3, ip
 8009bee:	d113      	bne.n	8009c18 <_strtod_l+0x250>
 8009bf0:	1833      	adds	r3, r6, r0
 8009bf2:	2b08      	cmp	r3, #8
 8009bf4:	f106 0601 	add.w	r6, r6, #1
 8009bf8:	4406      	add	r6, r0
 8009bfa:	dc1a      	bgt.n	8009c32 <_strtod_l+0x26a>
 8009bfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bfe:	230a      	movs	r3, #10
 8009c00:	fb03 2301 	mla	r3, r3, r1, r2
 8009c04:	9309      	str	r3, [sp, #36]	; 0x24
 8009c06:	2300      	movs	r3, #0
 8009c08:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009c0a:	1c51      	adds	r1, r2, #1
 8009c0c:	9115      	str	r1, [sp, #84]	; 0x54
 8009c0e:	7852      	ldrb	r2, [r2, #1]
 8009c10:	4618      	mov	r0, r3
 8009c12:	e7c9      	b.n	8009ba8 <_strtod_l+0x1e0>
 8009c14:	4658      	mov	r0, fp
 8009c16:	e7d2      	b.n	8009bbe <_strtod_l+0x1f6>
 8009c18:	2b08      	cmp	r3, #8
 8009c1a:	f103 0301 	add.w	r3, r3, #1
 8009c1e:	dc03      	bgt.n	8009c28 <_strtod_l+0x260>
 8009c20:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009c22:	434f      	muls	r7, r1
 8009c24:	9709      	str	r7, [sp, #36]	; 0x24
 8009c26:	e7e1      	b.n	8009bec <_strtod_l+0x224>
 8009c28:	2b10      	cmp	r3, #16
 8009c2a:	bfd8      	it	le
 8009c2c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009c30:	e7dc      	b.n	8009bec <_strtod_l+0x224>
 8009c32:	2e10      	cmp	r6, #16
 8009c34:	bfdc      	itt	le
 8009c36:	230a      	movle	r3, #10
 8009c38:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009c3c:	e7e3      	b.n	8009c06 <_strtod_l+0x23e>
 8009c3e:	2300      	movs	r3, #0
 8009c40:	9305      	str	r3, [sp, #20]
 8009c42:	2301      	movs	r3, #1
 8009c44:	e780      	b.n	8009b48 <_strtod_l+0x180>
 8009c46:	f04f 0c00 	mov.w	ip, #0
 8009c4a:	1caa      	adds	r2, r5, #2
 8009c4c:	9215      	str	r2, [sp, #84]	; 0x54
 8009c4e:	78aa      	ldrb	r2, [r5, #2]
 8009c50:	e788      	b.n	8009b64 <_strtod_l+0x19c>
 8009c52:	f04f 0c01 	mov.w	ip, #1
 8009c56:	e7f8      	b.n	8009c4a <_strtod_l+0x282>
 8009c58:	0800bb28 	.word	0x0800bb28
 8009c5c:	0800bb24 	.word	0x0800bb24
 8009c60:	7ff00000 	.word	0x7ff00000
 8009c64:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009c66:	1c51      	adds	r1, r2, #1
 8009c68:	9115      	str	r1, [sp, #84]	; 0x54
 8009c6a:	7852      	ldrb	r2, [r2, #1]
 8009c6c:	2a30      	cmp	r2, #48	; 0x30
 8009c6e:	d0f9      	beq.n	8009c64 <_strtod_l+0x29c>
 8009c70:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009c74:	2908      	cmp	r1, #8
 8009c76:	f63f af7a 	bhi.w	8009b6e <_strtod_l+0x1a6>
 8009c7a:	3a30      	subs	r2, #48	; 0x30
 8009c7c:	9208      	str	r2, [sp, #32]
 8009c7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009c80:	920c      	str	r2, [sp, #48]	; 0x30
 8009c82:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009c84:	1c57      	adds	r7, r2, #1
 8009c86:	9715      	str	r7, [sp, #84]	; 0x54
 8009c88:	7852      	ldrb	r2, [r2, #1]
 8009c8a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009c8e:	f1be 0f09 	cmp.w	lr, #9
 8009c92:	d938      	bls.n	8009d06 <_strtod_l+0x33e>
 8009c94:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009c96:	1a7f      	subs	r7, r7, r1
 8009c98:	2f08      	cmp	r7, #8
 8009c9a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009c9e:	dc03      	bgt.n	8009ca8 <_strtod_l+0x2e0>
 8009ca0:	9908      	ldr	r1, [sp, #32]
 8009ca2:	428f      	cmp	r7, r1
 8009ca4:	bfa8      	it	ge
 8009ca6:	460f      	movge	r7, r1
 8009ca8:	f1bc 0f00 	cmp.w	ip, #0
 8009cac:	d000      	beq.n	8009cb0 <_strtod_l+0x2e8>
 8009cae:	427f      	negs	r7, r7
 8009cb0:	2e00      	cmp	r6, #0
 8009cb2:	d14f      	bne.n	8009d54 <_strtod_l+0x38c>
 8009cb4:	9904      	ldr	r1, [sp, #16]
 8009cb6:	4301      	orrs	r1, r0
 8009cb8:	f47f aec1 	bne.w	8009a3e <_strtod_l+0x76>
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f47f aedb 	bne.w	8009a78 <_strtod_l+0xb0>
 8009cc2:	2a69      	cmp	r2, #105	; 0x69
 8009cc4:	d029      	beq.n	8009d1a <_strtod_l+0x352>
 8009cc6:	dc26      	bgt.n	8009d16 <_strtod_l+0x34e>
 8009cc8:	2a49      	cmp	r2, #73	; 0x49
 8009cca:	d026      	beq.n	8009d1a <_strtod_l+0x352>
 8009ccc:	2a4e      	cmp	r2, #78	; 0x4e
 8009cce:	f47f aed3 	bne.w	8009a78 <_strtod_l+0xb0>
 8009cd2:	499b      	ldr	r1, [pc, #620]	; (8009f40 <_strtod_l+0x578>)
 8009cd4:	a815      	add	r0, sp, #84	; 0x54
 8009cd6:	f001 fa27 	bl	800b128 <__match>
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	f43f aecc 	beq.w	8009a78 <_strtod_l+0xb0>
 8009ce0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	2b28      	cmp	r3, #40	; 0x28
 8009ce6:	d12f      	bne.n	8009d48 <_strtod_l+0x380>
 8009ce8:	4996      	ldr	r1, [pc, #600]	; (8009f44 <_strtod_l+0x57c>)
 8009cea:	aa18      	add	r2, sp, #96	; 0x60
 8009cec:	a815      	add	r0, sp, #84	; 0x54
 8009cee:	f001 fa2f 	bl	800b150 <__hexnan>
 8009cf2:	2805      	cmp	r0, #5
 8009cf4:	d128      	bne.n	8009d48 <_strtod_l+0x380>
 8009cf6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009cf8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009cfc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009d00:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009d04:	e69b      	b.n	8009a3e <_strtod_l+0x76>
 8009d06:	9f08      	ldr	r7, [sp, #32]
 8009d08:	210a      	movs	r1, #10
 8009d0a:	fb01 2107 	mla	r1, r1, r7, r2
 8009d0e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009d12:	9208      	str	r2, [sp, #32]
 8009d14:	e7b5      	b.n	8009c82 <_strtod_l+0x2ba>
 8009d16:	2a6e      	cmp	r2, #110	; 0x6e
 8009d18:	e7d9      	b.n	8009cce <_strtod_l+0x306>
 8009d1a:	498b      	ldr	r1, [pc, #556]	; (8009f48 <_strtod_l+0x580>)
 8009d1c:	a815      	add	r0, sp, #84	; 0x54
 8009d1e:	f001 fa03 	bl	800b128 <__match>
 8009d22:	2800      	cmp	r0, #0
 8009d24:	f43f aea8 	beq.w	8009a78 <_strtod_l+0xb0>
 8009d28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d2a:	4988      	ldr	r1, [pc, #544]	; (8009f4c <_strtod_l+0x584>)
 8009d2c:	3b01      	subs	r3, #1
 8009d2e:	a815      	add	r0, sp, #84	; 0x54
 8009d30:	9315      	str	r3, [sp, #84]	; 0x54
 8009d32:	f001 f9f9 	bl	800b128 <__match>
 8009d36:	b910      	cbnz	r0, 8009d3e <_strtod_l+0x376>
 8009d38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	9315      	str	r3, [sp, #84]	; 0x54
 8009d3e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009f5c <_strtod_l+0x594>
 8009d42:	f04f 0800 	mov.w	r8, #0
 8009d46:	e67a      	b.n	8009a3e <_strtod_l+0x76>
 8009d48:	4881      	ldr	r0, [pc, #516]	; (8009f50 <_strtod_l+0x588>)
 8009d4a:	f000 ff09 	bl	800ab60 <nan>
 8009d4e:	ec59 8b10 	vmov	r8, r9, d0
 8009d52:	e674      	b.n	8009a3e <_strtod_l+0x76>
 8009d54:	9b05      	ldr	r3, [sp, #20]
 8009d56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d58:	1afb      	subs	r3, r7, r3
 8009d5a:	f1bb 0f00 	cmp.w	fp, #0
 8009d5e:	bf08      	it	eq
 8009d60:	46b3      	moveq	fp, r6
 8009d62:	2e10      	cmp	r6, #16
 8009d64:	9308      	str	r3, [sp, #32]
 8009d66:	4635      	mov	r5, r6
 8009d68:	bfa8      	it	ge
 8009d6a:	2510      	movge	r5, #16
 8009d6c:	f7f6 fbe2 	bl	8000534 <__aeabi_ui2d>
 8009d70:	2e09      	cmp	r6, #9
 8009d72:	4680      	mov	r8, r0
 8009d74:	4689      	mov	r9, r1
 8009d76:	dd13      	ble.n	8009da0 <_strtod_l+0x3d8>
 8009d78:	4b76      	ldr	r3, [pc, #472]	; (8009f54 <_strtod_l+0x58c>)
 8009d7a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009d7e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009d82:	f7f6 fc51 	bl	8000628 <__aeabi_dmul>
 8009d86:	4680      	mov	r8, r0
 8009d88:	4650      	mov	r0, sl
 8009d8a:	4689      	mov	r9, r1
 8009d8c:	f7f6 fbd2 	bl	8000534 <__aeabi_ui2d>
 8009d90:	4602      	mov	r2, r0
 8009d92:	460b      	mov	r3, r1
 8009d94:	4640      	mov	r0, r8
 8009d96:	4649      	mov	r1, r9
 8009d98:	f7f6 fa90 	bl	80002bc <__adddf3>
 8009d9c:	4680      	mov	r8, r0
 8009d9e:	4689      	mov	r9, r1
 8009da0:	2e0f      	cmp	r6, #15
 8009da2:	dc38      	bgt.n	8009e16 <_strtod_l+0x44e>
 8009da4:	9b08      	ldr	r3, [sp, #32]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f43f ae49 	beq.w	8009a3e <_strtod_l+0x76>
 8009dac:	dd24      	ble.n	8009df8 <_strtod_l+0x430>
 8009dae:	2b16      	cmp	r3, #22
 8009db0:	dc0b      	bgt.n	8009dca <_strtod_l+0x402>
 8009db2:	4968      	ldr	r1, [pc, #416]	; (8009f54 <_strtod_l+0x58c>)
 8009db4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dbc:	4642      	mov	r2, r8
 8009dbe:	464b      	mov	r3, r9
 8009dc0:	f7f6 fc32 	bl	8000628 <__aeabi_dmul>
 8009dc4:	4680      	mov	r8, r0
 8009dc6:	4689      	mov	r9, r1
 8009dc8:	e639      	b.n	8009a3e <_strtod_l+0x76>
 8009dca:	9a08      	ldr	r2, [sp, #32]
 8009dcc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	db20      	blt.n	8009e16 <_strtod_l+0x44e>
 8009dd4:	4c5f      	ldr	r4, [pc, #380]	; (8009f54 <_strtod_l+0x58c>)
 8009dd6:	f1c6 060f 	rsb	r6, r6, #15
 8009dda:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009dde:	4642      	mov	r2, r8
 8009de0:	464b      	mov	r3, r9
 8009de2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009de6:	f7f6 fc1f 	bl	8000628 <__aeabi_dmul>
 8009dea:	9b08      	ldr	r3, [sp, #32]
 8009dec:	1b9e      	subs	r6, r3, r6
 8009dee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009df2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009df6:	e7e3      	b.n	8009dc0 <_strtod_l+0x3f8>
 8009df8:	9b08      	ldr	r3, [sp, #32]
 8009dfa:	3316      	adds	r3, #22
 8009dfc:	db0b      	blt.n	8009e16 <_strtod_l+0x44e>
 8009dfe:	9b05      	ldr	r3, [sp, #20]
 8009e00:	1bdf      	subs	r7, r3, r7
 8009e02:	4b54      	ldr	r3, [pc, #336]	; (8009f54 <_strtod_l+0x58c>)
 8009e04:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e0c:	4640      	mov	r0, r8
 8009e0e:	4649      	mov	r1, r9
 8009e10:	f7f6 fd34 	bl	800087c <__aeabi_ddiv>
 8009e14:	e7d6      	b.n	8009dc4 <_strtod_l+0x3fc>
 8009e16:	9b08      	ldr	r3, [sp, #32]
 8009e18:	1b75      	subs	r5, r6, r5
 8009e1a:	441d      	add	r5, r3
 8009e1c:	2d00      	cmp	r5, #0
 8009e1e:	dd70      	ble.n	8009f02 <_strtod_l+0x53a>
 8009e20:	f015 030f 	ands.w	r3, r5, #15
 8009e24:	d00a      	beq.n	8009e3c <_strtod_l+0x474>
 8009e26:	494b      	ldr	r1, [pc, #300]	; (8009f54 <_strtod_l+0x58c>)
 8009e28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e2c:	4642      	mov	r2, r8
 8009e2e:	464b      	mov	r3, r9
 8009e30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e34:	f7f6 fbf8 	bl	8000628 <__aeabi_dmul>
 8009e38:	4680      	mov	r8, r0
 8009e3a:	4689      	mov	r9, r1
 8009e3c:	f035 050f 	bics.w	r5, r5, #15
 8009e40:	d04d      	beq.n	8009ede <_strtod_l+0x516>
 8009e42:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009e46:	dd22      	ble.n	8009e8e <_strtod_l+0x4c6>
 8009e48:	2500      	movs	r5, #0
 8009e4a:	46ab      	mov	fp, r5
 8009e4c:	9509      	str	r5, [sp, #36]	; 0x24
 8009e4e:	9505      	str	r5, [sp, #20]
 8009e50:	2322      	movs	r3, #34	; 0x22
 8009e52:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009f5c <_strtod_l+0x594>
 8009e56:	6023      	str	r3, [r4, #0]
 8009e58:	f04f 0800 	mov.w	r8, #0
 8009e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f43f aded 	beq.w	8009a3e <_strtod_l+0x76>
 8009e64:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009e66:	4620      	mov	r0, r4
 8009e68:	f7ff f924 	bl	80090b4 <_Bfree>
 8009e6c:	9905      	ldr	r1, [sp, #20]
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f7ff f920 	bl	80090b4 <_Bfree>
 8009e74:	4659      	mov	r1, fp
 8009e76:	4620      	mov	r0, r4
 8009e78:	f7ff f91c 	bl	80090b4 <_Bfree>
 8009e7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f7ff f918 	bl	80090b4 <_Bfree>
 8009e84:	4629      	mov	r1, r5
 8009e86:	4620      	mov	r0, r4
 8009e88:	f7ff f914 	bl	80090b4 <_Bfree>
 8009e8c:	e5d7      	b.n	8009a3e <_strtod_l+0x76>
 8009e8e:	4b32      	ldr	r3, [pc, #200]	; (8009f58 <_strtod_l+0x590>)
 8009e90:	9304      	str	r3, [sp, #16]
 8009e92:	2300      	movs	r3, #0
 8009e94:	112d      	asrs	r5, r5, #4
 8009e96:	4640      	mov	r0, r8
 8009e98:	4649      	mov	r1, r9
 8009e9a:	469a      	mov	sl, r3
 8009e9c:	2d01      	cmp	r5, #1
 8009e9e:	dc21      	bgt.n	8009ee4 <_strtod_l+0x51c>
 8009ea0:	b10b      	cbz	r3, 8009ea6 <_strtod_l+0x4de>
 8009ea2:	4680      	mov	r8, r0
 8009ea4:	4689      	mov	r9, r1
 8009ea6:	492c      	ldr	r1, [pc, #176]	; (8009f58 <_strtod_l+0x590>)
 8009ea8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009eac:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009eb0:	4642      	mov	r2, r8
 8009eb2:	464b      	mov	r3, r9
 8009eb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eb8:	f7f6 fbb6 	bl	8000628 <__aeabi_dmul>
 8009ebc:	4b27      	ldr	r3, [pc, #156]	; (8009f5c <_strtod_l+0x594>)
 8009ebe:	460a      	mov	r2, r1
 8009ec0:	400b      	ands	r3, r1
 8009ec2:	4927      	ldr	r1, [pc, #156]	; (8009f60 <_strtod_l+0x598>)
 8009ec4:	428b      	cmp	r3, r1
 8009ec6:	4680      	mov	r8, r0
 8009ec8:	d8be      	bhi.n	8009e48 <_strtod_l+0x480>
 8009eca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009ece:	428b      	cmp	r3, r1
 8009ed0:	bf86      	itte	hi
 8009ed2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8009f64 <_strtod_l+0x59c>
 8009ed6:	f04f 38ff 	movhi.w	r8, #4294967295
 8009eda:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009ede:	2300      	movs	r3, #0
 8009ee0:	9304      	str	r3, [sp, #16]
 8009ee2:	e07b      	b.n	8009fdc <_strtod_l+0x614>
 8009ee4:	07ea      	lsls	r2, r5, #31
 8009ee6:	d505      	bpl.n	8009ef4 <_strtod_l+0x52c>
 8009ee8:	9b04      	ldr	r3, [sp, #16]
 8009eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eee:	f7f6 fb9b 	bl	8000628 <__aeabi_dmul>
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	9a04      	ldr	r2, [sp, #16]
 8009ef6:	3208      	adds	r2, #8
 8009ef8:	f10a 0a01 	add.w	sl, sl, #1
 8009efc:	106d      	asrs	r5, r5, #1
 8009efe:	9204      	str	r2, [sp, #16]
 8009f00:	e7cc      	b.n	8009e9c <_strtod_l+0x4d4>
 8009f02:	d0ec      	beq.n	8009ede <_strtod_l+0x516>
 8009f04:	426d      	negs	r5, r5
 8009f06:	f015 020f 	ands.w	r2, r5, #15
 8009f0a:	d00a      	beq.n	8009f22 <_strtod_l+0x55a>
 8009f0c:	4b11      	ldr	r3, [pc, #68]	; (8009f54 <_strtod_l+0x58c>)
 8009f0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f12:	4640      	mov	r0, r8
 8009f14:	4649      	mov	r1, r9
 8009f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1a:	f7f6 fcaf 	bl	800087c <__aeabi_ddiv>
 8009f1e:	4680      	mov	r8, r0
 8009f20:	4689      	mov	r9, r1
 8009f22:	112d      	asrs	r5, r5, #4
 8009f24:	d0db      	beq.n	8009ede <_strtod_l+0x516>
 8009f26:	2d1f      	cmp	r5, #31
 8009f28:	dd1e      	ble.n	8009f68 <_strtod_l+0x5a0>
 8009f2a:	2500      	movs	r5, #0
 8009f2c:	46ab      	mov	fp, r5
 8009f2e:	9509      	str	r5, [sp, #36]	; 0x24
 8009f30:	9505      	str	r5, [sp, #20]
 8009f32:	2322      	movs	r3, #34	; 0x22
 8009f34:	f04f 0800 	mov.w	r8, #0
 8009f38:	f04f 0900 	mov.w	r9, #0
 8009f3c:	6023      	str	r3, [r4, #0]
 8009f3e:	e78d      	b.n	8009e5c <_strtod_l+0x494>
 8009f40:	0800b915 	.word	0x0800b915
 8009f44:	0800bb3c 	.word	0x0800bb3c
 8009f48:	0800b90d 	.word	0x0800b90d
 8009f4c:	0800b944 	.word	0x0800b944
 8009f50:	0800bccd 	.word	0x0800bccd
 8009f54:	0800ba50 	.word	0x0800ba50
 8009f58:	0800ba28 	.word	0x0800ba28
 8009f5c:	7ff00000 	.word	0x7ff00000
 8009f60:	7ca00000 	.word	0x7ca00000
 8009f64:	7fefffff 	.word	0x7fefffff
 8009f68:	f015 0310 	ands.w	r3, r5, #16
 8009f6c:	bf18      	it	ne
 8009f6e:	236a      	movne	r3, #106	; 0x6a
 8009f70:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a314 <_strtod_l+0x94c>
 8009f74:	9304      	str	r3, [sp, #16]
 8009f76:	4640      	mov	r0, r8
 8009f78:	4649      	mov	r1, r9
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	07ea      	lsls	r2, r5, #31
 8009f7e:	d504      	bpl.n	8009f8a <_strtod_l+0x5c2>
 8009f80:	e9da 2300 	ldrd	r2, r3, [sl]
 8009f84:	f7f6 fb50 	bl	8000628 <__aeabi_dmul>
 8009f88:	2301      	movs	r3, #1
 8009f8a:	106d      	asrs	r5, r5, #1
 8009f8c:	f10a 0a08 	add.w	sl, sl, #8
 8009f90:	d1f4      	bne.n	8009f7c <_strtod_l+0x5b4>
 8009f92:	b10b      	cbz	r3, 8009f98 <_strtod_l+0x5d0>
 8009f94:	4680      	mov	r8, r0
 8009f96:	4689      	mov	r9, r1
 8009f98:	9b04      	ldr	r3, [sp, #16]
 8009f9a:	b1bb      	cbz	r3, 8009fcc <_strtod_l+0x604>
 8009f9c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009fa0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	4649      	mov	r1, r9
 8009fa8:	dd10      	ble.n	8009fcc <_strtod_l+0x604>
 8009faa:	2b1f      	cmp	r3, #31
 8009fac:	f340 811e 	ble.w	800a1ec <_strtod_l+0x824>
 8009fb0:	2b34      	cmp	r3, #52	; 0x34
 8009fb2:	bfde      	ittt	le
 8009fb4:	f04f 33ff 	movle.w	r3, #4294967295
 8009fb8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009fbc:	4093      	lslle	r3, r2
 8009fbe:	f04f 0800 	mov.w	r8, #0
 8009fc2:	bfcc      	ite	gt
 8009fc4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009fc8:	ea03 0901 	andle.w	r9, r3, r1
 8009fcc:	2200      	movs	r2, #0
 8009fce:	2300      	movs	r3, #0
 8009fd0:	4640      	mov	r0, r8
 8009fd2:	4649      	mov	r1, r9
 8009fd4:	f7f6 fd90 	bl	8000af8 <__aeabi_dcmpeq>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	d1a6      	bne.n	8009f2a <_strtod_l+0x562>
 8009fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fe2:	4633      	mov	r3, r6
 8009fe4:	465a      	mov	r2, fp
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f7ff f8cc 	bl	8009184 <__s2b>
 8009fec:	9009      	str	r0, [sp, #36]	; 0x24
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	f43f af2a 	beq.w	8009e48 <_strtod_l+0x480>
 8009ff4:	9a08      	ldr	r2, [sp, #32]
 8009ff6:	9b05      	ldr	r3, [sp, #20]
 8009ff8:	2a00      	cmp	r2, #0
 8009ffa:	eba3 0307 	sub.w	r3, r3, r7
 8009ffe:	bfa8      	it	ge
 800a000:	2300      	movge	r3, #0
 800a002:	930c      	str	r3, [sp, #48]	; 0x30
 800a004:	2500      	movs	r5, #0
 800a006:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a00a:	9312      	str	r3, [sp, #72]	; 0x48
 800a00c:	46ab      	mov	fp, r5
 800a00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a010:	4620      	mov	r0, r4
 800a012:	6859      	ldr	r1, [r3, #4]
 800a014:	f7ff f80e 	bl	8009034 <_Balloc>
 800a018:	9005      	str	r0, [sp, #20]
 800a01a:	2800      	cmp	r0, #0
 800a01c:	f43f af18 	beq.w	8009e50 <_strtod_l+0x488>
 800a020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a022:	691a      	ldr	r2, [r3, #16]
 800a024:	3202      	adds	r2, #2
 800a026:	f103 010c 	add.w	r1, r3, #12
 800a02a:	0092      	lsls	r2, r2, #2
 800a02c:	300c      	adds	r0, #12
 800a02e:	f000 fd87 	bl	800ab40 <memcpy>
 800a032:	ec49 8b10 	vmov	d0, r8, r9
 800a036:	aa18      	add	r2, sp, #96	; 0x60
 800a038:	a917      	add	r1, sp, #92	; 0x5c
 800a03a:	4620      	mov	r0, r4
 800a03c:	f7ff fbd6 	bl	80097ec <__d2b>
 800a040:	ec49 8b18 	vmov	d8, r8, r9
 800a044:	9016      	str	r0, [sp, #88]	; 0x58
 800a046:	2800      	cmp	r0, #0
 800a048:	f43f af02 	beq.w	8009e50 <_strtod_l+0x488>
 800a04c:	2101      	movs	r1, #1
 800a04e:	4620      	mov	r0, r4
 800a050:	f7ff f930 	bl	80092b4 <__i2b>
 800a054:	4683      	mov	fp, r0
 800a056:	2800      	cmp	r0, #0
 800a058:	f43f aefa 	beq.w	8009e50 <_strtod_l+0x488>
 800a05c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a05e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a060:	2e00      	cmp	r6, #0
 800a062:	bfab      	itete	ge
 800a064:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a066:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a068:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a06a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a06e:	bfac      	ite	ge
 800a070:	eb06 0a03 	addge.w	sl, r6, r3
 800a074:	1b9f      	sublt	r7, r3, r6
 800a076:	9b04      	ldr	r3, [sp, #16]
 800a078:	1af6      	subs	r6, r6, r3
 800a07a:	4416      	add	r6, r2
 800a07c:	4ba0      	ldr	r3, [pc, #640]	; (800a300 <_strtod_l+0x938>)
 800a07e:	3e01      	subs	r6, #1
 800a080:	429e      	cmp	r6, r3
 800a082:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a086:	f280 80c4 	bge.w	800a212 <_strtod_l+0x84a>
 800a08a:	1b9b      	subs	r3, r3, r6
 800a08c:	2b1f      	cmp	r3, #31
 800a08e:	eba2 0203 	sub.w	r2, r2, r3
 800a092:	f04f 0101 	mov.w	r1, #1
 800a096:	f300 80b0 	bgt.w	800a1fa <_strtod_l+0x832>
 800a09a:	fa01 f303 	lsl.w	r3, r1, r3
 800a09e:	930e      	str	r3, [sp, #56]	; 0x38
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	930d      	str	r3, [sp, #52]	; 0x34
 800a0a4:	eb0a 0602 	add.w	r6, sl, r2
 800a0a8:	9b04      	ldr	r3, [sp, #16]
 800a0aa:	45b2      	cmp	sl, r6
 800a0ac:	4417      	add	r7, r2
 800a0ae:	441f      	add	r7, r3
 800a0b0:	4653      	mov	r3, sl
 800a0b2:	bfa8      	it	ge
 800a0b4:	4633      	movge	r3, r6
 800a0b6:	42bb      	cmp	r3, r7
 800a0b8:	bfa8      	it	ge
 800a0ba:	463b      	movge	r3, r7
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	bfc2      	ittt	gt
 800a0c0:	1af6      	subgt	r6, r6, r3
 800a0c2:	1aff      	subgt	r7, r7, r3
 800a0c4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a0c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	dd17      	ble.n	800a0fe <_strtod_l+0x736>
 800a0ce:	4659      	mov	r1, fp
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f7ff f9ae 	bl	8009434 <__pow5mult>
 800a0d8:	4683      	mov	fp, r0
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	f43f aeb8 	beq.w	8009e50 <_strtod_l+0x488>
 800a0e0:	4601      	mov	r1, r0
 800a0e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	f7ff f8fb 	bl	80092e0 <__multiply>
 800a0ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	f43f aeaf 	beq.w	8009e50 <_strtod_l+0x488>
 800a0f2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	f7fe ffdd 	bl	80090b4 <_Bfree>
 800a0fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0fc:	9316      	str	r3, [sp, #88]	; 0x58
 800a0fe:	2e00      	cmp	r6, #0
 800a100:	f300 808c 	bgt.w	800a21c <_strtod_l+0x854>
 800a104:	9b08      	ldr	r3, [sp, #32]
 800a106:	2b00      	cmp	r3, #0
 800a108:	dd08      	ble.n	800a11c <_strtod_l+0x754>
 800a10a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a10c:	9905      	ldr	r1, [sp, #20]
 800a10e:	4620      	mov	r0, r4
 800a110:	f7ff f990 	bl	8009434 <__pow5mult>
 800a114:	9005      	str	r0, [sp, #20]
 800a116:	2800      	cmp	r0, #0
 800a118:	f43f ae9a 	beq.w	8009e50 <_strtod_l+0x488>
 800a11c:	2f00      	cmp	r7, #0
 800a11e:	dd08      	ble.n	800a132 <_strtod_l+0x76a>
 800a120:	9905      	ldr	r1, [sp, #20]
 800a122:	463a      	mov	r2, r7
 800a124:	4620      	mov	r0, r4
 800a126:	f7ff f9df 	bl	80094e8 <__lshift>
 800a12a:	9005      	str	r0, [sp, #20]
 800a12c:	2800      	cmp	r0, #0
 800a12e:	f43f ae8f 	beq.w	8009e50 <_strtod_l+0x488>
 800a132:	f1ba 0f00 	cmp.w	sl, #0
 800a136:	dd08      	ble.n	800a14a <_strtod_l+0x782>
 800a138:	4659      	mov	r1, fp
 800a13a:	4652      	mov	r2, sl
 800a13c:	4620      	mov	r0, r4
 800a13e:	f7ff f9d3 	bl	80094e8 <__lshift>
 800a142:	4683      	mov	fp, r0
 800a144:	2800      	cmp	r0, #0
 800a146:	f43f ae83 	beq.w	8009e50 <_strtod_l+0x488>
 800a14a:	9a05      	ldr	r2, [sp, #20]
 800a14c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a14e:	4620      	mov	r0, r4
 800a150:	f7ff fa52 	bl	80095f8 <__mdiff>
 800a154:	4605      	mov	r5, r0
 800a156:	2800      	cmp	r0, #0
 800a158:	f43f ae7a 	beq.w	8009e50 <_strtod_l+0x488>
 800a15c:	68c3      	ldr	r3, [r0, #12]
 800a15e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a160:	2300      	movs	r3, #0
 800a162:	60c3      	str	r3, [r0, #12]
 800a164:	4659      	mov	r1, fp
 800a166:	f7ff fa2b 	bl	80095c0 <__mcmp>
 800a16a:	2800      	cmp	r0, #0
 800a16c:	da60      	bge.n	800a230 <_strtod_l+0x868>
 800a16e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a170:	ea53 0308 	orrs.w	r3, r3, r8
 800a174:	f040 8084 	bne.w	800a280 <_strtod_l+0x8b8>
 800a178:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d17f      	bne.n	800a280 <_strtod_l+0x8b8>
 800a180:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a184:	0d1b      	lsrs	r3, r3, #20
 800a186:	051b      	lsls	r3, r3, #20
 800a188:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a18c:	d978      	bls.n	800a280 <_strtod_l+0x8b8>
 800a18e:	696b      	ldr	r3, [r5, #20]
 800a190:	b913      	cbnz	r3, 800a198 <_strtod_l+0x7d0>
 800a192:	692b      	ldr	r3, [r5, #16]
 800a194:	2b01      	cmp	r3, #1
 800a196:	dd73      	ble.n	800a280 <_strtod_l+0x8b8>
 800a198:	4629      	mov	r1, r5
 800a19a:	2201      	movs	r2, #1
 800a19c:	4620      	mov	r0, r4
 800a19e:	f7ff f9a3 	bl	80094e8 <__lshift>
 800a1a2:	4659      	mov	r1, fp
 800a1a4:	4605      	mov	r5, r0
 800a1a6:	f7ff fa0b 	bl	80095c0 <__mcmp>
 800a1aa:	2800      	cmp	r0, #0
 800a1ac:	dd68      	ble.n	800a280 <_strtod_l+0x8b8>
 800a1ae:	9904      	ldr	r1, [sp, #16]
 800a1b0:	4a54      	ldr	r2, [pc, #336]	; (800a304 <_strtod_l+0x93c>)
 800a1b2:	464b      	mov	r3, r9
 800a1b4:	2900      	cmp	r1, #0
 800a1b6:	f000 8084 	beq.w	800a2c2 <_strtod_l+0x8fa>
 800a1ba:	ea02 0109 	and.w	r1, r2, r9
 800a1be:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a1c2:	dc7e      	bgt.n	800a2c2 <_strtod_l+0x8fa>
 800a1c4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a1c8:	f77f aeb3 	ble.w	8009f32 <_strtod_l+0x56a>
 800a1cc:	4b4e      	ldr	r3, [pc, #312]	; (800a308 <_strtod_l+0x940>)
 800a1ce:	4640      	mov	r0, r8
 800a1d0:	4649      	mov	r1, r9
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f7f6 fa28 	bl	8000628 <__aeabi_dmul>
 800a1d8:	4b4a      	ldr	r3, [pc, #296]	; (800a304 <_strtod_l+0x93c>)
 800a1da:	400b      	ands	r3, r1
 800a1dc:	4680      	mov	r8, r0
 800a1de:	4689      	mov	r9, r1
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f47f ae3f 	bne.w	8009e64 <_strtod_l+0x49c>
 800a1e6:	2322      	movs	r3, #34	; 0x22
 800a1e8:	6023      	str	r3, [r4, #0]
 800a1ea:	e63b      	b.n	8009e64 <_strtod_l+0x49c>
 800a1ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a1f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f4:	ea03 0808 	and.w	r8, r3, r8
 800a1f8:	e6e8      	b.n	8009fcc <_strtod_l+0x604>
 800a1fa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a1fe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a202:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a206:	36e2      	adds	r6, #226	; 0xe2
 800a208:	fa01 f306 	lsl.w	r3, r1, r6
 800a20c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a210:	e748      	b.n	800a0a4 <_strtod_l+0x6dc>
 800a212:	2100      	movs	r1, #0
 800a214:	2301      	movs	r3, #1
 800a216:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a21a:	e743      	b.n	800a0a4 <_strtod_l+0x6dc>
 800a21c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a21e:	4632      	mov	r2, r6
 800a220:	4620      	mov	r0, r4
 800a222:	f7ff f961 	bl	80094e8 <__lshift>
 800a226:	9016      	str	r0, [sp, #88]	; 0x58
 800a228:	2800      	cmp	r0, #0
 800a22a:	f47f af6b 	bne.w	800a104 <_strtod_l+0x73c>
 800a22e:	e60f      	b.n	8009e50 <_strtod_l+0x488>
 800a230:	46ca      	mov	sl, r9
 800a232:	d171      	bne.n	800a318 <_strtod_l+0x950>
 800a234:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a236:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a23a:	b352      	cbz	r2, 800a292 <_strtod_l+0x8ca>
 800a23c:	4a33      	ldr	r2, [pc, #204]	; (800a30c <_strtod_l+0x944>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d12a      	bne.n	800a298 <_strtod_l+0x8d0>
 800a242:	9b04      	ldr	r3, [sp, #16]
 800a244:	4641      	mov	r1, r8
 800a246:	b1fb      	cbz	r3, 800a288 <_strtod_l+0x8c0>
 800a248:	4b2e      	ldr	r3, [pc, #184]	; (800a304 <_strtod_l+0x93c>)
 800a24a:	ea09 0303 	and.w	r3, r9, r3
 800a24e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a252:	f04f 32ff 	mov.w	r2, #4294967295
 800a256:	d81a      	bhi.n	800a28e <_strtod_l+0x8c6>
 800a258:	0d1b      	lsrs	r3, r3, #20
 800a25a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a25e:	fa02 f303 	lsl.w	r3, r2, r3
 800a262:	4299      	cmp	r1, r3
 800a264:	d118      	bne.n	800a298 <_strtod_l+0x8d0>
 800a266:	4b2a      	ldr	r3, [pc, #168]	; (800a310 <_strtod_l+0x948>)
 800a268:	459a      	cmp	sl, r3
 800a26a:	d102      	bne.n	800a272 <_strtod_l+0x8aa>
 800a26c:	3101      	adds	r1, #1
 800a26e:	f43f adef 	beq.w	8009e50 <_strtod_l+0x488>
 800a272:	4b24      	ldr	r3, [pc, #144]	; (800a304 <_strtod_l+0x93c>)
 800a274:	ea0a 0303 	and.w	r3, sl, r3
 800a278:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a27c:	f04f 0800 	mov.w	r8, #0
 800a280:	9b04      	ldr	r3, [sp, #16]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1a2      	bne.n	800a1cc <_strtod_l+0x804>
 800a286:	e5ed      	b.n	8009e64 <_strtod_l+0x49c>
 800a288:	f04f 33ff 	mov.w	r3, #4294967295
 800a28c:	e7e9      	b.n	800a262 <_strtod_l+0x89a>
 800a28e:	4613      	mov	r3, r2
 800a290:	e7e7      	b.n	800a262 <_strtod_l+0x89a>
 800a292:	ea53 0308 	orrs.w	r3, r3, r8
 800a296:	d08a      	beq.n	800a1ae <_strtod_l+0x7e6>
 800a298:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a29a:	b1e3      	cbz	r3, 800a2d6 <_strtod_l+0x90e>
 800a29c:	ea13 0f0a 	tst.w	r3, sl
 800a2a0:	d0ee      	beq.n	800a280 <_strtod_l+0x8b8>
 800a2a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2a4:	9a04      	ldr	r2, [sp, #16]
 800a2a6:	4640      	mov	r0, r8
 800a2a8:	4649      	mov	r1, r9
 800a2aa:	b1c3      	cbz	r3, 800a2de <_strtod_l+0x916>
 800a2ac:	f7ff fb6f 	bl	800998e <sulp>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	ec51 0b18 	vmov	r0, r1, d8
 800a2b8:	f7f6 f800 	bl	80002bc <__adddf3>
 800a2bc:	4680      	mov	r8, r0
 800a2be:	4689      	mov	r9, r1
 800a2c0:	e7de      	b.n	800a280 <_strtod_l+0x8b8>
 800a2c2:	4013      	ands	r3, r2
 800a2c4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a2c8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a2cc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a2d0:	f04f 38ff 	mov.w	r8, #4294967295
 800a2d4:	e7d4      	b.n	800a280 <_strtod_l+0x8b8>
 800a2d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2d8:	ea13 0f08 	tst.w	r3, r8
 800a2dc:	e7e0      	b.n	800a2a0 <_strtod_l+0x8d8>
 800a2de:	f7ff fb56 	bl	800998e <sulp>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	ec51 0b18 	vmov	r0, r1, d8
 800a2ea:	f7f5 ffe5 	bl	80002b8 <__aeabi_dsub>
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	4680      	mov	r8, r0
 800a2f4:	4689      	mov	r9, r1
 800a2f6:	f7f6 fbff 	bl	8000af8 <__aeabi_dcmpeq>
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	d0c0      	beq.n	800a280 <_strtod_l+0x8b8>
 800a2fe:	e618      	b.n	8009f32 <_strtod_l+0x56a>
 800a300:	fffffc02 	.word	0xfffffc02
 800a304:	7ff00000 	.word	0x7ff00000
 800a308:	39500000 	.word	0x39500000
 800a30c:	000fffff 	.word	0x000fffff
 800a310:	7fefffff 	.word	0x7fefffff
 800a314:	0800bb50 	.word	0x0800bb50
 800a318:	4659      	mov	r1, fp
 800a31a:	4628      	mov	r0, r5
 800a31c:	f7ff fac0 	bl	80098a0 <__ratio>
 800a320:	ec57 6b10 	vmov	r6, r7, d0
 800a324:	ee10 0a10 	vmov	r0, s0
 800a328:	2200      	movs	r2, #0
 800a32a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a32e:	4639      	mov	r1, r7
 800a330:	f7f6 fbf6 	bl	8000b20 <__aeabi_dcmple>
 800a334:	2800      	cmp	r0, #0
 800a336:	d071      	beq.n	800a41c <_strtod_l+0xa54>
 800a338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d17c      	bne.n	800a438 <_strtod_l+0xa70>
 800a33e:	f1b8 0f00 	cmp.w	r8, #0
 800a342:	d15a      	bne.n	800a3fa <_strtod_l+0xa32>
 800a344:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d15d      	bne.n	800a408 <_strtod_l+0xa40>
 800a34c:	4b90      	ldr	r3, [pc, #576]	; (800a590 <_strtod_l+0xbc8>)
 800a34e:	2200      	movs	r2, #0
 800a350:	4630      	mov	r0, r6
 800a352:	4639      	mov	r1, r7
 800a354:	f7f6 fbda 	bl	8000b0c <__aeabi_dcmplt>
 800a358:	2800      	cmp	r0, #0
 800a35a:	d15c      	bne.n	800a416 <_strtod_l+0xa4e>
 800a35c:	4630      	mov	r0, r6
 800a35e:	4639      	mov	r1, r7
 800a360:	4b8c      	ldr	r3, [pc, #560]	; (800a594 <_strtod_l+0xbcc>)
 800a362:	2200      	movs	r2, #0
 800a364:	f7f6 f960 	bl	8000628 <__aeabi_dmul>
 800a368:	4606      	mov	r6, r0
 800a36a:	460f      	mov	r7, r1
 800a36c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a370:	9606      	str	r6, [sp, #24]
 800a372:	9307      	str	r3, [sp, #28]
 800a374:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a378:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a37c:	4b86      	ldr	r3, [pc, #536]	; (800a598 <_strtod_l+0xbd0>)
 800a37e:	ea0a 0303 	and.w	r3, sl, r3
 800a382:	930d      	str	r3, [sp, #52]	; 0x34
 800a384:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a386:	4b85      	ldr	r3, [pc, #532]	; (800a59c <_strtod_l+0xbd4>)
 800a388:	429a      	cmp	r2, r3
 800a38a:	f040 8090 	bne.w	800a4ae <_strtod_l+0xae6>
 800a38e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a392:	ec49 8b10 	vmov	d0, r8, r9
 800a396:	f7ff f9b9 	bl	800970c <__ulp>
 800a39a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a39e:	ec51 0b10 	vmov	r0, r1, d0
 800a3a2:	f7f6 f941 	bl	8000628 <__aeabi_dmul>
 800a3a6:	4642      	mov	r2, r8
 800a3a8:	464b      	mov	r3, r9
 800a3aa:	f7f5 ff87 	bl	80002bc <__adddf3>
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	4979      	ldr	r1, [pc, #484]	; (800a598 <_strtod_l+0xbd0>)
 800a3b2:	4a7b      	ldr	r2, [pc, #492]	; (800a5a0 <_strtod_l+0xbd8>)
 800a3b4:	4019      	ands	r1, r3
 800a3b6:	4291      	cmp	r1, r2
 800a3b8:	4680      	mov	r8, r0
 800a3ba:	d944      	bls.n	800a446 <_strtod_l+0xa7e>
 800a3bc:	ee18 2a90 	vmov	r2, s17
 800a3c0:	4b78      	ldr	r3, [pc, #480]	; (800a5a4 <_strtod_l+0xbdc>)
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d104      	bne.n	800a3d0 <_strtod_l+0xa08>
 800a3c6:	ee18 3a10 	vmov	r3, s16
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	f43f ad40 	beq.w	8009e50 <_strtod_l+0x488>
 800a3d0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a5a4 <_strtod_l+0xbdc>
 800a3d4:	f04f 38ff 	mov.w	r8, #4294967295
 800a3d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f7fe fe6a 	bl	80090b4 <_Bfree>
 800a3e0:	9905      	ldr	r1, [sp, #20]
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f7fe fe66 	bl	80090b4 <_Bfree>
 800a3e8:	4659      	mov	r1, fp
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f7fe fe62 	bl	80090b4 <_Bfree>
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	f7fe fe5e 	bl	80090b4 <_Bfree>
 800a3f8:	e609      	b.n	800a00e <_strtod_l+0x646>
 800a3fa:	f1b8 0f01 	cmp.w	r8, #1
 800a3fe:	d103      	bne.n	800a408 <_strtod_l+0xa40>
 800a400:	f1b9 0f00 	cmp.w	r9, #0
 800a404:	f43f ad95 	beq.w	8009f32 <_strtod_l+0x56a>
 800a408:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a560 <_strtod_l+0xb98>
 800a40c:	4f60      	ldr	r7, [pc, #384]	; (800a590 <_strtod_l+0xbc8>)
 800a40e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a412:	2600      	movs	r6, #0
 800a414:	e7ae      	b.n	800a374 <_strtod_l+0x9ac>
 800a416:	4f5f      	ldr	r7, [pc, #380]	; (800a594 <_strtod_l+0xbcc>)
 800a418:	2600      	movs	r6, #0
 800a41a:	e7a7      	b.n	800a36c <_strtod_l+0x9a4>
 800a41c:	4b5d      	ldr	r3, [pc, #372]	; (800a594 <_strtod_l+0xbcc>)
 800a41e:	4630      	mov	r0, r6
 800a420:	4639      	mov	r1, r7
 800a422:	2200      	movs	r2, #0
 800a424:	f7f6 f900 	bl	8000628 <__aeabi_dmul>
 800a428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a42a:	4606      	mov	r6, r0
 800a42c:	460f      	mov	r7, r1
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d09c      	beq.n	800a36c <_strtod_l+0x9a4>
 800a432:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a436:	e79d      	b.n	800a374 <_strtod_l+0x9ac>
 800a438:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a568 <_strtod_l+0xba0>
 800a43c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a440:	ec57 6b17 	vmov	r6, r7, d7
 800a444:	e796      	b.n	800a374 <_strtod_l+0x9ac>
 800a446:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a44a:	9b04      	ldr	r3, [sp, #16]
 800a44c:	46ca      	mov	sl, r9
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1c2      	bne.n	800a3d8 <_strtod_l+0xa10>
 800a452:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a456:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a458:	0d1b      	lsrs	r3, r3, #20
 800a45a:	051b      	lsls	r3, r3, #20
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d1bb      	bne.n	800a3d8 <_strtod_l+0xa10>
 800a460:	4630      	mov	r0, r6
 800a462:	4639      	mov	r1, r7
 800a464:	f7f6 fc40 	bl	8000ce8 <__aeabi_d2lz>
 800a468:	f7f6 f8b0 	bl	80005cc <__aeabi_l2d>
 800a46c:	4602      	mov	r2, r0
 800a46e:	460b      	mov	r3, r1
 800a470:	4630      	mov	r0, r6
 800a472:	4639      	mov	r1, r7
 800a474:	f7f5 ff20 	bl	80002b8 <__aeabi_dsub>
 800a478:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a47a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a47e:	ea43 0308 	orr.w	r3, r3, r8
 800a482:	4313      	orrs	r3, r2
 800a484:	4606      	mov	r6, r0
 800a486:	460f      	mov	r7, r1
 800a488:	d054      	beq.n	800a534 <_strtod_l+0xb6c>
 800a48a:	a339      	add	r3, pc, #228	; (adr r3, 800a570 <_strtod_l+0xba8>)
 800a48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a490:	f7f6 fb3c 	bl	8000b0c <__aeabi_dcmplt>
 800a494:	2800      	cmp	r0, #0
 800a496:	f47f ace5 	bne.w	8009e64 <_strtod_l+0x49c>
 800a49a:	a337      	add	r3, pc, #220	; (adr r3, 800a578 <_strtod_l+0xbb0>)
 800a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	4639      	mov	r1, r7
 800a4a4:	f7f6 fb50 	bl	8000b48 <__aeabi_dcmpgt>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	d095      	beq.n	800a3d8 <_strtod_l+0xa10>
 800a4ac:	e4da      	b.n	8009e64 <_strtod_l+0x49c>
 800a4ae:	9b04      	ldr	r3, [sp, #16]
 800a4b0:	b333      	cbz	r3, 800a500 <_strtod_l+0xb38>
 800a4b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a4b8:	d822      	bhi.n	800a500 <_strtod_l+0xb38>
 800a4ba:	a331      	add	r3, pc, #196	; (adr r3, 800a580 <_strtod_l+0xbb8>)
 800a4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	4639      	mov	r1, r7
 800a4c4:	f7f6 fb2c 	bl	8000b20 <__aeabi_dcmple>
 800a4c8:	b1a0      	cbz	r0, 800a4f4 <_strtod_l+0xb2c>
 800a4ca:	4639      	mov	r1, r7
 800a4cc:	4630      	mov	r0, r6
 800a4ce:	f7f6 fb83 	bl	8000bd8 <__aeabi_d2uiz>
 800a4d2:	2801      	cmp	r0, #1
 800a4d4:	bf38      	it	cc
 800a4d6:	2001      	movcc	r0, #1
 800a4d8:	f7f6 f82c 	bl	8000534 <__aeabi_ui2d>
 800a4dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4de:	4606      	mov	r6, r0
 800a4e0:	460f      	mov	r7, r1
 800a4e2:	bb23      	cbnz	r3, 800a52e <_strtod_l+0xb66>
 800a4e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4e8:	9010      	str	r0, [sp, #64]	; 0x40
 800a4ea:	9311      	str	r3, [sp, #68]	; 0x44
 800a4ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a4f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a4f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a4fc:	1a9b      	subs	r3, r3, r2
 800a4fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800a500:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a504:	eeb0 0a48 	vmov.f32	s0, s16
 800a508:	eef0 0a68 	vmov.f32	s1, s17
 800a50c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a510:	f7ff f8fc 	bl	800970c <__ulp>
 800a514:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a518:	ec53 2b10 	vmov	r2, r3, d0
 800a51c:	f7f6 f884 	bl	8000628 <__aeabi_dmul>
 800a520:	ec53 2b18 	vmov	r2, r3, d8
 800a524:	f7f5 feca 	bl	80002bc <__adddf3>
 800a528:	4680      	mov	r8, r0
 800a52a:	4689      	mov	r9, r1
 800a52c:	e78d      	b.n	800a44a <_strtod_l+0xa82>
 800a52e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a532:	e7db      	b.n	800a4ec <_strtod_l+0xb24>
 800a534:	a314      	add	r3, pc, #80	; (adr r3, 800a588 <_strtod_l+0xbc0>)
 800a536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53a:	f7f6 fae7 	bl	8000b0c <__aeabi_dcmplt>
 800a53e:	e7b3      	b.n	800a4a8 <_strtod_l+0xae0>
 800a540:	2300      	movs	r3, #0
 800a542:	930a      	str	r3, [sp, #40]	; 0x28
 800a544:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a546:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a548:	6013      	str	r3, [r2, #0]
 800a54a:	f7ff ba7c 	b.w	8009a46 <_strtod_l+0x7e>
 800a54e:	2a65      	cmp	r2, #101	; 0x65
 800a550:	f43f ab75 	beq.w	8009c3e <_strtod_l+0x276>
 800a554:	2a45      	cmp	r2, #69	; 0x45
 800a556:	f43f ab72 	beq.w	8009c3e <_strtod_l+0x276>
 800a55a:	2301      	movs	r3, #1
 800a55c:	f7ff bbaa 	b.w	8009cb4 <_strtod_l+0x2ec>
 800a560:	00000000 	.word	0x00000000
 800a564:	bff00000 	.word	0xbff00000
 800a568:	00000000 	.word	0x00000000
 800a56c:	3ff00000 	.word	0x3ff00000
 800a570:	94a03595 	.word	0x94a03595
 800a574:	3fdfffff 	.word	0x3fdfffff
 800a578:	35afe535 	.word	0x35afe535
 800a57c:	3fe00000 	.word	0x3fe00000
 800a580:	ffc00000 	.word	0xffc00000
 800a584:	41dfffff 	.word	0x41dfffff
 800a588:	94a03595 	.word	0x94a03595
 800a58c:	3fcfffff 	.word	0x3fcfffff
 800a590:	3ff00000 	.word	0x3ff00000
 800a594:	3fe00000 	.word	0x3fe00000
 800a598:	7ff00000 	.word	0x7ff00000
 800a59c:	7fe00000 	.word	0x7fe00000
 800a5a0:	7c9fffff 	.word	0x7c9fffff
 800a5a4:	7fefffff 	.word	0x7fefffff

0800a5a8 <_strtod_r>:
 800a5a8:	4b01      	ldr	r3, [pc, #4]	; (800a5b0 <_strtod_r+0x8>)
 800a5aa:	f7ff ba0d 	b.w	80099c8 <_strtod_l>
 800a5ae:	bf00      	nop
 800a5b0:	20000068 	.word	0x20000068

0800a5b4 <_strtol_l.constprop.0>:
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5ba:	d001      	beq.n	800a5c0 <_strtol_l.constprop.0+0xc>
 800a5bc:	2b24      	cmp	r3, #36	; 0x24
 800a5be:	d906      	bls.n	800a5ce <_strtol_l.constprop.0+0x1a>
 800a5c0:	f7fd fd8a 	bl	80080d8 <__errno>
 800a5c4:	2316      	movs	r3, #22
 800a5c6:	6003      	str	r3, [r0, #0]
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a6b4 <_strtol_l.constprop.0+0x100>
 800a5d2:	460d      	mov	r5, r1
 800a5d4:	462e      	mov	r6, r5
 800a5d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5da:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a5de:	f017 0708 	ands.w	r7, r7, #8
 800a5e2:	d1f7      	bne.n	800a5d4 <_strtol_l.constprop.0+0x20>
 800a5e4:	2c2d      	cmp	r4, #45	; 0x2d
 800a5e6:	d132      	bne.n	800a64e <_strtol_l.constprop.0+0x9a>
 800a5e8:	782c      	ldrb	r4, [r5, #0]
 800a5ea:	2701      	movs	r7, #1
 800a5ec:	1cb5      	adds	r5, r6, #2
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d05b      	beq.n	800a6aa <_strtol_l.constprop.0+0xf6>
 800a5f2:	2b10      	cmp	r3, #16
 800a5f4:	d109      	bne.n	800a60a <_strtol_l.constprop.0+0x56>
 800a5f6:	2c30      	cmp	r4, #48	; 0x30
 800a5f8:	d107      	bne.n	800a60a <_strtol_l.constprop.0+0x56>
 800a5fa:	782c      	ldrb	r4, [r5, #0]
 800a5fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a600:	2c58      	cmp	r4, #88	; 0x58
 800a602:	d14d      	bne.n	800a6a0 <_strtol_l.constprop.0+0xec>
 800a604:	786c      	ldrb	r4, [r5, #1]
 800a606:	2310      	movs	r3, #16
 800a608:	3502      	adds	r5, #2
 800a60a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a60e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a612:	f04f 0e00 	mov.w	lr, #0
 800a616:	fbb8 f9f3 	udiv	r9, r8, r3
 800a61a:	4676      	mov	r6, lr
 800a61c:	fb03 8a19 	mls	sl, r3, r9, r8
 800a620:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a624:	f1bc 0f09 	cmp.w	ip, #9
 800a628:	d816      	bhi.n	800a658 <_strtol_l.constprop.0+0xa4>
 800a62a:	4664      	mov	r4, ip
 800a62c:	42a3      	cmp	r3, r4
 800a62e:	dd24      	ble.n	800a67a <_strtol_l.constprop.0+0xc6>
 800a630:	f1be 3fff 	cmp.w	lr, #4294967295
 800a634:	d008      	beq.n	800a648 <_strtol_l.constprop.0+0x94>
 800a636:	45b1      	cmp	r9, r6
 800a638:	d31c      	bcc.n	800a674 <_strtol_l.constprop.0+0xc0>
 800a63a:	d101      	bne.n	800a640 <_strtol_l.constprop.0+0x8c>
 800a63c:	45a2      	cmp	sl, r4
 800a63e:	db19      	blt.n	800a674 <_strtol_l.constprop.0+0xc0>
 800a640:	fb06 4603 	mla	r6, r6, r3, r4
 800a644:	f04f 0e01 	mov.w	lr, #1
 800a648:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a64c:	e7e8      	b.n	800a620 <_strtol_l.constprop.0+0x6c>
 800a64e:	2c2b      	cmp	r4, #43	; 0x2b
 800a650:	bf04      	itt	eq
 800a652:	782c      	ldrbeq	r4, [r5, #0]
 800a654:	1cb5      	addeq	r5, r6, #2
 800a656:	e7ca      	b.n	800a5ee <_strtol_l.constprop.0+0x3a>
 800a658:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a65c:	f1bc 0f19 	cmp.w	ip, #25
 800a660:	d801      	bhi.n	800a666 <_strtol_l.constprop.0+0xb2>
 800a662:	3c37      	subs	r4, #55	; 0x37
 800a664:	e7e2      	b.n	800a62c <_strtol_l.constprop.0+0x78>
 800a666:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a66a:	f1bc 0f19 	cmp.w	ip, #25
 800a66e:	d804      	bhi.n	800a67a <_strtol_l.constprop.0+0xc6>
 800a670:	3c57      	subs	r4, #87	; 0x57
 800a672:	e7db      	b.n	800a62c <_strtol_l.constprop.0+0x78>
 800a674:	f04f 3eff 	mov.w	lr, #4294967295
 800a678:	e7e6      	b.n	800a648 <_strtol_l.constprop.0+0x94>
 800a67a:	f1be 3fff 	cmp.w	lr, #4294967295
 800a67e:	d105      	bne.n	800a68c <_strtol_l.constprop.0+0xd8>
 800a680:	2322      	movs	r3, #34	; 0x22
 800a682:	6003      	str	r3, [r0, #0]
 800a684:	4646      	mov	r6, r8
 800a686:	b942      	cbnz	r2, 800a69a <_strtol_l.constprop.0+0xe6>
 800a688:	4630      	mov	r0, r6
 800a68a:	e79e      	b.n	800a5ca <_strtol_l.constprop.0+0x16>
 800a68c:	b107      	cbz	r7, 800a690 <_strtol_l.constprop.0+0xdc>
 800a68e:	4276      	negs	r6, r6
 800a690:	2a00      	cmp	r2, #0
 800a692:	d0f9      	beq.n	800a688 <_strtol_l.constprop.0+0xd4>
 800a694:	f1be 0f00 	cmp.w	lr, #0
 800a698:	d000      	beq.n	800a69c <_strtol_l.constprop.0+0xe8>
 800a69a:	1e69      	subs	r1, r5, #1
 800a69c:	6011      	str	r1, [r2, #0]
 800a69e:	e7f3      	b.n	800a688 <_strtol_l.constprop.0+0xd4>
 800a6a0:	2430      	movs	r4, #48	; 0x30
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1b1      	bne.n	800a60a <_strtol_l.constprop.0+0x56>
 800a6a6:	2308      	movs	r3, #8
 800a6a8:	e7af      	b.n	800a60a <_strtol_l.constprop.0+0x56>
 800a6aa:	2c30      	cmp	r4, #48	; 0x30
 800a6ac:	d0a5      	beq.n	800a5fa <_strtol_l.constprop.0+0x46>
 800a6ae:	230a      	movs	r3, #10
 800a6b0:	e7ab      	b.n	800a60a <_strtol_l.constprop.0+0x56>
 800a6b2:	bf00      	nop
 800a6b4:	0800bb79 	.word	0x0800bb79

0800a6b8 <_strtol_r>:
 800a6b8:	f7ff bf7c 	b.w	800a5b4 <_strtol_l.constprop.0>

0800a6bc <__ssputs_r>:
 800a6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c0:	688e      	ldr	r6, [r1, #8]
 800a6c2:	461f      	mov	r7, r3
 800a6c4:	42be      	cmp	r6, r7
 800a6c6:	680b      	ldr	r3, [r1, #0]
 800a6c8:	4682      	mov	sl, r0
 800a6ca:	460c      	mov	r4, r1
 800a6cc:	4690      	mov	r8, r2
 800a6ce:	d82c      	bhi.n	800a72a <__ssputs_r+0x6e>
 800a6d0:	898a      	ldrh	r2, [r1, #12]
 800a6d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6d6:	d026      	beq.n	800a726 <__ssputs_r+0x6a>
 800a6d8:	6965      	ldr	r5, [r4, #20]
 800a6da:	6909      	ldr	r1, [r1, #16]
 800a6dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6e0:	eba3 0901 	sub.w	r9, r3, r1
 800a6e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6e8:	1c7b      	adds	r3, r7, #1
 800a6ea:	444b      	add	r3, r9
 800a6ec:	106d      	asrs	r5, r5, #1
 800a6ee:	429d      	cmp	r5, r3
 800a6f0:	bf38      	it	cc
 800a6f2:	461d      	movcc	r5, r3
 800a6f4:	0553      	lsls	r3, r2, #21
 800a6f6:	d527      	bpl.n	800a748 <__ssputs_r+0x8c>
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	f7fe fc0f 	bl	8008f1c <_malloc_r>
 800a6fe:	4606      	mov	r6, r0
 800a700:	b360      	cbz	r0, 800a75c <__ssputs_r+0xa0>
 800a702:	6921      	ldr	r1, [r4, #16]
 800a704:	464a      	mov	r2, r9
 800a706:	f000 fa1b 	bl	800ab40 <memcpy>
 800a70a:	89a3      	ldrh	r3, [r4, #12]
 800a70c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a714:	81a3      	strh	r3, [r4, #12]
 800a716:	6126      	str	r6, [r4, #16]
 800a718:	6165      	str	r5, [r4, #20]
 800a71a:	444e      	add	r6, r9
 800a71c:	eba5 0509 	sub.w	r5, r5, r9
 800a720:	6026      	str	r6, [r4, #0]
 800a722:	60a5      	str	r5, [r4, #8]
 800a724:	463e      	mov	r6, r7
 800a726:	42be      	cmp	r6, r7
 800a728:	d900      	bls.n	800a72c <__ssputs_r+0x70>
 800a72a:	463e      	mov	r6, r7
 800a72c:	6820      	ldr	r0, [r4, #0]
 800a72e:	4632      	mov	r2, r6
 800a730:	4641      	mov	r1, r8
 800a732:	f000 f9c9 	bl	800aac8 <memmove>
 800a736:	68a3      	ldr	r3, [r4, #8]
 800a738:	1b9b      	subs	r3, r3, r6
 800a73a:	60a3      	str	r3, [r4, #8]
 800a73c:	6823      	ldr	r3, [r4, #0]
 800a73e:	4433      	add	r3, r6
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	2000      	movs	r0, #0
 800a744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a748:	462a      	mov	r2, r5
 800a74a:	f000 fdae 	bl	800b2aa <_realloc_r>
 800a74e:	4606      	mov	r6, r0
 800a750:	2800      	cmp	r0, #0
 800a752:	d1e0      	bne.n	800a716 <__ssputs_r+0x5a>
 800a754:	6921      	ldr	r1, [r4, #16]
 800a756:	4650      	mov	r0, sl
 800a758:	f7fe fb6c 	bl	8008e34 <_free_r>
 800a75c:	230c      	movs	r3, #12
 800a75e:	f8ca 3000 	str.w	r3, [sl]
 800a762:	89a3      	ldrh	r3, [r4, #12]
 800a764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a768:	81a3      	strh	r3, [r4, #12]
 800a76a:	f04f 30ff 	mov.w	r0, #4294967295
 800a76e:	e7e9      	b.n	800a744 <__ssputs_r+0x88>

0800a770 <_svfiprintf_r>:
 800a770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a774:	4698      	mov	r8, r3
 800a776:	898b      	ldrh	r3, [r1, #12]
 800a778:	061b      	lsls	r3, r3, #24
 800a77a:	b09d      	sub	sp, #116	; 0x74
 800a77c:	4607      	mov	r7, r0
 800a77e:	460d      	mov	r5, r1
 800a780:	4614      	mov	r4, r2
 800a782:	d50e      	bpl.n	800a7a2 <_svfiprintf_r+0x32>
 800a784:	690b      	ldr	r3, [r1, #16]
 800a786:	b963      	cbnz	r3, 800a7a2 <_svfiprintf_r+0x32>
 800a788:	2140      	movs	r1, #64	; 0x40
 800a78a:	f7fe fbc7 	bl	8008f1c <_malloc_r>
 800a78e:	6028      	str	r0, [r5, #0]
 800a790:	6128      	str	r0, [r5, #16]
 800a792:	b920      	cbnz	r0, 800a79e <_svfiprintf_r+0x2e>
 800a794:	230c      	movs	r3, #12
 800a796:	603b      	str	r3, [r7, #0]
 800a798:	f04f 30ff 	mov.w	r0, #4294967295
 800a79c:	e0d0      	b.n	800a940 <_svfiprintf_r+0x1d0>
 800a79e:	2340      	movs	r3, #64	; 0x40
 800a7a0:	616b      	str	r3, [r5, #20]
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a6:	2320      	movs	r3, #32
 800a7a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7b0:	2330      	movs	r3, #48	; 0x30
 800a7b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a958 <_svfiprintf_r+0x1e8>
 800a7b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7ba:	f04f 0901 	mov.w	r9, #1
 800a7be:	4623      	mov	r3, r4
 800a7c0:	469a      	mov	sl, r3
 800a7c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7c6:	b10a      	cbz	r2, 800a7cc <_svfiprintf_r+0x5c>
 800a7c8:	2a25      	cmp	r2, #37	; 0x25
 800a7ca:	d1f9      	bne.n	800a7c0 <_svfiprintf_r+0x50>
 800a7cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a7d0:	d00b      	beq.n	800a7ea <_svfiprintf_r+0x7a>
 800a7d2:	465b      	mov	r3, fp
 800a7d4:	4622      	mov	r2, r4
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	4638      	mov	r0, r7
 800a7da:	f7ff ff6f 	bl	800a6bc <__ssputs_r>
 800a7de:	3001      	adds	r0, #1
 800a7e0:	f000 80a9 	beq.w	800a936 <_svfiprintf_r+0x1c6>
 800a7e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7e6:	445a      	add	r2, fp
 800a7e8:	9209      	str	r2, [sp, #36]	; 0x24
 800a7ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f000 80a1 	beq.w	800a936 <_svfiprintf_r+0x1c6>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7fe:	f10a 0a01 	add.w	sl, sl, #1
 800a802:	9304      	str	r3, [sp, #16]
 800a804:	9307      	str	r3, [sp, #28]
 800a806:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a80a:	931a      	str	r3, [sp, #104]	; 0x68
 800a80c:	4654      	mov	r4, sl
 800a80e:	2205      	movs	r2, #5
 800a810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a814:	4850      	ldr	r0, [pc, #320]	; (800a958 <_svfiprintf_r+0x1e8>)
 800a816:	f7f5 fcf3 	bl	8000200 <memchr>
 800a81a:	9a04      	ldr	r2, [sp, #16]
 800a81c:	b9d8      	cbnz	r0, 800a856 <_svfiprintf_r+0xe6>
 800a81e:	06d0      	lsls	r0, r2, #27
 800a820:	bf44      	itt	mi
 800a822:	2320      	movmi	r3, #32
 800a824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a828:	0711      	lsls	r1, r2, #28
 800a82a:	bf44      	itt	mi
 800a82c:	232b      	movmi	r3, #43	; 0x2b
 800a82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a832:	f89a 3000 	ldrb.w	r3, [sl]
 800a836:	2b2a      	cmp	r3, #42	; 0x2a
 800a838:	d015      	beq.n	800a866 <_svfiprintf_r+0xf6>
 800a83a:	9a07      	ldr	r2, [sp, #28]
 800a83c:	4654      	mov	r4, sl
 800a83e:	2000      	movs	r0, #0
 800a840:	f04f 0c0a 	mov.w	ip, #10
 800a844:	4621      	mov	r1, r4
 800a846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a84a:	3b30      	subs	r3, #48	; 0x30
 800a84c:	2b09      	cmp	r3, #9
 800a84e:	d94d      	bls.n	800a8ec <_svfiprintf_r+0x17c>
 800a850:	b1b0      	cbz	r0, 800a880 <_svfiprintf_r+0x110>
 800a852:	9207      	str	r2, [sp, #28]
 800a854:	e014      	b.n	800a880 <_svfiprintf_r+0x110>
 800a856:	eba0 0308 	sub.w	r3, r0, r8
 800a85a:	fa09 f303 	lsl.w	r3, r9, r3
 800a85e:	4313      	orrs	r3, r2
 800a860:	9304      	str	r3, [sp, #16]
 800a862:	46a2      	mov	sl, r4
 800a864:	e7d2      	b.n	800a80c <_svfiprintf_r+0x9c>
 800a866:	9b03      	ldr	r3, [sp, #12]
 800a868:	1d19      	adds	r1, r3, #4
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	9103      	str	r1, [sp, #12]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	bfbb      	ittet	lt
 800a872:	425b      	neglt	r3, r3
 800a874:	f042 0202 	orrlt.w	r2, r2, #2
 800a878:	9307      	strge	r3, [sp, #28]
 800a87a:	9307      	strlt	r3, [sp, #28]
 800a87c:	bfb8      	it	lt
 800a87e:	9204      	strlt	r2, [sp, #16]
 800a880:	7823      	ldrb	r3, [r4, #0]
 800a882:	2b2e      	cmp	r3, #46	; 0x2e
 800a884:	d10c      	bne.n	800a8a0 <_svfiprintf_r+0x130>
 800a886:	7863      	ldrb	r3, [r4, #1]
 800a888:	2b2a      	cmp	r3, #42	; 0x2a
 800a88a:	d134      	bne.n	800a8f6 <_svfiprintf_r+0x186>
 800a88c:	9b03      	ldr	r3, [sp, #12]
 800a88e:	1d1a      	adds	r2, r3, #4
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	9203      	str	r2, [sp, #12]
 800a894:	2b00      	cmp	r3, #0
 800a896:	bfb8      	it	lt
 800a898:	f04f 33ff 	movlt.w	r3, #4294967295
 800a89c:	3402      	adds	r4, #2
 800a89e:	9305      	str	r3, [sp, #20]
 800a8a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a968 <_svfiprintf_r+0x1f8>
 800a8a4:	7821      	ldrb	r1, [r4, #0]
 800a8a6:	2203      	movs	r2, #3
 800a8a8:	4650      	mov	r0, sl
 800a8aa:	f7f5 fca9 	bl	8000200 <memchr>
 800a8ae:	b138      	cbz	r0, 800a8c0 <_svfiprintf_r+0x150>
 800a8b0:	9b04      	ldr	r3, [sp, #16]
 800a8b2:	eba0 000a 	sub.w	r0, r0, sl
 800a8b6:	2240      	movs	r2, #64	; 0x40
 800a8b8:	4082      	lsls	r2, r0
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	3401      	adds	r4, #1
 800a8be:	9304      	str	r3, [sp, #16]
 800a8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8c4:	4825      	ldr	r0, [pc, #148]	; (800a95c <_svfiprintf_r+0x1ec>)
 800a8c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8ca:	2206      	movs	r2, #6
 800a8cc:	f7f5 fc98 	bl	8000200 <memchr>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d038      	beq.n	800a946 <_svfiprintf_r+0x1d6>
 800a8d4:	4b22      	ldr	r3, [pc, #136]	; (800a960 <_svfiprintf_r+0x1f0>)
 800a8d6:	bb1b      	cbnz	r3, 800a920 <_svfiprintf_r+0x1b0>
 800a8d8:	9b03      	ldr	r3, [sp, #12]
 800a8da:	3307      	adds	r3, #7
 800a8dc:	f023 0307 	bic.w	r3, r3, #7
 800a8e0:	3308      	adds	r3, #8
 800a8e2:	9303      	str	r3, [sp, #12]
 800a8e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e6:	4433      	add	r3, r6
 800a8e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ea:	e768      	b.n	800a7be <_svfiprintf_r+0x4e>
 800a8ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8f0:	460c      	mov	r4, r1
 800a8f2:	2001      	movs	r0, #1
 800a8f4:	e7a6      	b.n	800a844 <_svfiprintf_r+0xd4>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	3401      	adds	r4, #1
 800a8fa:	9305      	str	r3, [sp, #20]
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	f04f 0c0a 	mov.w	ip, #10
 800a902:	4620      	mov	r0, r4
 800a904:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a908:	3a30      	subs	r2, #48	; 0x30
 800a90a:	2a09      	cmp	r2, #9
 800a90c:	d903      	bls.n	800a916 <_svfiprintf_r+0x1a6>
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d0c6      	beq.n	800a8a0 <_svfiprintf_r+0x130>
 800a912:	9105      	str	r1, [sp, #20]
 800a914:	e7c4      	b.n	800a8a0 <_svfiprintf_r+0x130>
 800a916:	fb0c 2101 	mla	r1, ip, r1, r2
 800a91a:	4604      	mov	r4, r0
 800a91c:	2301      	movs	r3, #1
 800a91e:	e7f0      	b.n	800a902 <_svfiprintf_r+0x192>
 800a920:	ab03      	add	r3, sp, #12
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	462a      	mov	r2, r5
 800a926:	4b0f      	ldr	r3, [pc, #60]	; (800a964 <_svfiprintf_r+0x1f4>)
 800a928:	a904      	add	r1, sp, #16
 800a92a:	4638      	mov	r0, r7
 800a92c:	f7fc fc86 	bl	800723c <_printf_float>
 800a930:	1c42      	adds	r2, r0, #1
 800a932:	4606      	mov	r6, r0
 800a934:	d1d6      	bne.n	800a8e4 <_svfiprintf_r+0x174>
 800a936:	89ab      	ldrh	r3, [r5, #12]
 800a938:	065b      	lsls	r3, r3, #25
 800a93a:	f53f af2d 	bmi.w	800a798 <_svfiprintf_r+0x28>
 800a93e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a940:	b01d      	add	sp, #116	; 0x74
 800a942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a946:	ab03      	add	r3, sp, #12
 800a948:	9300      	str	r3, [sp, #0]
 800a94a:	462a      	mov	r2, r5
 800a94c:	4b05      	ldr	r3, [pc, #20]	; (800a964 <_svfiprintf_r+0x1f4>)
 800a94e:	a904      	add	r1, sp, #16
 800a950:	4638      	mov	r0, r7
 800a952:	f7fc ff17 	bl	8007784 <_printf_i>
 800a956:	e7eb      	b.n	800a930 <_svfiprintf_r+0x1c0>
 800a958:	0800bc79 	.word	0x0800bc79
 800a95c:	0800bc83 	.word	0x0800bc83
 800a960:	0800723d 	.word	0x0800723d
 800a964:	0800a6bd 	.word	0x0800a6bd
 800a968:	0800bc7f 	.word	0x0800bc7f

0800a96c <__sflush_r>:
 800a96c:	898a      	ldrh	r2, [r1, #12]
 800a96e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a972:	4605      	mov	r5, r0
 800a974:	0710      	lsls	r0, r2, #28
 800a976:	460c      	mov	r4, r1
 800a978:	d458      	bmi.n	800aa2c <__sflush_r+0xc0>
 800a97a:	684b      	ldr	r3, [r1, #4]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	dc05      	bgt.n	800a98c <__sflush_r+0x20>
 800a980:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a982:	2b00      	cmp	r3, #0
 800a984:	dc02      	bgt.n	800a98c <__sflush_r+0x20>
 800a986:	2000      	movs	r0, #0
 800a988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a98c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a98e:	2e00      	cmp	r6, #0
 800a990:	d0f9      	beq.n	800a986 <__sflush_r+0x1a>
 800a992:	2300      	movs	r3, #0
 800a994:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a998:	682f      	ldr	r7, [r5, #0]
 800a99a:	6a21      	ldr	r1, [r4, #32]
 800a99c:	602b      	str	r3, [r5, #0]
 800a99e:	d032      	beq.n	800aa06 <__sflush_r+0x9a>
 800a9a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a9a2:	89a3      	ldrh	r3, [r4, #12]
 800a9a4:	075a      	lsls	r2, r3, #29
 800a9a6:	d505      	bpl.n	800a9b4 <__sflush_r+0x48>
 800a9a8:	6863      	ldr	r3, [r4, #4]
 800a9aa:	1ac0      	subs	r0, r0, r3
 800a9ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9ae:	b10b      	cbz	r3, 800a9b4 <__sflush_r+0x48>
 800a9b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9b2:	1ac0      	subs	r0, r0, r3
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9ba:	6a21      	ldr	r1, [r4, #32]
 800a9bc:	4628      	mov	r0, r5
 800a9be:	47b0      	blx	r6
 800a9c0:	1c43      	adds	r3, r0, #1
 800a9c2:	89a3      	ldrh	r3, [r4, #12]
 800a9c4:	d106      	bne.n	800a9d4 <__sflush_r+0x68>
 800a9c6:	6829      	ldr	r1, [r5, #0]
 800a9c8:	291d      	cmp	r1, #29
 800a9ca:	d82b      	bhi.n	800aa24 <__sflush_r+0xb8>
 800a9cc:	4a29      	ldr	r2, [pc, #164]	; (800aa74 <__sflush_r+0x108>)
 800a9ce:	410a      	asrs	r2, r1
 800a9d0:	07d6      	lsls	r6, r2, #31
 800a9d2:	d427      	bmi.n	800aa24 <__sflush_r+0xb8>
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	6062      	str	r2, [r4, #4]
 800a9d8:	04d9      	lsls	r1, r3, #19
 800a9da:	6922      	ldr	r2, [r4, #16]
 800a9dc:	6022      	str	r2, [r4, #0]
 800a9de:	d504      	bpl.n	800a9ea <__sflush_r+0x7e>
 800a9e0:	1c42      	adds	r2, r0, #1
 800a9e2:	d101      	bne.n	800a9e8 <__sflush_r+0x7c>
 800a9e4:	682b      	ldr	r3, [r5, #0]
 800a9e6:	b903      	cbnz	r3, 800a9ea <__sflush_r+0x7e>
 800a9e8:	6560      	str	r0, [r4, #84]	; 0x54
 800a9ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9ec:	602f      	str	r7, [r5, #0]
 800a9ee:	2900      	cmp	r1, #0
 800a9f0:	d0c9      	beq.n	800a986 <__sflush_r+0x1a>
 800a9f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9f6:	4299      	cmp	r1, r3
 800a9f8:	d002      	beq.n	800aa00 <__sflush_r+0x94>
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	f7fe fa1a 	bl	8008e34 <_free_r>
 800aa00:	2000      	movs	r0, #0
 800aa02:	6360      	str	r0, [r4, #52]	; 0x34
 800aa04:	e7c0      	b.n	800a988 <__sflush_r+0x1c>
 800aa06:	2301      	movs	r3, #1
 800aa08:	4628      	mov	r0, r5
 800aa0a:	47b0      	blx	r6
 800aa0c:	1c41      	adds	r1, r0, #1
 800aa0e:	d1c8      	bne.n	800a9a2 <__sflush_r+0x36>
 800aa10:	682b      	ldr	r3, [r5, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d0c5      	beq.n	800a9a2 <__sflush_r+0x36>
 800aa16:	2b1d      	cmp	r3, #29
 800aa18:	d001      	beq.n	800aa1e <__sflush_r+0xb2>
 800aa1a:	2b16      	cmp	r3, #22
 800aa1c:	d101      	bne.n	800aa22 <__sflush_r+0xb6>
 800aa1e:	602f      	str	r7, [r5, #0]
 800aa20:	e7b1      	b.n	800a986 <__sflush_r+0x1a>
 800aa22:	89a3      	ldrh	r3, [r4, #12]
 800aa24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa28:	81a3      	strh	r3, [r4, #12]
 800aa2a:	e7ad      	b.n	800a988 <__sflush_r+0x1c>
 800aa2c:	690f      	ldr	r7, [r1, #16]
 800aa2e:	2f00      	cmp	r7, #0
 800aa30:	d0a9      	beq.n	800a986 <__sflush_r+0x1a>
 800aa32:	0793      	lsls	r3, r2, #30
 800aa34:	680e      	ldr	r6, [r1, #0]
 800aa36:	bf08      	it	eq
 800aa38:	694b      	ldreq	r3, [r1, #20]
 800aa3a:	600f      	str	r7, [r1, #0]
 800aa3c:	bf18      	it	ne
 800aa3e:	2300      	movne	r3, #0
 800aa40:	eba6 0807 	sub.w	r8, r6, r7
 800aa44:	608b      	str	r3, [r1, #8]
 800aa46:	f1b8 0f00 	cmp.w	r8, #0
 800aa4a:	dd9c      	ble.n	800a986 <__sflush_r+0x1a>
 800aa4c:	6a21      	ldr	r1, [r4, #32]
 800aa4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa50:	4643      	mov	r3, r8
 800aa52:	463a      	mov	r2, r7
 800aa54:	4628      	mov	r0, r5
 800aa56:	47b0      	blx	r6
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	dc06      	bgt.n	800aa6a <__sflush_r+0xfe>
 800aa5c:	89a3      	ldrh	r3, [r4, #12]
 800aa5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa62:	81a3      	strh	r3, [r4, #12]
 800aa64:	f04f 30ff 	mov.w	r0, #4294967295
 800aa68:	e78e      	b.n	800a988 <__sflush_r+0x1c>
 800aa6a:	4407      	add	r7, r0
 800aa6c:	eba8 0800 	sub.w	r8, r8, r0
 800aa70:	e7e9      	b.n	800aa46 <__sflush_r+0xda>
 800aa72:	bf00      	nop
 800aa74:	dfbffffe 	.word	0xdfbffffe

0800aa78 <_fflush_r>:
 800aa78:	b538      	push	{r3, r4, r5, lr}
 800aa7a:	690b      	ldr	r3, [r1, #16]
 800aa7c:	4605      	mov	r5, r0
 800aa7e:	460c      	mov	r4, r1
 800aa80:	b913      	cbnz	r3, 800aa88 <_fflush_r+0x10>
 800aa82:	2500      	movs	r5, #0
 800aa84:	4628      	mov	r0, r5
 800aa86:	bd38      	pop	{r3, r4, r5, pc}
 800aa88:	b118      	cbz	r0, 800aa92 <_fflush_r+0x1a>
 800aa8a:	6a03      	ldr	r3, [r0, #32]
 800aa8c:	b90b      	cbnz	r3, 800aa92 <_fflush_r+0x1a>
 800aa8e:	f7fd fa37 	bl	8007f00 <__sinit>
 800aa92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d0f3      	beq.n	800aa82 <_fflush_r+0xa>
 800aa9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa9c:	07d0      	lsls	r0, r2, #31
 800aa9e:	d404      	bmi.n	800aaaa <_fflush_r+0x32>
 800aaa0:	0599      	lsls	r1, r3, #22
 800aaa2:	d402      	bmi.n	800aaaa <_fflush_r+0x32>
 800aaa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aaa6:	f7fd fb42 	bl	800812e <__retarget_lock_acquire_recursive>
 800aaaa:	4628      	mov	r0, r5
 800aaac:	4621      	mov	r1, r4
 800aaae:	f7ff ff5d 	bl	800a96c <__sflush_r>
 800aab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aab4:	07da      	lsls	r2, r3, #31
 800aab6:	4605      	mov	r5, r0
 800aab8:	d4e4      	bmi.n	800aa84 <_fflush_r+0xc>
 800aaba:	89a3      	ldrh	r3, [r4, #12]
 800aabc:	059b      	lsls	r3, r3, #22
 800aabe:	d4e1      	bmi.n	800aa84 <_fflush_r+0xc>
 800aac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aac2:	f7fd fb35 	bl	8008130 <__retarget_lock_release_recursive>
 800aac6:	e7dd      	b.n	800aa84 <_fflush_r+0xc>

0800aac8 <memmove>:
 800aac8:	4288      	cmp	r0, r1
 800aaca:	b510      	push	{r4, lr}
 800aacc:	eb01 0402 	add.w	r4, r1, r2
 800aad0:	d902      	bls.n	800aad8 <memmove+0x10>
 800aad2:	4284      	cmp	r4, r0
 800aad4:	4623      	mov	r3, r4
 800aad6:	d807      	bhi.n	800aae8 <memmove+0x20>
 800aad8:	1e43      	subs	r3, r0, #1
 800aada:	42a1      	cmp	r1, r4
 800aadc:	d008      	beq.n	800aaf0 <memmove+0x28>
 800aade:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aae2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aae6:	e7f8      	b.n	800aada <memmove+0x12>
 800aae8:	4402      	add	r2, r0
 800aaea:	4601      	mov	r1, r0
 800aaec:	428a      	cmp	r2, r1
 800aaee:	d100      	bne.n	800aaf2 <memmove+0x2a>
 800aaf0:	bd10      	pop	{r4, pc}
 800aaf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aaf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aafa:	e7f7      	b.n	800aaec <memmove+0x24>

0800aafc <strncmp>:
 800aafc:	b510      	push	{r4, lr}
 800aafe:	b16a      	cbz	r2, 800ab1c <strncmp+0x20>
 800ab00:	3901      	subs	r1, #1
 800ab02:	1884      	adds	r4, r0, r2
 800ab04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab08:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d103      	bne.n	800ab18 <strncmp+0x1c>
 800ab10:	42a0      	cmp	r0, r4
 800ab12:	d001      	beq.n	800ab18 <strncmp+0x1c>
 800ab14:	2a00      	cmp	r2, #0
 800ab16:	d1f5      	bne.n	800ab04 <strncmp+0x8>
 800ab18:	1ad0      	subs	r0, r2, r3
 800ab1a:	bd10      	pop	{r4, pc}
 800ab1c:	4610      	mov	r0, r2
 800ab1e:	e7fc      	b.n	800ab1a <strncmp+0x1e>

0800ab20 <_sbrk_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	4d06      	ldr	r5, [pc, #24]	; (800ab3c <_sbrk_r+0x1c>)
 800ab24:	2300      	movs	r3, #0
 800ab26:	4604      	mov	r4, r0
 800ab28:	4608      	mov	r0, r1
 800ab2a:	602b      	str	r3, [r5, #0]
 800ab2c:	f7f7 f976 	bl	8001e1c <_sbrk>
 800ab30:	1c43      	adds	r3, r0, #1
 800ab32:	d102      	bne.n	800ab3a <_sbrk_r+0x1a>
 800ab34:	682b      	ldr	r3, [r5, #0]
 800ab36:	b103      	cbz	r3, 800ab3a <_sbrk_r+0x1a>
 800ab38:	6023      	str	r3, [r4, #0]
 800ab3a:	bd38      	pop	{r3, r4, r5, pc}
 800ab3c:	20000538 	.word	0x20000538

0800ab40 <memcpy>:
 800ab40:	440a      	add	r2, r1
 800ab42:	4291      	cmp	r1, r2
 800ab44:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab48:	d100      	bne.n	800ab4c <memcpy+0xc>
 800ab4a:	4770      	bx	lr
 800ab4c:	b510      	push	{r4, lr}
 800ab4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab56:	4291      	cmp	r1, r2
 800ab58:	d1f9      	bne.n	800ab4e <memcpy+0xe>
 800ab5a:	bd10      	pop	{r4, pc}
 800ab5c:	0000      	movs	r0, r0
	...

0800ab60 <nan>:
 800ab60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ab68 <nan+0x8>
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	00000000 	.word	0x00000000
 800ab6c:	7ff80000 	.word	0x7ff80000

0800ab70 <__assert_func>:
 800ab70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab72:	4614      	mov	r4, r2
 800ab74:	461a      	mov	r2, r3
 800ab76:	4b09      	ldr	r3, [pc, #36]	; (800ab9c <__assert_func+0x2c>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4605      	mov	r5, r0
 800ab7c:	68d8      	ldr	r0, [r3, #12]
 800ab7e:	b14c      	cbz	r4, 800ab94 <__assert_func+0x24>
 800ab80:	4b07      	ldr	r3, [pc, #28]	; (800aba0 <__assert_func+0x30>)
 800ab82:	9100      	str	r1, [sp, #0]
 800ab84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab88:	4906      	ldr	r1, [pc, #24]	; (800aba4 <__assert_func+0x34>)
 800ab8a:	462b      	mov	r3, r5
 800ab8c:	f000 fbca 	bl	800b324 <fiprintf>
 800ab90:	f000 fbda 	bl	800b348 <abort>
 800ab94:	4b04      	ldr	r3, [pc, #16]	; (800aba8 <__assert_func+0x38>)
 800ab96:	461c      	mov	r4, r3
 800ab98:	e7f3      	b.n	800ab82 <__assert_func+0x12>
 800ab9a:	bf00      	nop
 800ab9c:	20000064 	.word	0x20000064
 800aba0:	0800bc92 	.word	0x0800bc92
 800aba4:	0800bc9f 	.word	0x0800bc9f
 800aba8:	0800bccd 	.word	0x0800bccd

0800abac <_calloc_r>:
 800abac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abae:	fba1 2402 	umull	r2, r4, r1, r2
 800abb2:	b94c      	cbnz	r4, 800abc8 <_calloc_r+0x1c>
 800abb4:	4611      	mov	r1, r2
 800abb6:	9201      	str	r2, [sp, #4]
 800abb8:	f7fe f9b0 	bl	8008f1c <_malloc_r>
 800abbc:	9a01      	ldr	r2, [sp, #4]
 800abbe:	4605      	mov	r5, r0
 800abc0:	b930      	cbnz	r0, 800abd0 <_calloc_r+0x24>
 800abc2:	4628      	mov	r0, r5
 800abc4:	b003      	add	sp, #12
 800abc6:	bd30      	pop	{r4, r5, pc}
 800abc8:	220c      	movs	r2, #12
 800abca:	6002      	str	r2, [r0, #0]
 800abcc:	2500      	movs	r5, #0
 800abce:	e7f8      	b.n	800abc2 <_calloc_r+0x16>
 800abd0:	4621      	mov	r1, r4
 800abd2:	f7fd fa2e 	bl	8008032 <memset>
 800abd6:	e7f4      	b.n	800abc2 <_calloc_r+0x16>

0800abd8 <rshift>:
 800abd8:	6903      	ldr	r3, [r0, #16]
 800abda:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800abde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abe2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800abe6:	f100 0414 	add.w	r4, r0, #20
 800abea:	dd45      	ble.n	800ac78 <rshift+0xa0>
 800abec:	f011 011f 	ands.w	r1, r1, #31
 800abf0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800abf4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800abf8:	d10c      	bne.n	800ac14 <rshift+0x3c>
 800abfa:	f100 0710 	add.w	r7, r0, #16
 800abfe:	4629      	mov	r1, r5
 800ac00:	42b1      	cmp	r1, r6
 800ac02:	d334      	bcc.n	800ac6e <rshift+0x96>
 800ac04:	1a9b      	subs	r3, r3, r2
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	1eea      	subs	r2, r5, #3
 800ac0a:	4296      	cmp	r6, r2
 800ac0c:	bf38      	it	cc
 800ac0e:	2300      	movcc	r3, #0
 800ac10:	4423      	add	r3, r4
 800ac12:	e015      	b.n	800ac40 <rshift+0x68>
 800ac14:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ac18:	f1c1 0820 	rsb	r8, r1, #32
 800ac1c:	40cf      	lsrs	r7, r1
 800ac1e:	f105 0e04 	add.w	lr, r5, #4
 800ac22:	46a1      	mov	r9, r4
 800ac24:	4576      	cmp	r6, lr
 800ac26:	46f4      	mov	ip, lr
 800ac28:	d815      	bhi.n	800ac56 <rshift+0x7e>
 800ac2a:	1a9a      	subs	r2, r3, r2
 800ac2c:	0092      	lsls	r2, r2, #2
 800ac2e:	3a04      	subs	r2, #4
 800ac30:	3501      	adds	r5, #1
 800ac32:	42ae      	cmp	r6, r5
 800ac34:	bf38      	it	cc
 800ac36:	2200      	movcc	r2, #0
 800ac38:	18a3      	adds	r3, r4, r2
 800ac3a:	50a7      	str	r7, [r4, r2]
 800ac3c:	b107      	cbz	r7, 800ac40 <rshift+0x68>
 800ac3e:	3304      	adds	r3, #4
 800ac40:	1b1a      	subs	r2, r3, r4
 800ac42:	42a3      	cmp	r3, r4
 800ac44:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ac48:	bf08      	it	eq
 800ac4a:	2300      	moveq	r3, #0
 800ac4c:	6102      	str	r2, [r0, #16]
 800ac4e:	bf08      	it	eq
 800ac50:	6143      	streq	r3, [r0, #20]
 800ac52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac56:	f8dc c000 	ldr.w	ip, [ip]
 800ac5a:	fa0c fc08 	lsl.w	ip, ip, r8
 800ac5e:	ea4c 0707 	orr.w	r7, ip, r7
 800ac62:	f849 7b04 	str.w	r7, [r9], #4
 800ac66:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac6a:	40cf      	lsrs	r7, r1
 800ac6c:	e7da      	b.n	800ac24 <rshift+0x4c>
 800ac6e:	f851 cb04 	ldr.w	ip, [r1], #4
 800ac72:	f847 cf04 	str.w	ip, [r7, #4]!
 800ac76:	e7c3      	b.n	800ac00 <rshift+0x28>
 800ac78:	4623      	mov	r3, r4
 800ac7a:	e7e1      	b.n	800ac40 <rshift+0x68>

0800ac7c <__hexdig_fun>:
 800ac7c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ac80:	2b09      	cmp	r3, #9
 800ac82:	d802      	bhi.n	800ac8a <__hexdig_fun+0xe>
 800ac84:	3820      	subs	r0, #32
 800ac86:	b2c0      	uxtb	r0, r0
 800ac88:	4770      	bx	lr
 800ac8a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ac8e:	2b05      	cmp	r3, #5
 800ac90:	d801      	bhi.n	800ac96 <__hexdig_fun+0x1a>
 800ac92:	3847      	subs	r0, #71	; 0x47
 800ac94:	e7f7      	b.n	800ac86 <__hexdig_fun+0xa>
 800ac96:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ac9a:	2b05      	cmp	r3, #5
 800ac9c:	d801      	bhi.n	800aca2 <__hexdig_fun+0x26>
 800ac9e:	3827      	subs	r0, #39	; 0x27
 800aca0:	e7f1      	b.n	800ac86 <__hexdig_fun+0xa>
 800aca2:	2000      	movs	r0, #0
 800aca4:	4770      	bx	lr
	...

0800aca8 <__gethex>:
 800aca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acac:	4617      	mov	r7, r2
 800acae:	680a      	ldr	r2, [r1, #0]
 800acb0:	b085      	sub	sp, #20
 800acb2:	f102 0b02 	add.w	fp, r2, #2
 800acb6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800acba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800acbe:	4681      	mov	r9, r0
 800acc0:	468a      	mov	sl, r1
 800acc2:	9302      	str	r3, [sp, #8]
 800acc4:	32fe      	adds	r2, #254	; 0xfe
 800acc6:	eb02 030b 	add.w	r3, r2, fp
 800acca:	46d8      	mov	r8, fp
 800accc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800acd0:	9301      	str	r3, [sp, #4]
 800acd2:	2830      	cmp	r0, #48	; 0x30
 800acd4:	d0f7      	beq.n	800acc6 <__gethex+0x1e>
 800acd6:	f7ff ffd1 	bl	800ac7c <__hexdig_fun>
 800acda:	4604      	mov	r4, r0
 800acdc:	2800      	cmp	r0, #0
 800acde:	d138      	bne.n	800ad52 <__gethex+0xaa>
 800ace0:	49a7      	ldr	r1, [pc, #668]	; (800af80 <__gethex+0x2d8>)
 800ace2:	2201      	movs	r2, #1
 800ace4:	4640      	mov	r0, r8
 800ace6:	f7ff ff09 	bl	800aafc <strncmp>
 800acea:	4606      	mov	r6, r0
 800acec:	2800      	cmp	r0, #0
 800acee:	d169      	bne.n	800adc4 <__gethex+0x11c>
 800acf0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800acf4:	465d      	mov	r5, fp
 800acf6:	f7ff ffc1 	bl	800ac7c <__hexdig_fun>
 800acfa:	2800      	cmp	r0, #0
 800acfc:	d064      	beq.n	800adc8 <__gethex+0x120>
 800acfe:	465a      	mov	r2, fp
 800ad00:	7810      	ldrb	r0, [r2, #0]
 800ad02:	2830      	cmp	r0, #48	; 0x30
 800ad04:	4690      	mov	r8, r2
 800ad06:	f102 0201 	add.w	r2, r2, #1
 800ad0a:	d0f9      	beq.n	800ad00 <__gethex+0x58>
 800ad0c:	f7ff ffb6 	bl	800ac7c <__hexdig_fun>
 800ad10:	2301      	movs	r3, #1
 800ad12:	fab0 f480 	clz	r4, r0
 800ad16:	0964      	lsrs	r4, r4, #5
 800ad18:	465e      	mov	r6, fp
 800ad1a:	9301      	str	r3, [sp, #4]
 800ad1c:	4642      	mov	r2, r8
 800ad1e:	4615      	mov	r5, r2
 800ad20:	3201      	adds	r2, #1
 800ad22:	7828      	ldrb	r0, [r5, #0]
 800ad24:	f7ff ffaa 	bl	800ac7c <__hexdig_fun>
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	d1f8      	bne.n	800ad1e <__gethex+0x76>
 800ad2c:	4994      	ldr	r1, [pc, #592]	; (800af80 <__gethex+0x2d8>)
 800ad2e:	2201      	movs	r2, #1
 800ad30:	4628      	mov	r0, r5
 800ad32:	f7ff fee3 	bl	800aafc <strncmp>
 800ad36:	b978      	cbnz	r0, 800ad58 <__gethex+0xb0>
 800ad38:	b946      	cbnz	r6, 800ad4c <__gethex+0xa4>
 800ad3a:	1c6e      	adds	r6, r5, #1
 800ad3c:	4632      	mov	r2, r6
 800ad3e:	4615      	mov	r5, r2
 800ad40:	3201      	adds	r2, #1
 800ad42:	7828      	ldrb	r0, [r5, #0]
 800ad44:	f7ff ff9a 	bl	800ac7c <__hexdig_fun>
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	d1f8      	bne.n	800ad3e <__gethex+0x96>
 800ad4c:	1b73      	subs	r3, r6, r5
 800ad4e:	009e      	lsls	r6, r3, #2
 800ad50:	e004      	b.n	800ad5c <__gethex+0xb4>
 800ad52:	2400      	movs	r4, #0
 800ad54:	4626      	mov	r6, r4
 800ad56:	e7e1      	b.n	800ad1c <__gethex+0x74>
 800ad58:	2e00      	cmp	r6, #0
 800ad5a:	d1f7      	bne.n	800ad4c <__gethex+0xa4>
 800ad5c:	782b      	ldrb	r3, [r5, #0]
 800ad5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ad62:	2b50      	cmp	r3, #80	; 0x50
 800ad64:	d13d      	bne.n	800ade2 <__gethex+0x13a>
 800ad66:	786b      	ldrb	r3, [r5, #1]
 800ad68:	2b2b      	cmp	r3, #43	; 0x2b
 800ad6a:	d02f      	beq.n	800adcc <__gethex+0x124>
 800ad6c:	2b2d      	cmp	r3, #45	; 0x2d
 800ad6e:	d031      	beq.n	800add4 <__gethex+0x12c>
 800ad70:	1c69      	adds	r1, r5, #1
 800ad72:	f04f 0b00 	mov.w	fp, #0
 800ad76:	7808      	ldrb	r0, [r1, #0]
 800ad78:	f7ff ff80 	bl	800ac7c <__hexdig_fun>
 800ad7c:	1e42      	subs	r2, r0, #1
 800ad7e:	b2d2      	uxtb	r2, r2
 800ad80:	2a18      	cmp	r2, #24
 800ad82:	d82e      	bhi.n	800ade2 <__gethex+0x13a>
 800ad84:	f1a0 0210 	sub.w	r2, r0, #16
 800ad88:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ad8c:	f7ff ff76 	bl	800ac7c <__hexdig_fun>
 800ad90:	f100 3cff 	add.w	ip, r0, #4294967295
 800ad94:	fa5f fc8c 	uxtb.w	ip, ip
 800ad98:	f1bc 0f18 	cmp.w	ip, #24
 800ad9c:	d91d      	bls.n	800adda <__gethex+0x132>
 800ad9e:	f1bb 0f00 	cmp.w	fp, #0
 800ada2:	d000      	beq.n	800ada6 <__gethex+0xfe>
 800ada4:	4252      	negs	r2, r2
 800ada6:	4416      	add	r6, r2
 800ada8:	f8ca 1000 	str.w	r1, [sl]
 800adac:	b1dc      	cbz	r4, 800ade6 <__gethex+0x13e>
 800adae:	9b01      	ldr	r3, [sp, #4]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	bf14      	ite	ne
 800adb4:	f04f 0800 	movne.w	r8, #0
 800adb8:	f04f 0806 	moveq.w	r8, #6
 800adbc:	4640      	mov	r0, r8
 800adbe:	b005      	add	sp, #20
 800adc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adc4:	4645      	mov	r5, r8
 800adc6:	4626      	mov	r6, r4
 800adc8:	2401      	movs	r4, #1
 800adca:	e7c7      	b.n	800ad5c <__gethex+0xb4>
 800adcc:	f04f 0b00 	mov.w	fp, #0
 800add0:	1ca9      	adds	r1, r5, #2
 800add2:	e7d0      	b.n	800ad76 <__gethex+0xce>
 800add4:	f04f 0b01 	mov.w	fp, #1
 800add8:	e7fa      	b.n	800add0 <__gethex+0x128>
 800adda:	230a      	movs	r3, #10
 800addc:	fb03 0002 	mla	r0, r3, r2, r0
 800ade0:	e7d0      	b.n	800ad84 <__gethex+0xdc>
 800ade2:	4629      	mov	r1, r5
 800ade4:	e7e0      	b.n	800ada8 <__gethex+0x100>
 800ade6:	eba5 0308 	sub.w	r3, r5, r8
 800adea:	3b01      	subs	r3, #1
 800adec:	4621      	mov	r1, r4
 800adee:	2b07      	cmp	r3, #7
 800adf0:	dc0a      	bgt.n	800ae08 <__gethex+0x160>
 800adf2:	4648      	mov	r0, r9
 800adf4:	f7fe f91e 	bl	8009034 <_Balloc>
 800adf8:	4604      	mov	r4, r0
 800adfa:	b940      	cbnz	r0, 800ae0e <__gethex+0x166>
 800adfc:	4b61      	ldr	r3, [pc, #388]	; (800af84 <__gethex+0x2dc>)
 800adfe:	4602      	mov	r2, r0
 800ae00:	21e4      	movs	r1, #228	; 0xe4
 800ae02:	4861      	ldr	r0, [pc, #388]	; (800af88 <__gethex+0x2e0>)
 800ae04:	f7ff feb4 	bl	800ab70 <__assert_func>
 800ae08:	3101      	adds	r1, #1
 800ae0a:	105b      	asrs	r3, r3, #1
 800ae0c:	e7ef      	b.n	800adee <__gethex+0x146>
 800ae0e:	f100 0a14 	add.w	sl, r0, #20
 800ae12:	2300      	movs	r3, #0
 800ae14:	495a      	ldr	r1, [pc, #360]	; (800af80 <__gethex+0x2d8>)
 800ae16:	f8cd a004 	str.w	sl, [sp, #4]
 800ae1a:	469b      	mov	fp, r3
 800ae1c:	45a8      	cmp	r8, r5
 800ae1e:	d342      	bcc.n	800aea6 <__gethex+0x1fe>
 800ae20:	9801      	ldr	r0, [sp, #4]
 800ae22:	f840 bb04 	str.w	fp, [r0], #4
 800ae26:	eba0 000a 	sub.w	r0, r0, sl
 800ae2a:	1080      	asrs	r0, r0, #2
 800ae2c:	6120      	str	r0, [r4, #16]
 800ae2e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ae32:	4658      	mov	r0, fp
 800ae34:	f7fe f9f0 	bl	8009218 <__hi0bits>
 800ae38:	683d      	ldr	r5, [r7, #0]
 800ae3a:	eba8 0000 	sub.w	r0, r8, r0
 800ae3e:	42a8      	cmp	r0, r5
 800ae40:	dd59      	ble.n	800aef6 <__gethex+0x24e>
 800ae42:	eba0 0805 	sub.w	r8, r0, r5
 800ae46:	4641      	mov	r1, r8
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f7fe fd7f 	bl	800994c <__any_on>
 800ae4e:	4683      	mov	fp, r0
 800ae50:	b1b8      	cbz	r0, 800ae82 <__gethex+0x1da>
 800ae52:	f108 33ff 	add.w	r3, r8, #4294967295
 800ae56:	1159      	asrs	r1, r3, #5
 800ae58:	f003 021f 	and.w	r2, r3, #31
 800ae5c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ae60:	f04f 0b01 	mov.w	fp, #1
 800ae64:	fa0b f202 	lsl.w	r2, fp, r2
 800ae68:	420a      	tst	r2, r1
 800ae6a:	d00a      	beq.n	800ae82 <__gethex+0x1da>
 800ae6c:	455b      	cmp	r3, fp
 800ae6e:	dd06      	ble.n	800ae7e <__gethex+0x1d6>
 800ae70:	f1a8 0102 	sub.w	r1, r8, #2
 800ae74:	4620      	mov	r0, r4
 800ae76:	f7fe fd69 	bl	800994c <__any_on>
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	d138      	bne.n	800aef0 <__gethex+0x248>
 800ae7e:	f04f 0b02 	mov.w	fp, #2
 800ae82:	4641      	mov	r1, r8
 800ae84:	4620      	mov	r0, r4
 800ae86:	f7ff fea7 	bl	800abd8 <rshift>
 800ae8a:	4446      	add	r6, r8
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	42b3      	cmp	r3, r6
 800ae90:	da41      	bge.n	800af16 <__gethex+0x26e>
 800ae92:	4621      	mov	r1, r4
 800ae94:	4648      	mov	r0, r9
 800ae96:	f7fe f90d 	bl	80090b4 <_Bfree>
 800ae9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	6013      	str	r3, [r2, #0]
 800aea0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800aea4:	e78a      	b.n	800adbc <__gethex+0x114>
 800aea6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800aeaa:	2a2e      	cmp	r2, #46	; 0x2e
 800aeac:	d014      	beq.n	800aed8 <__gethex+0x230>
 800aeae:	2b20      	cmp	r3, #32
 800aeb0:	d106      	bne.n	800aec0 <__gethex+0x218>
 800aeb2:	9b01      	ldr	r3, [sp, #4]
 800aeb4:	f843 bb04 	str.w	fp, [r3], #4
 800aeb8:	f04f 0b00 	mov.w	fp, #0
 800aebc:	9301      	str	r3, [sp, #4]
 800aebe:	465b      	mov	r3, fp
 800aec0:	7828      	ldrb	r0, [r5, #0]
 800aec2:	9303      	str	r3, [sp, #12]
 800aec4:	f7ff feda 	bl	800ac7c <__hexdig_fun>
 800aec8:	9b03      	ldr	r3, [sp, #12]
 800aeca:	f000 000f 	and.w	r0, r0, #15
 800aece:	4098      	lsls	r0, r3
 800aed0:	ea4b 0b00 	orr.w	fp, fp, r0
 800aed4:	3304      	adds	r3, #4
 800aed6:	e7a1      	b.n	800ae1c <__gethex+0x174>
 800aed8:	45a8      	cmp	r8, r5
 800aeda:	d8e8      	bhi.n	800aeae <__gethex+0x206>
 800aedc:	2201      	movs	r2, #1
 800aede:	4628      	mov	r0, r5
 800aee0:	9303      	str	r3, [sp, #12]
 800aee2:	f7ff fe0b 	bl	800aafc <strncmp>
 800aee6:	4926      	ldr	r1, [pc, #152]	; (800af80 <__gethex+0x2d8>)
 800aee8:	9b03      	ldr	r3, [sp, #12]
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d1df      	bne.n	800aeae <__gethex+0x206>
 800aeee:	e795      	b.n	800ae1c <__gethex+0x174>
 800aef0:	f04f 0b03 	mov.w	fp, #3
 800aef4:	e7c5      	b.n	800ae82 <__gethex+0x1da>
 800aef6:	da0b      	bge.n	800af10 <__gethex+0x268>
 800aef8:	eba5 0800 	sub.w	r8, r5, r0
 800aefc:	4621      	mov	r1, r4
 800aefe:	4642      	mov	r2, r8
 800af00:	4648      	mov	r0, r9
 800af02:	f7fe faf1 	bl	80094e8 <__lshift>
 800af06:	eba6 0608 	sub.w	r6, r6, r8
 800af0a:	4604      	mov	r4, r0
 800af0c:	f100 0a14 	add.w	sl, r0, #20
 800af10:	f04f 0b00 	mov.w	fp, #0
 800af14:	e7ba      	b.n	800ae8c <__gethex+0x1e4>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	42b3      	cmp	r3, r6
 800af1a:	dd73      	ble.n	800b004 <__gethex+0x35c>
 800af1c:	1b9e      	subs	r6, r3, r6
 800af1e:	42b5      	cmp	r5, r6
 800af20:	dc34      	bgt.n	800af8c <__gethex+0x2e4>
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2b02      	cmp	r3, #2
 800af26:	d023      	beq.n	800af70 <__gethex+0x2c8>
 800af28:	2b03      	cmp	r3, #3
 800af2a:	d025      	beq.n	800af78 <__gethex+0x2d0>
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d115      	bne.n	800af5c <__gethex+0x2b4>
 800af30:	42b5      	cmp	r5, r6
 800af32:	d113      	bne.n	800af5c <__gethex+0x2b4>
 800af34:	2d01      	cmp	r5, #1
 800af36:	d10b      	bne.n	800af50 <__gethex+0x2a8>
 800af38:	9a02      	ldr	r2, [sp, #8]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6013      	str	r3, [r2, #0]
 800af3e:	2301      	movs	r3, #1
 800af40:	6123      	str	r3, [r4, #16]
 800af42:	f8ca 3000 	str.w	r3, [sl]
 800af46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af48:	f04f 0862 	mov.w	r8, #98	; 0x62
 800af4c:	601c      	str	r4, [r3, #0]
 800af4e:	e735      	b.n	800adbc <__gethex+0x114>
 800af50:	1e69      	subs	r1, r5, #1
 800af52:	4620      	mov	r0, r4
 800af54:	f7fe fcfa 	bl	800994c <__any_on>
 800af58:	2800      	cmp	r0, #0
 800af5a:	d1ed      	bne.n	800af38 <__gethex+0x290>
 800af5c:	4621      	mov	r1, r4
 800af5e:	4648      	mov	r0, r9
 800af60:	f7fe f8a8 	bl	80090b4 <_Bfree>
 800af64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af66:	2300      	movs	r3, #0
 800af68:	6013      	str	r3, [r2, #0]
 800af6a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800af6e:	e725      	b.n	800adbc <__gethex+0x114>
 800af70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af72:	2b00      	cmp	r3, #0
 800af74:	d1f2      	bne.n	800af5c <__gethex+0x2b4>
 800af76:	e7df      	b.n	800af38 <__gethex+0x290>
 800af78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1dc      	bne.n	800af38 <__gethex+0x290>
 800af7e:	e7ed      	b.n	800af5c <__gethex+0x2b4>
 800af80:	0800bb24 	.word	0x0800bb24
 800af84:	0800b9bd 	.word	0x0800b9bd
 800af88:	0800bcce 	.word	0x0800bcce
 800af8c:	f106 38ff 	add.w	r8, r6, #4294967295
 800af90:	f1bb 0f00 	cmp.w	fp, #0
 800af94:	d133      	bne.n	800affe <__gethex+0x356>
 800af96:	f1b8 0f00 	cmp.w	r8, #0
 800af9a:	d004      	beq.n	800afa6 <__gethex+0x2fe>
 800af9c:	4641      	mov	r1, r8
 800af9e:	4620      	mov	r0, r4
 800afa0:	f7fe fcd4 	bl	800994c <__any_on>
 800afa4:	4683      	mov	fp, r0
 800afa6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800afaa:	2301      	movs	r3, #1
 800afac:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800afb0:	f008 081f 	and.w	r8, r8, #31
 800afb4:	fa03 f308 	lsl.w	r3, r3, r8
 800afb8:	4213      	tst	r3, r2
 800afba:	4631      	mov	r1, r6
 800afbc:	4620      	mov	r0, r4
 800afbe:	bf18      	it	ne
 800afc0:	f04b 0b02 	orrne.w	fp, fp, #2
 800afc4:	1bad      	subs	r5, r5, r6
 800afc6:	f7ff fe07 	bl	800abd8 <rshift>
 800afca:	687e      	ldr	r6, [r7, #4]
 800afcc:	f04f 0802 	mov.w	r8, #2
 800afd0:	f1bb 0f00 	cmp.w	fp, #0
 800afd4:	d04a      	beq.n	800b06c <__gethex+0x3c4>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2b02      	cmp	r3, #2
 800afda:	d016      	beq.n	800b00a <__gethex+0x362>
 800afdc:	2b03      	cmp	r3, #3
 800afde:	d018      	beq.n	800b012 <__gethex+0x36a>
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d109      	bne.n	800aff8 <__gethex+0x350>
 800afe4:	f01b 0f02 	tst.w	fp, #2
 800afe8:	d006      	beq.n	800aff8 <__gethex+0x350>
 800afea:	f8da 3000 	ldr.w	r3, [sl]
 800afee:	ea4b 0b03 	orr.w	fp, fp, r3
 800aff2:	f01b 0f01 	tst.w	fp, #1
 800aff6:	d10f      	bne.n	800b018 <__gethex+0x370>
 800aff8:	f048 0810 	orr.w	r8, r8, #16
 800affc:	e036      	b.n	800b06c <__gethex+0x3c4>
 800affe:	f04f 0b01 	mov.w	fp, #1
 800b002:	e7d0      	b.n	800afa6 <__gethex+0x2fe>
 800b004:	f04f 0801 	mov.w	r8, #1
 800b008:	e7e2      	b.n	800afd0 <__gethex+0x328>
 800b00a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b00c:	f1c3 0301 	rsb	r3, r3, #1
 800b010:	930f      	str	r3, [sp, #60]	; 0x3c
 800b012:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b014:	2b00      	cmp	r3, #0
 800b016:	d0ef      	beq.n	800aff8 <__gethex+0x350>
 800b018:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b01c:	f104 0214 	add.w	r2, r4, #20
 800b020:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b024:	9301      	str	r3, [sp, #4]
 800b026:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b02a:	2300      	movs	r3, #0
 800b02c:	4694      	mov	ip, r2
 800b02e:	f852 1b04 	ldr.w	r1, [r2], #4
 800b032:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b036:	d01e      	beq.n	800b076 <__gethex+0x3ce>
 800b038:	3101      	adds	r1, #1
 800b03a:	f8cc 1000 	str.w	r1, [ip]
 800b03e:	f1b8 0f02 	cmp.w	r8, #2
 800b042:	f104 0214 	add.w	r2, r4, #20
 800b046:	d13d      	bne.n	800b0c4 <__gethex+0x41c>
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	3b01      	subs	r3, #1
 800b04c:	42ab      	cmp	r3, r5
 800b04e:	d10b      	bne.n	800b068 <__gethex+0x3c0>
 800b050:	1169      	asrs	r1, r5, #5
 800b052:	2301      	movs	r3, #1
 800b054:	f005 051f 	and.w	r5, r5, #31
 800b058:	fa03 f505 	lsl.w	r5, r3, r5
 800b05c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b060:	421d      	tst	r5, r3
 800b062:	bf18      	it	ne
 800b064:	f04f 0801 	movne.w	r8, #1
 800b068:	f048 0820 	orr.w	r8, r8, #32
 800b06c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b06e:	601c      	str	r4, [r3, #0]
 800b070:	9b02      	ldr	r3, [sp, #8]
 800b072:	601e      	str	r6, [r3, #0]
 800b074:	e6a2      	b.n	800adbc <__gethex+0x114>
 800b076:	4290      	cmp	r0, r2
 800b078:	f842 3c04 	str.w	r3, [r2, #-4]
 800b07c:	d8d6      	bhi.n	800b02c <__gethex+0x384>
 800b07e:	68a2      	ldr	r2, [r4, #8]
 800b080:	4593      	cmp	fp, r2
 800b082:	db17      	blt.n	800b0b4 <__gethex+0x40c>
 800b084:	6861      	ldr	r1, [r4, #4]
 800b086:	4648      	mov	r0, r9
 800b088:	3101      	adds	r1, #1
 800b08a:	f7fd ffd3 	bl	8009034 <_Balloc>
 800b08e:	4682      	mov	sl, r0
 800b090:	b918      	cbnz	r0, 800b09a <__gethex+0x3f2>
 800b092:	4b1b      	ldr	r3, [pc, #108]	; (800b100 <__gethex+0x458>)
 800b094:	4602      	mov	r2, r0
 800b096:	2184      	movs	r1, #132	; 0x84
 800b098:	e6b3      	b.n	800ae02 <__gethex+0x15a>
 800b09a:	6922      	ldr	r2, [r4, #16]
 800b09c:	3202      	adds	r2, #2
 800b09e:	f104 010c 	add.w	r1, r4, #12
 800b0a2:	0092      	lsls	r2, r2, #2
 800b0a4:	300c      	adds	r0, #12
 800b0a6:	f7ff fd4b 	bl	800ab40 <memcpy>
 800b0aa:	4621      	mov	r1, r4
 800b0ac:	4648      	mov	r0, r9
 800b0ae:	f7fe f801 	bl	80090b4 <_Bfree>
 800b0b2:	4654      	mov	r4, sl
 800b0b4:	6922      	ldr	r2, [r4, #16]
 800b0b6:	1c51      	adds	r1, r2, #1
 800b0b8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b0bc:	6121      	str	r1, [r4, #16]
 800b0be:	2101      	movs	r1, #1
 800b0c0:	6151      	str	r1, [r2, #20]
 800b0c2:	e7bc      	b.n	800b03e <__gethex+0x396>
 800b0c4:	6921      	ldr	r1, [r4, #16]
 800b0c6:	4559      	cmp	r1, fp
 800b0c8:	dd0b      	ble.n	800b0e2 <__gethex+0x43a>
 800b0ca:	2101      	movs	r1, #1
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f7ff fd83 	bl	800abd8 <rshift>
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	3601      	adds	r6, #1
 800b0d6:	42b3      	cmp	r3, r6
 800b0d8:	f6ff aedb 	blt.w	800ae92 <__gethex+0x1ea>
 800b0dc:	f04f 0801 	mov.w	r8, #1
 800b0e0:	e7c2      	b.n	800b068 <__gethex+0x3c0>
 800b0e2:	f015 051f 	ands.w	r5, r5, #31
 800b0e6:	d0f9      	beq.n	800b0dc <__gethex+0x434>
 800b0e8:	9b01      	ldr	r3, [sp, #4]
 800b0ea:	441a      	add	r2, r3
 800b0ec:	f1c5 0520 	rsb	r5, r5, #32
 800b0f0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b0f4:	f7fe f890 	bl	8009218 <__hi0bits>
 800b0f8:	42a8      	cmp	r0, r5
 800b0fa:	dbe6      	blt.n	800b0ca <__gethex+0x422>
 800b0fc:	e7ee      	b.n	800b0dc <__gethex+0x434>
 800b0fe:	bf00      	nop
 800b100:	0800b9bd 	.word	0x0800b9bd

0800b104 <L_shift>:
 800b104:	f1c2 0208 	rsb	r2, r2, #8
 800b108:	0092      	lsls	r2, r2, #2
 800b10a:	b570      	push	{r4, r5, r6, lr}
 800b10c:	f1c2 0620 	rsb	r6, r2, #32
 800b110:	6843      	ldr	r3, [r0, #4]
 800b112:	6804      	ldr	r4, [r0, #0]
 800b114:	fa03 f506 	lsl.w	r5, r3, r6
 800b118:	432c      	orrs	r4, r5
 800b11a:	40d3      	lsrs	r3, r2
 800b11c:	6004      	str	r4, [r0, #0]
 800b11e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b122:	4288      	cmp	r0, r1
 800b124:	d3f4      	bcc.n	800b110 <L_shift+0xc>
 800b126:	bd70      	pop	{r4, r5, r6, pc}

0800b128 <__match>:
 800b128:	b530      	push	{r4, r5, lr}
 800b12a:	6803      	ldr	r3, [r0, #0]
 800b12c:	3301      	adds	r3, #1
 800b12e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b132:	b914      	cbnz	r4, 800b13a <__match+0x12>
 800b134:	6003      	str	r3, [r0, #0]
 800b136:	2001      	movs	r0, #1
 800b138:	bd30      	pop	{r4, r5, pc}
 800b13a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b13e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b142:	2d19      	cmp	r5, #25
 800b144:	bf98      	it	ls
 800b146:	3220      	addls	r2, #32
 800b148:	42a2      	cmp	r2, r4
 800b14a:	d0f0      	beq.n	800b12e <__match+0x6>
 800b14c:	2000      	movs	r0, #0
 800b14e:	e7f3      	b.n	800b138 <__match+0x10>

0800b150 <__hexnan>:
 800b150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b154:	680b      	ldr	r3, [r1, #0]
 800b156:	6801      	ldr	r1, [r0, #0]
 800b158:	115e      	asrs	r6, r3, #5
 800b15a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b15e:	f013 031f 	ands.w	r3, r3, #31
 800b162:	b087      	sub	sp, #28
 800b164:	bf18      	it	ne
 800b166:	3604      	addne	r6, #4
 800b168:	2500      	movs	r5, #0
 800b16a:	1f37      	subs	r7, r6, #4
 800b16c:	4682      	mov	sl, r0
 800b16e:	4690      	mov	r8, r2
 800b170:	9301      	str	r3, [sp, #4]
 800b172:	f846 5c04 	str.w	r5, [r6, #-4]
 800b176:	46b9      	mov	r9, r7
 800b178:	463c      	mov	r4, r7
 800b17a:	9502      	str	r5, [sp, #8]
 800b17c:	46ab      	mov	fp, r5
 800b17e:	784a      	ldrb	r2, [r1, #1]
 800b180:	1c4b      	adds	r3, r1, #1
 800b182:	9303      	str	r3, [sp, #12]
 800b184:	b342      	cbz	r2, 800b1d8 <__hexnan+0x88>
 800b186:	4610      	mov	r0, r2
 800b188:	9105      	str	r1, [sp, #20]
 800b18a:	9204      	str	r2, [sp, #16]
 800b18c:	f7ff fd76 	bl	800ac7c <__hexdig_fun>
 800b190:	2800      	cmp	r0, #0
 800b192:	d14f      	bne.n	800b234 <__hexnan+0xe4>
 800b194:	9a04      	ldr	r2, [sp, #16]
 800b196:	9905      	ldr	r1, [sp, #20]
 800b198:	2a20      	cmp	r2, #32
 800b19a:	d818      	bhi.n	800b1ce <__hexnan+0x7e>
 800b19c:	9b02      	ldr	r3, [sp, #8]
 800b19e:	459b      	cmp	fp, r3
 800b1a0:	dd13      	ble.n	800b1ca <__hexnan+0x7a>
 800b1a2:	454c      	cmp	r4, r9
 800b1a4:	d206      	bcs.n	800b1b4 <__hexnan+0x64>
 800b1a6:	2d07      	cmp	r5, #7
 800b1a8:	dc04      	bgt.n	800b1b4 <__hexnan+0x64>
 800b1aa:	462a      	mov	r2, r5
 800b1ac:	4649      	mov	r1, r9
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f7ff ffa8 	bl	800b104 <L_shift>
 800b1b4:	4544      	cmp	r4, r8
 800b1b6:	d950      	bls.n	800b25a <__hexnan+0x10a>
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	f1a4 0904 	sub.w	r9, r4, #4
 800b1be:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1c2:	f8cd b008 	str.w	fp, [sp, #8]
 800b1c6:	464c      	mov	r4, r9
 800b1c8:	461d      	mov	r5, r3
 800b1ca:	9903      	ldr	r1, [sp, #12]
 800b1cc:	e7d7      	b.n	800b17e <__hexnan+0x2e>
 800b1ce:	2a29      	cmp	r2, #41	; 0x29
 800b1d0:	d155      	bne.n	800b27e <__hexnan+0x12e>
 800b1d2:	3102      	adds	r1, #2
 800b1d4:	f8ca 1000 	str.w	r1, [sl]
 800b1d8:	f1bb 0f00 	cmp.w	fp, #0
 800b1dc:	d04f      	beq.n	800b27e <__hexnan+0x12e>
 800b1de:	454c      	cmp	r4, r9
 800b1e0:	d206      	bcs.n	800b1f0 <__hexnan+0xa0>
 800b1e2:	2d07      	cmp	r5, #7
 800b1e4:	dc04      	bgt.n	800b1f0 <__hexnan+0xa0>
 800b1e6:	462a      	mov	r2, r5
 800b1e8:	4649      	mov	r1, r9
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	f7ff ff8a 	bl	800b104 <L_shift>
 800b1f0:	4544      	cmp	r4, r8
 800b1f2:	d934      	bls.n	800b25e <__hexnan+0x10e>
 800b1f4:	f1a8 0204 	sub.w	r2, r8, #4
 800b1f8:	4623      	mov	r3, r4
 800b1fa:	f853 1b04 	ldr.w	r1, [r3], #4
 800b1fe:	f842 1f04 	str.w	r1, [r2, #4]!
 800b202:	429f      	cmp	r7, r3
 800b204:	d2f9      	bcs.n	800b1fa <__hexnan+0xaa>
 800b206:	1b3b      	subs	r3, r7, r4
 800b208:	f023 0303 	bic.w	r3, r3, #3
 800b20c:	3304      	adds	r3, #4
 800b20e:	3e03      	subs	r6, #3
 800b210:	3401      	adds	r4, #1
 800b212:	42a6      	cmp	r6, r4
 800b214:	bf38      	it	cc
 800b216:	2304      	movcc	r3, #4
 800b218:	4443      	add	r3, r8
 800b21a:	2200      	movs	r2, #0
 800b21c:	f843 2b04 	str.w	r2, [r3], #4
 800b220:	429f      	cmp	r7, r3
 800b222:	d2fb      	bcs.n	800b21c <__hexnan+0xcc>
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	b91b      	cbnz	r3, 800b230 <__hexnan+0xe0>
 800b228:	4547      	cmp	r7, r8
 800b22a:	d126      	bne.n	800b27a <__hexnan+0x12a>
 800b22c:	2301      	movs	r3, #1
 800b22e:	603b      	str	r3, [r7, #0]
 800b230:	2005      	movs	r0, #5
 800b232:	e025      	b.n	800b280 <__hexnan+0x130>
 800b234:	3501      	adds	r5, #1
 800b236:	2d08      	cmp	r5, #8
 800b238:	f10b 0b01 	add.w	fp, fp, #1
 800b23c:	dd06      	ble.n	800b24c <__hexnan+0xfc>
 800b23e:	4544      	cmp	r4, r8
 800b240:	d9c3      	bls.n	800b1ca <__hexnan+0x7a>
 800b242:	2300      	movs	r3, #0
 800b244:	f844 3c04 	str.w	r3, [r4, #-4]
 800b248:	2501      	movs	r5, #1
 800b24a:	3c04      	subs	r4, #4
 800b24c:	6822      	ldr	r2, [r4, #0]
 800b24e:	f000 000f 	and.w	r0, r0, #15
 800b252:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b256:	6020      	str	r0, [r4, #0]
 800b258:	e7b7      	b.n	800b1ca <__hexnan+0x7a>
 800b25a:	2508      	movs	r5, #8
 800b25c:	e7b5      	b.n	800b1ca <__hexnan+0x7a>
 800b25e:	9b01      	ldr	r3, [sp, #4]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d0df      	beq.n	800b224 <__hexnan+0xd4>
 800b264:	f1c3 0320 	rsb	r3, r3, #32
 800b268:	f04f 32ff 	mov.w	r2, #4294967295
 800b26c:	40da      	lsrs	r2, r3
 800b26e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b272:	4013      	ands	r3, r2
 800b274:	f846 3c04 	str.w	r3, [r6, #-4]
 800b278:	e7d4      	b.n	800b224 <__hexnan+0xd4>
 800b27a:	3f04      	subs	r7, #4
 800b27c:	e7d2      	b.n	800b224 <__hexnan+0xd4>
 800b27e:	2004      	movs	r0, #4
 800b280:	b007      	add	sp, #28
 800b282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b286 <__ascii_mbtowc>:
 800b286:	b082      	sub	sp, #8
 800b288:	b901      	cbnz	r1, 800b28c <__ascii_mbtowc+0x6>
 800b28a:	a901      	add	r1, sp, #4
 800b28c:	b142      	cbz	r2, 800b2a0 <__ascii_mbtowc+0x1a>
 800b28e:	b14b      	cbz	r3, 800b2a4 <__ascii_mbtowc+0x1e>
 800b290:	7813      	ldrb	r3, [r2, #0]
 800b292:	600b      	str	r3, [r1, #0]
 800b294:	7812      	ldrb	r2, [r2, #0]
 800b296:	1e10      	subs	r0, r2, #0
 800b298:	bf18      	it	ne
 800b29a:	2001      	movne	r0, #1
 800b29c:	b002      	add	sp, #8
 800b29e:	4770      	bx	lr
 800b2a0:	4610      	mov	r0, r2
 800b2a2:	e7fb      	b.n	800b29c <__ascii_mbtowc+0x16>
 800b2a4:	f06f 0001 	mvn.w	r0, #1
 800b2a8:	e7f8      	b.n	800b29c <__ascii_mbtowc+0x16>

0800b2aa <_realloc_r>:
 800b2aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ae:	4680      	mov	r8, r0
 800b2b0:	4614      	mov	r4, r2
 800b2b2:	460e      	mov	r6, r1
 800b2b4:	b921      	cbnz	r1, 800b2c0 <_realloc_r+0x16>
 800b2b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ba:	4611      	mov	r1, r2
 800b2bc:	f7fd be2e 	b.w	8008f1c <_malloc_r>
 800b2c0:	b92a      	cbnz	r2, 800b2ce <_realloc_r+0x24>
 800b2c2:	f7fd fdb7 	bl	8008e34 <_free_r>
 800b2c6:	4625      	mov	r5, r4
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2ce:	f000 f842 	bl	800b356 <_malloc_usable_size_r>
 800b2d2:	4284      	cmp	r4, r0
 800b2d4:	4607      	mov	r7, r0
 800b2d6:	d802      	bhi.n	800b2de <_realloc_r+0x34>
 800b2d8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2dc:	d812      	bhi.n	800b304 <_realloc_r+0x5a>
 800b2de:	4621      	mov	r1, r4
 800b2e0:	4640      	mov	r0, r8
 800b2e2:	f7fd fe1b 	bl	8008f1c <_malloc_r>
 800b2e6:	4605      	mov	r5, r0
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d0ed      	beq.n	800b2c8 <_realloc_r+0x1e>
 800b2ec:	42bc      	cmp	r4, r7
 800b2ee:	4622      	mov	r2, r4
 800b2f0:	4631      	mov	r1, r6
 800b2f2:	bf28      	it	cs
 800b2f4:	463a      	movcs	r2, r7
 800b2f6:	f7ff fc23 	bl	800ab40 <memcpy>
 800b2fa:	4631      	mov	r1, r6
 800b2fc:	4640      	mov	r0, r8
 800b2fe:	f7fd fd99 	bl	8008e34 <_free_r>
 800b302:	e7e1      	b.n	800b2c8 <_realloc_r+0x1e>
 800b304:	4635      	mov	r5, r6
 800b306:	e7df      	b.n	800b2c8 <_realloc_r+0x1e>

0800b308 <__ascii_wctomb>:
 800b308:	b149      	cbz	r1, 800b31e <__ascii_wctomb+0x16>
 800b30a:	2aff      	cmp	r2, #255	; 0xff
 800b30c:	bf85      	ittet	hi
 800b30e:	238a      	movhi	r3, #138	; 0x8a
 800b310:	6003      	strhi	r3, [r0, #0]
 800b312:	700a      	strbls	r2, [r1, #0]
 800b314:	f04f 30ff 	movhi.w	r0, #4294967295
 800b318:	bf98      	it	ls
 800b31a:	2001      	movls	r0, #1
 800b31c:	4770      	bx	lr
 800b31e:	4608      	mov	r0, r1
 800b320:	4770      	bx	lr
	...

0800b324 <fiprintf>:
 800b324:	b40e      	push	{r1, r2, r3}
 800b326:	b503      	push	{r0, r1, lr}
 800b328:	4601      	mov	r1, r0
 800b32a:	ab03      	add	r3, sp, #12
 800b32c:	4805      	ldr	r0, [pc, #20]	; (800b344 <fiprintf+0x20>)
 800b32e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b332:	6800      	ldr	r0, [r0, #0]
 800b334:	9301      	str	r3, [sp, #4]
 800b336:	f000 f83f 	bl	800b3b8 <_vfiprintf_r>
 800b33a:	b002      	add	sp, #8
 800b33c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b340:	b003      	add	sp, #12
 800b342:	4770      	bx	lr
 800b344:	20000064 	.word	0x20000064

0800b348 <abort>:
 800b348:	b508      	push	{r3, lr}
 800b34a:	2006      	movs	r0, #6
 800b34c:	f000 fa0c 	bl	800b768 <raise>
 800b350:	2001      	movs	r0, #1
 800b352:	f7f6 fceb 	bl	8001d2c <_exit>

0800b356 <_malloc_usable_size_r>:
 800b356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b35a:	1f18      	subs	r0, r3, #4
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	bfbc      	itt	lt
 800b360:	580b      	ldrlt	r3, [r1, r0]
 800b362:	18c0      	addlt	r0, r0, r3
 800b364:	4770      	bx	lr

0800b366 <__sfputc_r>:
 800b366:	6893      	ldr	r3, [r2, #8]
 800b368:	3b01      	subs	r3, #1
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	b410      	push	{r4}
 800b36e:	6093      	str	r3, [r2, #8]
 800b370:	da08      	bge.n	800b384 <__sfputc_r+0x1e>
 800b372:	6994      	ldr	r4, [r2, #24]
 800b374:	42a3      	cmp	r3, r4
 800b376:	db01      	blt.n	800b37c <__sfputc_r+0x16>
 800b378:	290a      	cmp	r1, #10
 800b37a:	d103      	bne.n	800b384 <__sfputc_r+0x1e>
 800b37c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b380:	f000 b934 	b.w	800b5ec <__swbuf_r>
 800b384:	6813      	ldr	r3, [r2, #0]
 800b386:	1c58      	adds	r0, r3, #1
 800b388:	6010      	str	r0, [r2, #0]
 800b38a:	7019      	strb	r1, [r3, #0]
 800b38c:	4608      	mov	r0, r1
 800b38e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <__sfputs_r>:
 800b394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b396:	4606      	mov	r6, r0
 800b398:	460f      	mov	r7, r1
 800b39a:	4614      	mov	r4, r2
 800b39c:	18d5      	adds	r5, r2, r3
 800b39e:	42ac      	cmp	r4, r5
 800b3a0:	d101      	bne.n	800b3a6 <__sfputs_r+0x12>
 800b3a2:	2000      	movs	r0, #0
 800b3a4:	e007      	b.n	800b3b6 <__sfputs_r+0x22>
 800b3a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3aa:	463a      	mov	r2, r7
 800b3ac:	4630      	mov	r0, r6
 800b3ae:	f7ff ffda 	bl	800b366 <__sfputc_r>
 800b3b2:	1c43      	adds	r3, r0, #1
 800b3b4:	d1f3      	bne.n	800b39e <__sfputs_r+0xa>
 800b3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b3b8 <_vfiprintf_r>:
 800b3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3bc:	460d      	mov	r5, r1
 800b3be:	b09d      	sub	sp, #116	; 0x74
 800b3c0:	4614      	mov	r4, r2
 800b3c2:	4698      	mov	r8, r3
 800b3c4:	4606      	mov	r6, r0
 800b3c6:	b118      	cbz	r0, 800b3d0 <_vfiprintf_r+0x18>
 800b3c8:	6a03      	ldr	r3, [r0, #32]
 800b3ca:	b90b      	cbnz	r3, 800b3d0 <_vfiprintf_r+0x18>
 800b3cc:	f7fc fd98 	bl	8007f00 <__sinit>
 800b3d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3d2:	07d9      	lsls	r1, r3, #31
 800b3d4:	d405      	bmi.n	800b3e2 <_vfiprintf_r+0x2a>
 800b3d6:	89ab      	ldrh	r3, [r5, #12]
 800b3d8:	059a      	lsls	r2, r3, #22
 800b3da:	d402      	bmi.n	800b3e2 <_vfiprintf_r+0x2a>
 800b3dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3de:	f7fc fea6 	bl	800812e <__retarget_lock_acquire_recursive>
 800b3e2:	89ab      	ldrh	r3, [r5, #12]
 800b3e4:	071b      	lsls	r3, r3, #28
 800b3e6:	d501      	bpl.n	800b3ec <_vfiprintf_r+0x34>
 800b3e8:	692b      	ldr	r3, [r5, #16]
 800b3ea:	b99b      	cbnz	r3, 800b414 <_vfiprintf_r+0x5c>
 800b3ec:	4629      	mov	r1, r5
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	f000 f93a 	bl	800b668 <__swsetup_r>
 800b3f4:	b170      	cbz	r0, 800b414 <_vfiprintf_r+0x5c>
 800b3f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3f8:	07dc      	lsls	r4, r3, #31
 800b3fa:	d504      	bpl.n	800b406 <_vfiprintf_r+0x4e>
 800b3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b400:	b01d      	add	sp, #116	; 0x74
 800b402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b406:	89ab      	ldrh	r3, [r5, #12]
 800b408:	0598      	lsls	r0, r3, #22
 800b40a:	d4f7      	bmi.n	800b3fc <_vfiprintf_r+0x44>
 800b40c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b40e:	f7fc fe8f 	bl	8008130 <__retarget_lock_release_recursive>
 800b412:	e7f3      	b.n	800b3fc <_vfiprintf_r+0x44>
 800b414:	2300      	movs	r3, #0
 800b416:	9309      	str	r3, [sp, #36]	; 0x24
 800b418:	2320      	movs	r3, #32
 800b41a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b41e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b422:	2330      	movs	r3, #48	; 0x30
 800b424:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b5d8 <_vfiprintf_r+0x220>
 800b428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b42c:	f04f 0901 	mov.w	r9, #1
 800b430:	4623      	mov	r3, r4
 800b432:	469a      	mov	sl, r3
 800b434:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b438:	b10a      	cbz	r2, 800b43e <_vfiprintf_r+0x86>
 800b43a:	2a25      	cmp	r2, #37	; 0x25
 800b43c:	d1f9      	bne.n	800b432 <_vfiprintf_r+0x7a>
 800b43e:	ebba 0b04 	subs.w	fp, sl, r4
 800b442:	d00b      	beq.n	800b45c <_vfiprintf_r+0xa4>
 800b444:	465b      	mov	r3, fp
 800b446:	4622      	mov	r2, r4
 800b448:	4629      	mov	r1, r5
 800b44a:	4630      	mov	r0, r6
 800b44c:	f7ff ffa2 	bl	800b394 <__sfputs_r>
 800b450:	3001      	adds	r0, #1
 800b452:	f000 80a9 	beq.w	800b5a8 <_vfiprintf_r+0x1f0>
 800b456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b458:	445a      	add	r2, fp
 800b45a:	9209      	str	r2, [sp, #36]	; 0x24
 800b45c:	f89a 3000 	ldrb.w	r3, [sl]
 800b460:	2b00      	cmp	r3, #0
 800b462:	f000 80a1 	beq.w	800b5a8 <_vfiprintf_r+0x1f0>
 800b466:	2300      	movs	r3, #0
 800b468:	f04f 32ff 	mov.w	r2, #4294967295
 800b46c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b470:	f10a 0a01 	add.w	sl, sl, #1
 800b474:	9304      	str	r3, [sp, #16]
 800b476:	9307      	str	r3, [sp, #28]
 800b478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b47c:	931a      	str	r3, [sp, #104]	; 0x68
 800b47e:	4654      	mov	r4, sl
 800b480:	2205      	movs	r2, #5
 800b482:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b486:	4854      	ldr	r0, [pc, #336]	; (800b5d8 <_vfiprintf_r+0x220>)
 800b488:	f7f4 feba 	bl	8000200 <memchr>
 800b48c:	9a04      	ldr	r2, [sp, #16]
 800b48e:	b9d8      	cbnz	r0, 800b4c8 <_vfiprintf_r+0x110>
 800b490:	06d1      	lsls	r1, r2, #27
 800b492:	bf44      	itt	mi
 800b494:	2320      	movmi	r3, #32
 800b496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b49a:	0713      	lsls	r3, r2, #28
 800b49c:	bf44      	itt	mi
 800b49e:	232b      	movmi	r3, #43	; 0x2b
 800b4a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b4a8:	2b2a      	cmp	r3, #42	; 0x2a
 800b4aa:	d015      	beq.n	800b4d8 <_vfiprintf_r+0x120>
 800b4ac:	9a07      	ldr	r2, [sp, #28]
 800b4ae:	4654      	mov	r4, sl
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	f04f 0c0a 	mov.w	ip, #10
 800b4b6:	4621      	mov	r1, r4
 800b4b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4bc:	3b30      	subs	r3, #48	; 0x30
 800b4be:	2b09      	cmp	r3, #9
 800b4c0:	d94d      	bls.n	800b55e <_vfiprintf_r+0x1a6>
 800b4c2:	b1b0      	cbz	r0, 800b4f2 <_vfiprintf_r+0x13a>
 800b4c4:	9207      	str	r2, [sp, #28]
 800b4c6:	e014      	b.n	800b4f2 <_vfiprintf_r+0x13a>
 800b4c8:	eba0 0308 	sub.w	r3, r0, r8
 800b4cc:	fa09 f303 	lsl.w	r3, r9, r3
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	9304      	str	r3, [sp, #16]
 800b4d4:	46a2      	mov	sl, r4
 800b4d6:	e7d2      	b.n	800b47e <_vfiprintf_r+0xc6>
 800b4d8:	9b03      	ldr	r3, [sp, #12]
 800b4da:	1d19      	adds	r1, r3, #4
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	9103      	str	r1, [sp, #12]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	bfbb      	ittet	lt
 800b4e4:	425b      	neglt	r3, r3
 800b4e6:	f042 0202 	orrlt.w	r2, r2, #2
 800b4ea:	9307      	strge	r3, [sp, #28]
 800b4ec:	9307      	strlt	r3, [sp, #28]
 800b4ee:	bfb8      	it	lt
 800b4f0:	9204      	strlt	r2, [sp, #16]
 800b4f2:	7823      	ldrb	r3, [r4, #0]
 800b4f4:	2b2e      	cmp	r3, #46	; 0x2e
 800b4f6:	d10c      	bne.n	800b512 <_vfiprintf_r+0x15a>
 800b4f8:	7863      	ldrb	r3, [r4, #1]
 800b4fa:	2b2a      	cmp	r3, #42	; 0x2a
 800b4fc:	d134      	bne.n	800b568 <_vfiprintf_r+0x1b0>
 800b4fe:	9b03      	ldr	r3, [sp, #12]
 800b500:	1d1a      	adds	r2, r3, #4
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	9203      	str	r2, [sp, #12]
 800b506:	2b00      	cmp	r3, #0
 800b508:	bfb8      	it	lt
 800b50a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b50e:	3402      	adds	r4, #2
 800b510:	9305      	str	r3, [sp, #20]
 800b512:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b5e8 <_vfiprintf_r+0x230>
 800b516:	7821      	ldrb	r1, [r4, #0]
 800b518:	2203      	movs	r2, #3
 800b51a:	4650      	mov	r0, sl
 800b51c:	f7f4 fe70 	bl	8000200 <memchr>
 800b520:	b138      	cbz	r0, 800b532 <_vfiprintf_r+0x17a>
 800b522:	9b04      	ldr	r3, [sp, #16]
 800b524:	eba0 000a 	sub.w	r0, r0, sl
 800b528:	2240      	movs	r2, #64	; 0x40
 800b52a:	4082      	lsls	r2, r0
 800b52c:	4313      	orrs	r3, r2
 800b52e:	3401      	adds	r4, #1
 800b530:	9304      	str	r3, [sp, #16]
 800b532:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b536:	4829      	ldr	r0, [pc, #164]	; (800b5dc <_vfiprintf_r+0x224>)
 800b538:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b53c:	2206      	movs	r2, #6
 800b53e:	f7f4 fe5f 	bl	8000200 <memchr>
 800b542:	2800      	cmp	r0, #0
 800b544:	d03f      	beq.n	800b5c6 <_vfiprintf_r+0x20e>
 800b546:	4b26      	ldr	r3, [pc, #152]	; (800b5e0 <_vfiprintf_r+0x228>)
 800b548:	bb1b      	cbnz	r3, 800b592 <_vfiprintf_r+0x1da>
 800b54a:	9b03      	ldr	r3, [sp, #12]
 800b54c:	3307      	adds	r3, #7
 800b54e:	f023 0307 	bic.w	r3, r3, #7
 800b552:	3308      	adds	r3, #8
 800b554:	9303      	str	r3, [sp, #12]
 800b556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b558:	443b      	add	r3, r7
 800b55a:	9309      	str	r3, [sp, #36]	; 0x24
 800b55c:	e768      	b.n	800b430 <_vfiprintf_r+0x78>
 800b55e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b562:	460c      	mov	r4, r1
 800b564:	2001      	movs	r0, #1
 800b566:	e7a6      	b.n	800b4b6 <_vfiprintf_r+0xfe>
 800b568:	2300      	movs	r3, #0
 800b56a:	3401      	adds	r4, #1
 800b56c:	9305      	str	r3, [sp, #20]
 800b56e:	4619      	mov	r1, r3
 800b570:	f04f 0c0a 	mov.w	ip, #10
 800b574:	4620      	mov	r0, r4
 800b576:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b57a:	3a30      	subs	r2, #48	; 0x30
 800b57c:	2a09      	cmp	r2, #9
 800b57e:	d903      	bls.n	800b588 <_vfiprintf_r+0x1d0>
 800b580:	2b00      	cmp	r3, #0
 800b582:	d0c6      	beq.n	800b512 <_vfiprintf_r+0x15a>
 800b584:	9105      	str	r1, [sp, #20]
 800b586:	e7c4      	b.n	800b512 <_vfiprintf_r+0x15a>
 800b588:	fb0c 2101 	mla	r1, ip, r1, r2
 800b58c:	4604      	mov	r4, r0
 800b58e:	2301      	movs	r3, #1
 800b590:	e7f0      	b.n	800b574 <_vfiprintf_r+0x1bc>
 800b592:	ab03      	add	r3, sp, #12
 800b594:	9300      	str	r3, [sp, #0]
 800b596:	462a      	mov	r2, r5
 800b598:	4b12      	ldr	r3, [pc, #72]	; (800b5e4 <_vfiprintf_r+0x22c>)
 800b59a:	a904      	add	r1, sp, #16
 800b59c:	4630      	mov	r0, r6
 800b59e:	f7fb fe4d 	bl	800723c <_printf_float>
 800b5a2:	4607      	mov	r7, r0
 800b5a4:	1c78      	adds	r0, r7, #1
 800b5a6:	d1d6      	bne.n	800b556 <_vfiprintf_r+0x19e>
 800b5a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5aa:	07d9      	lsls	r1, r3, #31
 800b5ac:	d405      	bmi.n	800b5ba <_vfiprintf_r+0x202>
 800b5ae:	89ab      	ldrh	r3, [r5, #12]
 800b5b0:	059a      	lsls	r2, r3, #22
 800b5b2:	d402      	bmi.n	800b5ba <_vfiprintf_r+0x202>
 800b5b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5b6:	f7fc fdbb 	bl	8008130 <__retarget_lock_release_recursive>
 800b5ba:	89ab      	ldrh	r3, [r5, #12]
 800b5bc:	065b      	lsls	r3, r3, #25
 800b5be:	f53f af1d 	bmi.w	800b3fc <_vfiprintf_r+0x44>
 800b5c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5c4:	e71c      	b.n	800b400 <_vfiprintf_r+0x48>
 800b5c6:	ab03      	add	r3, sp, #12
 800b5c8:	9300      	str	r3, [sp, #0]
 800b5ca:	462a      	mov	r2, r5
 800b5cc:	4b05      	ldr	r3, [pc, #20]	; (800b5e4 <_vfiprintf_r+0x22c>)
 800b5ce:	a904      	add	r1, sp, #16
 800b5d0:	4630      	mov	r0, r6
 800b5d2:	f7fc f8d7 	bl	8007784 <_printf_i>
 800b5d6:	e7e4      	b.n	800b5a2 <_vfiprintf_r+0x1ea>
 800b5d8:	0800bc79 	.word	0x0800bc79
 800b5dc:	0800bc83 	.word	0x0800bc83
 800b5e0:	0800723d 	.word	0x0800723d
 800b5e4:	0800b395 	.word	0x0800b395
 800b5e8:	0800bc7f 	.word	0x0800bc7f

0800b5ec <__swbuf_r>:
 800b5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ee:	460e      	mov	r6, r1
 800b5f0:	4614      	mov	r4, r2
 800b5f2:	4605      	mov	r5, r0
 800b5f4:	b118      	cbz	r0, 800b5fe <__swbuf_r+0x12>
 800b5f6:	6a03      	ldr	r3, [r0, #32]
 800b5f8:	b90b      	cbnz	r3, 800b5fe <__swbuf_r+0x12>
 800b5fa:	f7fc fc81 	bl	8007f00 <__sinit>
 800b5fe:	69a3      	ldr	r3, [r4, #24]
 800b600:	60a3      	str	r3, [r4, #8]
 800b602:	89a3      	ldrh	r3, [r4, #12]
 800b604:	071a      	lsls	r2, r3, #28
 800b606:	d525      	bpl.n	800b654 <__swbuf_r+0x68>
 800b608:	6923      	ldr	r3, [r4, #16]
 800b60a:	b31b      	cbz	r3, 800b654 <__swbuf_r+0x68>
 800b60c:	6823      	ldr	r3, [r4, #0]
 800b60e:	6922      	ldr	r2, [r4, #16]
 800b610:	1a98      	subs	r0, r3, r2
 800b612:	6963      	ldr	r3, [r4, #20]
 800b614:	b2f6      	uxtb	r6, r6
 800b616:	4283      	cmp	r3, r0
 800b618:	4637      	mov	r7, r6
 800b61a:	dc04      	bgt.n	800b626 <__swbuf_r+0x3a>
 800b61c:	4621      	mov	r1, r4
 800b61e:	4628      	mov	r0, r5
 800b620:	f7ff fa2a 	bl	800aa78 <_fflush_r>
 800b624:	b9e0      	cbnz	r0, 800b660 <__swbuf_r+0x74>
 800b626:	68a3      	ldr	r3, [r4, #8]
 800b628:	3b01      	subs	r3, #1
 800b62a:	60a3      	str	r3, [r4, #8]
 800b62c:	6823      	ldr	r3, [r4, #0]
 800b62e:	1c5a      	adds	r2, r3, #1
 800b630:	6022      	str	r2, [r4, #0]
 800b632:	701e      	strb	r6, [r3, #0]
 800b634:	6962      	ldr	r2, [r4, #20]
 800b636:	1c43      	adds	r3, r0, #1
 800b638:	429a      	cmp	r2, r3
 800b63a:	d004      	beq.n	800b646 <__swbuf_r+0x5a>
 800b63c:	89a3      	ldrh	r3, [r4, #12]
 800b63e:	07db      	lsls	r3, r3, #31
 800b640:	d506      	bpl.n	800b650 <__swbuf_r+0x64>
 800b642:	2e0a      	cmp	r6, #10
 800b644:	d104      	bne.n	800b650 <__swbuf_r+0x64>
 800b646:	4621      	mov	r1, r4
 800b648:	4628      	mov	r0, r5
 800b64a:	f7ff fa15 	bl	800aa78 <_fflush_r>
 800b64e:	b938      	cbnz	r0, 800b660 <__swbuf_r+0x74>
 800b650:	4638      	mov	r0, r7
 800b652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b654:	4621      	mov	r1, r4
 800b656:	4628      	mov	r0, r5
 800b658:	f000 f806 	bl	800b668 <__swsetup_r>
 800b65c:	2800      	cmp	r0, #0
 800b65e:	d0d5      	beq.n	800b60c <__swbuf_r+0x20>
 800b660:	f04f 37ff 	mov.w	r7, #4294967295
 800b664:	e7f4      	b.n	800b650 <__swbuf_r+0x64>
	...

0800b668 <__swsetup_r>:
 800b668:	b538      	push	{r3, r4, r5, lr}
 800b66a:	4b2a      	ldr	r3, [pc, #168]	; (800b714 <__swsetup_r+0xac>)
 800b66c:	4605      	mov	r5, r0
 800b66e:	6818      	ldr	r0, [r3, #0]
 800b670:	460c      	mov	r4, r1
 800b672:	b118      	cbz	r0, 800b67c <__swsetup_r+0x14>
 800b674:	6a03      	ldr	r3, [r0, #32]
 800b676:	b90b      	cbnz	r3, 800b67c <__swsetup_r+0x14>
 800b678:	f7fc fc42 	bl	8007f00 <__sinit>
 800b67c:	89a3      	ldrh	r3, [r4, #12]
 800b67e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b682:	0718      	lsls	r0, r3, #28
 800b684:	d422      	bmi.n	800b6cc <__swsetup_r+0x64>
 800b686:	06d9      	lsls	r1, r3, #27
 800b688:	d407      	bmi.n	800b69a <__swsetup_r+0x32>
 800b68a:	2309      	movs	r3, #9
 800b68c:	602b      	str	r3, [r5, #0]
 800b68e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b692:	81a3      	strh	r3, [r4, #12]
 800b694:	f04f 30ff 	mov.w	r0, #4294967295
 800b698:	e034      	b.n	800b704 <__swsetup_r+0x9c>
 800b69a:	0758      	lsls	r0, r3, #29
 800b69c:	d512      	bpl.n	800b6c4 <__swsetup_r+0x5c>
 800b69e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6a0:	b141      	cbz	r1, 800b6b4 <__swsetup_r+0x4c>
 800b6a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6a6:	4299      	cmp	r1, r3
 800b6a8:	d002      	beq.n	800b6b0 <__swsetup_r+0x48>
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	f7fd fbc2 	bl	8008e34 <_free_r>
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	6363      	str	r3, [r4, #52]	; 0x34
 800b6b4:	89a3      	ldrh	r3, [r4, #12]
 800b6b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b6ba:	81a3      	strh	r3, [r4, #12]
 800b6bc:	2300      	movs	r3, #0
 800b6be:	6063      	str	r3, [r4, #4]
 800b6c0:	6923      	ldr	r3, [r4, #16]
 800b6c2:	6023      	str	r3, [r4, #0]
 800b6c4:	89a3      	ldrh	r3, [r4, #12]
 800b6c6:	f043 0308 	orr.w	r3, r3, #8
 800b6ca:	81a3      	strh	r3, [r4, #12]
 800b6cc:	6923      	ldr	r3, [r4, #16]
 800b6ce:	b94b      	cbnz	r3, 800b6e4 <__swsetup_r+0x7c>
 800b6d0:	89a3      	ldrh	r3, [r4, #12]
 800b6d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b6d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6da:	d003      	beq.n	800b6e4 <__swsetup_r+0x7c>
 800b6dc:	4621      	mov	r1, r4
 800b6de:	4628      	mov	r0, r5
 800b6e0:	f000 f884 	bl	800b7ec <__smakebuf_r>
 800b6e4:	89a0      	ldrh	r0, [r4, #12]
 800b6e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6ea:	f010 0301 	ands.w	r3, r0, #1
 800b6ee:	d00a      	beq.n	800b706 <__swsetup_r+0x9e>
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	60a3      	str	r3, [r4, #8]
 800b6f4:	6963      	ldr	r3, [r4, #20]
 800b6f6:	425b      	negs	r3, r3
 800b6f8:	61a3      	str	r3, [r4, #24]
 800b6fa:	6923      	ldr	r3, [r4, #16]
 800b6fc:	b943      	cbnz	r3, 800b710 <__swsetup_r+0xa8>
 800b6fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b702:	d1c4      	bne.n	800b68e <__swsetup_r+0x26>
 800b704:	bd38      	pop	{r3, r4, r5, pc}
 800b706:	0781      	lsls	r1, r0, #30
 800b708:	bf58      	it	pl
 800b70a:	6963      	ldrpl	r3, [r4, #20]
 800b70c:	60a3      	str	r3, [r4, #8]
 800b70e:	e7f4      	b.n	800b6fa <__swsetup_r+0x92>
 800b710:	2000      	movs	r0, #0
 800b712:	e7f7      	b.n	800b704 <__swsetup_r+0x9c>
 800b714:	20000064 	.word	0x20000064

0800b718 <_raise_r>:
 800b718:	291f      	cmp	r1, #31
 800b71a:	b538      	push	{r3, r4, r5, lr}
 800b71c:	4604      	mov	r4, r0
 800b71e:	460d      	mov	r5, r1
 800b720:	d904      	bls.n	800b72c <_raise_r+0x14>
 800b722:	2316      	movs	r3, #22
 800b724:	6003      	str	r3, [r0, #0]
 800b726:	f04f 30ff 	mov.w	r0, #4294967295
 800b72a:	bd38      	pop	{r3, r4, r5, pc}
 800b72c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b72e:	b112      	cbz	r2, 800b736 <_raise_r+0x1e>
 800b730:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b734:	b94b      	cbnz	r3, 800b74a <_raise_r+0x32>
 800b736:	4620      	mov	r0, r4
 800b738:	f000 f830 	bl	800b79c <_getpid_r>
 800b73c:	462a      	mov	r2, r5
 800b73e:	4601      	mov	r1, r0
 800b740:	4620      	mov	r0, r4
 800b742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b746:	f000 b817 	b.w	800b778 <_kill_r>
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d00a      	beq.n	800b764 <_raise_r+0x4c>
 800b74e:	1c59      	adds	r1, r3, #1
 800b750:	d103      	bne.n	800b75a <_raise_r+0x42>
 800b752:	2316      	movs	r3, #22
 800b754:	6003      	str	r3, [r0, #0]
 800b756:	2001      	movs	r0, #1
 800b758:	e7e7      	b.n	800b72a <_raise_r+0x12>
 800b75a:	2400      	movs	r4, #0
 800b75c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b760:	4628      	mov	r0, r5
 800b762:	4798      	blx	r3
 800b764:	2000      	movs	r0, #0
 800b766:	e7e0      	b.n	800b72a <_raise_r+0x12>

0800b768 <raise>:
 800b768:	4b02      	ldr	r3, [pc, #8]	; (800b774 <raise+0xc>)
 800b76a:	4601      	mov	r1, r0
 800b76c:	6818      	ldr	r0, [r3, #0]
 800b76e:	f7ff bfd3 	b.w	800b718 <_raise_r>
 800b772:	bf00      	nop
 800b774:	20000064 	.word	0x20000064

0800b778 <_kill_r>:
 800b778:	b538      	push	{r3, r4, r5, lr}
 800b77a:	4d07      	ldr	r5, [pc, #28]	; (800b798 <_kill_r+0x20>)
 800b77c:	2300      	movs	r3, #0
 800b77e:	4604      	mov	r4, r0
 800b780:	4608      	mov	r0, r1
 800b782:	4611      	mov	r1, r2
 800b784:	602b      	str	r3, [r5, #0]
 800b786:	f7f6 fac1 	bl	8001d0c <_kill>
 800b78a:	1c43      	adds	r3, r0, #1
 800b78c:	d102      	bne.n	800b794 <_kill_r+0x1c>
 800b78e:	682b      	ldr	r3, [r5, #0]
 800b790:	b103      	cbz	r3, 800b794 <_kill_r+0x1c>
 800b792:	6023      	str	r3, [r4, #0]
 800b794:	bd38      	pop	{r3, r4, r5, pc}
 800b796:	bf00      	nop
 800b798:	20000538 	.word	0x20000538

0800b79c <_getpid_r>:
 800b79c:	f7f6 baae 	b.w	8001cfc <_getpid>

0800b7a0 <__swhatbuf_r>:
 800b7a0:	b570      	push	{r4, r5, r6, lr}
 800b7a2:	460c      	mov	r4, r1
 800b7a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7a8:	2900      	cmp	r1, #0
 800b7aa:	b096      	sub	sp, #88	; 0x58
 800b7ac:	4615      	mov	r5, r2
 800b7ae:	461e      	mov	r6, r3
 800b7b0:	da0d      	bge.n	800b7ce <__swhatbuf_r+0x2e>
 800b7b2:	89a3      	ldrh	r3, [r4, #12]
 800b7b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b7b8:	f04f 0100 	mov.w	r1, #0
 800b7bc:	bf0c      	ite	eq
 800b7be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b7c2:	2340      	movne	r3, #64	; 0x40
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	6031      	str	r1, [r6, #0]
 800b7c8:	602b      	str	r3, [r5, #0]
 800b7ca:	b016      	add	sp, #88	; 0x58
 800b7cc:	bd70      	pop	{r4, r5, r6, pc}
 800b7ce:	466a      	mov	r2, sp
 800b7d0:	f000 f848 	bl	800b864 <_fstat_r>
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	dbec      	blt.n	800b7b2 <__swhatbuf_r+0x12>
 800b7d8:	9901      	ldr	r1, [sp, #4]
 800b7da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b7de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b7e2:	4259      	negs	r1, r3
 800b7e4:	4159      	adcs	r1, r3
 800b7e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7ea:	e7eb      	b.n	800b7c4 <__swhatbuf_r+0x24>

0800b7ec <__smakebuf_r>:
 800b7ec:	898b      	ldrh	r3, [r1, #12]
 800b7ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7f0:	079d      	lsls	r5, r3, #30
 800b7f2:	4606      	mov	r6, r0
 800b7f4:	460c      	mov	r4, r1
 800b7f6:	d507      	bpl.n	800b808 <__smakebuf_r+0x1c>
 800b7f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7fc:	6023      	str	r3, [r4, #0]
 800b7fe:	6123      	str	r3, [r4, #16]
 800b800:	2301      	movs	r3, #1
 800b802:	6163      	str	r3, [r4, #20]
 800b804:	b002      	add	sp, #8
 800b806:	bd70      	pop	{r4, r5, r6, pc}
 800b808:	ab01      	add	r3, sp, #4
 800b80a:	466a      	mov	r2, sp
 800b80c:	f7ff ffc8 	bl	800b7a0 <__swhatbuf_r>
 800b810:	9900      	ldr	r1, [sp, #0]
 800b812:	4605      	mov	r5, r0
 800b814:	4630      	mov	r0, r6
 800b816:	f7fd fb81 	bl	8008f1c <_malloc_r>
 800b81a:	b948      	cbnz	r0, 800b830 <__smakebuf_r+0x44>
 800b81c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b820:	059a      	lsls	r2, r3, #22
 800b822:	d4ef      	bmi.n	800b804 <__smakebuf_r+0x18>
 800b824:	f023 0303 	bic.w	r3, r3, #3
 800b828:	f043 0302 	orr.w	r3, r3, #2
 800b82c:	81a3      	strh	r3, [r4, #12]
 800b82e:	e7e3      	b.n	800b7f8 <__smakebuf_r+0xc>
 800b830:	89a3      	ldrh	r3, [r4, #12]
 800b832:	6020      	str	r0, [r4, #0]
 800b834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b838:	81a3      	strh	r3, [r4, #12]
 800b83a:	9b00      	ldr	r3, [sp, #0]
 800b83c:	6163      	str	r3, [r4, #20]
 800b83e:	9b01      	ldr	r3, [sp, #4]
 800b840:	6120      	str	r0, [r4, #16]
 800b842:	b15b      	cbz	r3, 800b85c <__smakebuf_r+0x70>
 800b844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b848:	4630      	mov	r0, r6
 800b84a:	f000 f81d 	bl	800b888 <_isatty_r>
 800b84e:	b128      	cbz	r0, 800b85c <__smakebuf_r+0x70>
 800b850:	89a3      	ldrh	r3, [r4, #12]
 800b852:	f023 0303 	bic.w	r3, r3, #3
 800b856:	f043 0301 	orr.w	r3, r3, #1
 800b85a:	81a3      	strh	r3, [r4, #12]
 800b85c:	89a3      	ldrh	r3, [r4, #12]
 800b85e:	431d      	orrs	r5, r3
 800b860:	81a5      	strh	r5, [r4, #12]
 800b862:	e7cf      	b.n	800b804 <__smakebuf_r+0x18>

0800b864 <_fstat_r>:
 800b864:	b538      	push	{r3, r4, r5, lr}
 800b866:	4d07      	ldr	r5, [pc, #28]	; (800b884 <_fstat_r+0x20>)
 800b868:	2300      	movs	r3, #0
 800b86a:	4604      	mov	r4, r0
 800b86c:	4608      	mov	r0, r1
 800b86e:	4611      	mov	r1, r2
 800b870:	602b      	str	r3, [r5, #0]
 800b872:	f7f6 faaa 	bl	8001dca <_fstat>
 800b876:	1c43      	adds	r3, r0, #1
 800b878:	d102      	bne.n	800b880 <_fstat_r+0x1c>
 800b87a:	682b      	ldr	r3, [r5, #0]
 800b87c:	b103      	cbz	r3, 800b880 <_fstat_r+0x1c>
 800b87e:	6023      	str	r3, [r4, #0]
 800b880:	bd38      	pop	{r3, r4, r5, pc}
 800b882:	bf00      	nop
 800b884:	20000538 	.word	0x20000538

0800b888 <_isatty_r>:
 800b888:	b538      	push	{r3, r4, r5, lr}
 800b88a:	4d06      	ldr	r5, [pc, #24]	; (800b8a4 <_isatty_r+0x1c>)
 800b88c:	2300      	movs	r3, #0
 800b88e:	4604      	mov	r4, r0
 800b890:	4608      	mov	r0, r1
 800b892:	602b      	str	r3, [r5, #0]
 800b894:	f7f6 faa9 	bl	8001dea <_isatty>
 800b898:	1c43      	adds	r3, r0, #1
 800b89a:	d102      	bne.n	800b8a2 <_isatty_r+0x1a>
 800b89c:	682b      	ldr	r3, [r5, #0]
 800b89e:	b103      	cbz	r3, 800b8a2 <_isatty_r+0x1a>
 800b8a0:	6023      	str	r3, [r4, #0]
 800b8a2:	bd38      	pop	{r3, r4, r5, pc}
 800b8a4:	20000538 	.word	0x20000538

0800b8a8 <_init>:
 800b8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8aa:	bf00      	nop
 800b8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ae:	bc08      	pop	{r3}
 800b8b0:	469e      	mov	lr, r3
 800b8b2:	4770      	bx	lr

0800b8b4 <_fini>:
 800b8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b6:	bf00      	nop
 800b8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ba:	bc08      	pop	{r3}
 800b8bc:	469e      	mov	lr, r3
 800b8be:	4770      	bx	lr
